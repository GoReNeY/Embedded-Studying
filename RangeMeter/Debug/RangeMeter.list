
RangeMeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007390  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  080074a0  080074a0  000084a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007890  08007890  000091e8  2**0
                  CONTENTS
  4 .ARM          00000008  08007890  08007890  00008890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007898  08007898  000091e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007898  08007898  00008898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800789c  0800789c  0000889c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  080078a0  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  200001e8  08007a88  000091e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  08007a88  000093dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a9b  00000000  00000000  00009211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cac  00000000  00000000  00011cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  00013958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000719  00000000  00000000  000142b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018731  00000000  00000000  000149c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c874  00000000  00000000  0002d0fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000897d6  00000000  00000000  0003996e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3144  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038fc  00000000  00000000  000c3188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  000c6a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007488 	.word	0x08007488

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08007488 	.word	0x08007488

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	f023 030f 	bic.w	r3, r3, #15
 8000b38:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	011b      	lsls	r3, r3, #4
 8000b3e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	f043 030c 	orr.w	r3, r3, #12
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000b4a:	7bfb      	ldrb	r3, [r7, #15]
 8000b4c:	f043 0308 	orr.w	r3, r3, #8
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000b54:	7bbb      	ldrb	r3, [r7, #14]
 8000b56:	f043 030c 	orr.w	r3, r3, #12
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000b5e:	7bbb      	ldrb	r3, [r7, #14]
 8000b60:	f043 0308 	orr.w	r3, r3, #8
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b68:	f107 0208 	add.w	r2, r7, #8
 8000b6c:	2364      	movs	r3, #100	@ 0x64
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	2304      	movs	r3, #4
 8000b72:	214e      	movs	r1, #78	@ 0x4e
 8000b74:	4803      	ldr	r0, [pc, #12]	@ (8000b84 <lcd_send_cmd+0x5c>)
 8000b76:	f001 fe3f 	bl	80027f8 <HAL_I2C_Master_Transmit>
}
 8000b7a:	bf00      	nop
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000234 	.word	0x20000234

08000b88 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af02      	add	r7, sp, #8
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	f023 030f 	bic.w	r3, r3, #15
 8000b98:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	011b      	lsls	r3, r3, #4
 8000b9e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	f043 030d 	orr.w	r3, r3, #13
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	f043 0309 	orr.w	r3, r3, #9
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000bb4:	7bbb      	ldrb	r3, [r7, #14]
 8000bb6:	f043 030d 	orr.w	r3, r3, #13
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000bbe:	7bbb      	ldrb	r3, [r7, #14]
 8000bc0:	f043 0309 	orr.w	r3, r3, #9
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000bc8:	f107 0208 	add.w	r2, r7, #8
 8000bcc:	2364      	movs	r3, #100	@ 0x64
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	214e      	movs	r1, #78	@ 0x4e
 8000bd4:	4803      	ldr	r0, [pc, #12]	@ (8000be4 <lcd_send_data+0x5c>)
 8000bd6:	f001 fe0f 	bl	80027f8 <HAL_I2C_Master_Transmit>
}
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000234 	.word	0x20000234

08000be8 <lcd_clear>:

void lcd_clear (void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000bee:	2080      	movs	r0, #128	@ 0x80
 8000bf0:	f7ff ff9a 	bl	8000b28 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	e005      	b.n	8000c06 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000bfa:	2020      	movs	r0, #32
 8000bfc:	f7ff ffc4 	bl	8000b88 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3301      	adds	r3, #1
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b45      	cmp	r3, #69	@ 0x45
 8000c0a:	ddf6      	ble.n	8000bfa <lcd_clear+0x12>
	}
}
 8000c0c:	bf00      	nop
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
 8000c1e:	6039      	str	r1, [r7, #0]
    switch (row)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d003      	beq.n	8000c2e <lcd_put_cur+0x18>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d005      	beq.n	8000c38 <lcd_put_cur+0x22>
 8000c2c:	e009      	b.n	8000c42 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c34:	603b      	str	r3, [r7, #0]
            break;
 8000c36:	e004      	b.n	8000c42 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000c3e:	603b      	str	r3, [r7, #0]
            break;
 8000c40:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff ff6e 	bl	8000b28 <lcd_send_cmd>
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <lcd_init>:


void lcd_init (void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000c58:	2032      	movs	r0, #50	@ 0x32
 8000c5a:	f000 fcdf 	bl	800161c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c5e:	2030      	movs	r0, #48	@ 0x30
 8000c60:	f7ff ff62 	bl	8000b28 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000c64:	2005      	movs	r0, #5
 8000c66:	f000 fcd9 	bl	800161c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c6a:	2030      	movs	r0, #48	@ 0x30
 8000c6c:	f7ff ff5c 	bl	8000b28 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000c70:	2001      	movs	r0, #1
 8000c72:	f000 fcd3 	bl	800161c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000c76:	2030      	movs	r0, #48	@ 0x30
 8000c78:	f7ff ff56 	bl	8000b28 <lcd_send_cmd>
	HAL_Delay(10);
 8000c7c:	200a      	movs	r0, #10
 8000c7e:	f000 fccd 	bl	800161c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000c82:	2020      	movs	r0, #32
 8000c84:	f7ff ff50 	bl	8000b28 <lcd_send_cmd>
	HAL_Delay(10);
 8000c88:	200a      	movs	r0, #10
 8000c8a:	f000 fcc7 	bl	800161c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000c8e:	2028      	movs	r0, #40	@ 0x28
 8000c90:	f7ff ff4a 	bl	8000b28 <lcd_send_cmd>
	HAL_Delay(1);
 8000c94:	2001      	movs	r0, #1
 8000c96:	f000 fcc1 	bl	800161c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000c9a:	2008      	movs	r0, #8
 8000c9c:	f7ff ff44 	bl	8000b28 <lcd_send_cmd>
	HAL_Delay(1);
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f000 fcbb 	bl	800161c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f7ff ff3e 	bl	8000b28 <lcd_send_cmd>
	HAL_Delay(1);
 8000cac:	2001      	movs	r0, #1
 8000cae:	f000 fcb5 	bl	800161c <HAL_Delay>
	HAL_Delay(1);
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f000 fcb2 	bl	800161c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000cb8:	2006      	movs	r0, #6
 8000cba:	f7ff ff35 	bl	8000b28 <lcd_send_cmd>
	HAL_Delay(1);
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	f000 fcac 	bl	800161c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000cc4:	200c      	movs	r0, #12
 8000cc6:	f7ff ff2f 	bl	8000b28 <lcd_send_cmd>
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000cd6:	e006      	b.n	8000ce6 <lcd_send_string+0x18>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	1c5a      	adds	r2, r3, #1
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff51 	bl	8000b88 <lcd_send_data>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1f4      	bne.n	8000cd8 <lcd_send_string+0xa>
}
 8000cee:	bf00      	nop
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b5b0      	push	{r4, r5, r7, lr}
 8000cfa:	b0a0      	sub	sp, #128	@ 0x80
 8000cfc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfe:	f000 fc2b 	bl	8001558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d02:	f000 f93d 	bl	8000f80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d06:	f000 fa03 	bl	8001110 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d0a:	f000 f9d3 	bl	80010b4 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000d0e:	f000 f993 	bl	8001038 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1);
 8000d12:	4893      	ldr	r0, [pc, #588]	@ (8000f60 <main+0x268>)
 8000d14:	f001 f8fe 	bl	8001f14 <HAL_ADCEx_Calibration_Start>
  lcd_init();
 8000d18:	f7ff ff9c 	bl	8000c54 <lcd_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 8000d1c:	4890      	ldr	r0, [pc, #576]	@ (8000f60 <main+0x268>)
 8000d1e:	f000 fd79 	bl	8001814 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000d22:	2164      	movs	r1, #100	@ 0x64
 8000d24:	488e      	ldr	r0, [pc, #568]	@ (8000f60 <main+0x268>)
 8000d26:	f000 fe4f 	bl	80019c8 <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc1);
 8000d2a:	488d      	ldr	r0, [pc, #564]	@ (8000f60 <main+0x268>)
 8000d2c:	f000 ff52 	bl	8001bd4 <HAL_ADC_GetValue>
 8000d30:	4603      	mov	r3, r0
 8000d32:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	  HAL_ADC_Stop(&hadc1);
 8000d36:	488a      	ldr	r0, [pc, #552]	@ (8000f60 <main+0x268>)
 8000d38:	f000 fe1a 	bl	8001970 <HAL_ADC_Stop>

	  v = adc_value * (3.3 / 4096);
 8000d3c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fb5f 	bl	8000404 <__aeabi_i2d>
 8000d46:	a374      	add	r3, pc, #464	@ (adr r3, 8000f18 <main+0x220>)
 8000d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d4c:	f7ff fbc4 	bl	80004d8 <__aeabi_dmul>
 8000d50:	4602      	mov	r2, r0
 8000d52:	460b      	mov	r3, r1
 8000d54:	4610      	mov	r0, r2
 8000d56:	4619      	mov	r1, r3
 8000d58:	f7ff fe96 	bl	8000a88 <__aeabi_d2f>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	673b      	str	r3, [r7, #112]	@ 0x70

	  raw_distance = -154.87537 * pow(v,7) + 1995.85850 * pow(v,6) -10818.02023 * pow(v,5) + 31962.20404 * pow(v, 4) -55626.99701 * pow(v, 3) + 57152.86717 * pow(v, 2) -32273.98130 * v + 7853.47707;
 8000d60:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8000d62:	f7ff fb61 	bl	8000428 <__aeabi_f2d>
 8000d66:	f04f 0200 	mov.w	r2, #0
 8000d6a:	4b7e      	ldr	r3, [pc, #504]	@ (8000f64 <main+0x26c>)
 8000d6c:	f005 fc7e 	bl	800666c <pow>
 8000d70:	a36b      	add	r3, pc, #428	@ (adr r3, 8000f20 <main+0x228>)
 8000d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d76:	f7ff fbaf 	bl	80004d8 <__aeabi_dmul>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	4614      	mov	r4, r2
 8000d80:	461d      	mov	r5, r3
 8000d82:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8000d84:	f7ff fb50 	bl	8000428 <__aeabi_f2d>
 8000d88:	f04f 0200 	mov.w	r2, #0
 8000d8c:	4b76      	ldr	r3, [pc, #472]	@ (8000f68 <main+0x270>)
 8000d8e:	f005 fc6d 	bl	800666c <pow>
 8000d92:	a365      	add	r3, pc, #404	@ (adr r3, 8000f28 <main+0x230>)
 8000d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d98:	f7ff fb9e 	bl	80004d8 <__aeabi_dmul>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	460b      	mov	r3, r1
 8000da0:	4620      	mov	r0, r4
 8000da2:	4629      	mov	r1, r5
 8000da4:	f7ff f9e2 	bl	800016c <__adddf3>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4614      	mov	r4, r2
 8000dae:	461d      	mov	r5, r3
 8000db0:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8000db2:	f7ff fb39 	bl	8000428 <__aeabi_f2d>
 8000db6:	f04f 0200 	mov.w	r2, #0
 8000dba:	4b6c      	ldr	r3, [pc, #432]	@ (8000f6c <main+0x274>)
 8000dbc:	f005 fc56 	bl	800666c <pow>
 8000dc0:	a35b      	add	r3, pc, #364	@ (adr r3, 8000f30 <main+0x238>)
 8000dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc6:	f7ff fb87 	bl	80004d8 <__aeabi_dmul>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	460b      	mov	r3, r1
 8000dce:	4620      	mov	r0, r4
 8000dd0:	4629      	mov	r1, r5
 8000dd2:	f7ff f9c9 	bl	8000168 <__aeabi_dsub>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	4614      	mov	r4, r2
 8000ddc:	461d      	mov	r5, r3
 8000dde:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8000de0:	f7ff fb22 	bl	8000428 <__aeabi_f2d>
 8000de4:	f04f 0200 	mov.w	r2, #0
 8000de8:	4b61      	ldr	r3, [pc, #388]	@ (8000f70 <main+0x278>)
 8000dea:	f005 fc3f 	bl	800666c <pow>
 8000dee:	a352      	add	r3, pc, #328	@ (adr r3, 8000f38 <main+0x240>)
 8000df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df4:	f7ff fb70 	bl	80004d8 <__aeabi_dmul>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	4629      	mov	r1, r5
 8000e00:	f7ff f9b4 	bl	800016c <__adddf3>
 8000e04:	4602      	mov	r2, r0
 8000e06:	460b      	mov	r3, r1
 8000e08:	4614      	mov	r4, r2
 8000e0a:	461d      	mov	r5, r3
 8000e0c:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8000e0e:	f7ff fb0b 	bl	8000428 <__aeabi_f2d>
 8000e12:	f04f 0200 	mov.w	r2, #0
 8000e16:	4b57      	ldr	r3, [pc, #348]	@ (8000f74 <main+0x27c>)
 8000e18:	f005 fc28 	bl	800666c <pow>
 8000e1c:	a348      	add	r3, pc, #288	@ (adr r3, 8000f40 <main+0x248>)
 8000e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e22:	f7ff fb59 	bl	80004d8 <__aeabi_dmul>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	4629      	mov	r1, r5
 8000e2e:	f7ff f99b 	bl	8000168 <__aeabi_dsub>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	4614      	mov	r4, r2
 8000e38:	461d      	mov	r5, r3
 8000e3a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8000e3c:	f7ff faf4 	bl	8000428 <__aeabi_f2d>
 8000e40:	f04f 0200 	mov.w	r2, #0
 8000e44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e48:	f005 fc10 	bl	800666c <pow>
 8000e4c:	a33e      	add	r3, pc, #248	@ (adr r3, 8000f48 <main+0x250>)
 8000e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e52:	f7ff fb41 	bl	80004d8 <__aeabi_dmul>
 8000e56:	4602      	mov	r2, r0
 8000e58:	460b      	mov	r3, r1
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	4629      	mov	r1, r5
 8000e5e:	f7ff f985 	bl	800016c <__adddf3>
 8000e62:	4602      	mov	r2, r0
 8000e64:	460b      	mov	r3, r1
 8000e66:	4614      	mov	r4, r2
 8000e68:	461d      	mov	r5, r3
 8000e6a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8000e6c:	f7ff fadc 	bl	8000428 <__aeabi_f2d>
 8000e70:	a337      	add	r3, pc, #220	@ (adr r3, 8000f50 <main+0x258>)
 8000e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e76:	f7ff fb2f 	bl	80004d8 <__aeabi_dmul>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	4620      	mov	r0, r4
 8000e80:	4629      	mov	r1, r5
 8000e82:	f7ff f971 	bl	8000168 <__aeabi_dsub>
 8000e86:	4602      	mov	r2, r0
 8000e88:	460b      	mov	r3, r1
 8000e8a:	4610      	mov	r0, r2
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	a332      	add	r3, pc, #200	@ (adr r3, 8000f58 <main+0x260>)
 8000e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e94:	f7ff f96a 	bl	800016c <__adddf3>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f7ff fdf2 	bl	8000a88 <__aeabi_d2f>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	66fb      	str	r3, [r7, #108]	@ 0x6c

	  lcd_clear();
 8000ea8:	f7ff fe9e 	bl	8000be8 <lcd_clear>
	  lcd_put_cur(0, 0);
 8000eac:	2100      	movs	r1, #0
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff feb1 	bl	8000c16 <lcd_put_cur>

	  snprintf(float_str_distance, sizeof(float_str_distance), "%.2f Cm", raw_distance);
 8000eb4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8000eb6:	f7ff fab7 	bl	8000428 <__aeabi_f2d>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8000ec2:	e9cd 2300 	strd	r2, r3, [sp]
 8000ec6:	4a2c      	ldr	r2, [pc, #176]	@ (8000f78 <main+0x280>)
 8000ec8:	2132      	movs	r1, #50	@ 0x32
 8000eca:	f003 fa87 	bl	80043dc <sniprintf>

	  lcd_send_string(float_str_distance);
 8000ece:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fefb 	bl	8000cce <lcd_send_string>

	  HAL_Delay(50);
 8000ed8:	2032      	movs	r0, #50	@ 0x32
 8000eda:	f000 fb9f 	bl	800161c <HAL_Delay>

	  lcd_put_cur(1, 0);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f7ff fe98 	bl	8000c16 <lcd_put_cur>

	  snprintf(float_str_voltage, sizeof(float_str_voltage), "%.2f Volts", v);
 8000ee6:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8000ee8:	f7ff fa9e 	bl	8000428 <__aeabi_f2d>
 8000eec:	4602      	mov	r2, r0
 8000eee:	460b      	mov	r3, r1
 8000ef0:	1d38      	adds	r0, r7, #4
 8000ef2:	e9cd 2300 	strd	r2, r3, [sp]
 8000ef6:	4a21      	ldr	r2, [pc, #132]	@ (8000f7c <main+0x284>)
 8000ef8:	2132      	movs	r1, #50	@ 0x32
 8000efa:	f003 fa6f 	bl	80043dc <sniprintf>

	  lcd_send_string(float_str_voltage);
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fee4 	bl	8000cce <lcd_send_string>

	  HAL_Delay(500);
 8000f06:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f0a:	f000 fb87 	bl	800161c <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000f0e:	bf00      	nop
 8000f10:	e704      	b.n	8000d1c <main+0x24>
 8000f12:	bf00      	nop
 8000f14:	f3af 8000 	nop.w
 8000f18:	66666666 	.word	0x66666666
 8000f1c:	3f4a6666 	.word	0x3f4a6666
 8000f20:	07f23cc9 	.word	0x07f23cc9
 8000f24:	c0635c03 	.word	0xc0635c03
 8000f28:	1a9fbe77 	.word	0x1a9fbe77
 8000f2c:	409f2f6f 	.word	0x409f2f6f
 8000f30:	96e58a33 	.word	0x96e58a33
 8000f34:	40c52102 	.word	0x40c52102
 8000f38:	0efdc9c5 	.word	0x0efdc9c5
 8000f3c:	40df368d 	.word	0x40df368d
 8000f40:	e78183f9 	.word	0xe78183f9
 8000f44:	40eb295f 	.word	0x40eb295f
 8000f48:	bfdb4cc2 	.word	0xbfdb4cc2
 8000f4c:	40ebe81b 	.word	0x40ebe81b
 8000f50:	cd9e83e4 	.word	0xcd9e83e4
 8000f54:	40df847e 	.word	0x40df847e
 8000f58:	21426fe7 	.word	0x21426fe7
 8000f5c:	40bead7a 	.word	0x40bead7a
 8000f60:	20000204 	.word	0x20000204
 8000f64:	401c0000 	.word	0x401c0000
 8000f68:	40180000 	.word	0x40180000
 8000f6c:	40140000 	.word	0x40140000
 8000f70:	40100000 	.word	0x40100000
 8000f74:	40080000 	.word	0x40080000
 8000f78:	080074a0 	.word	0x080074a0
 8000f7c:	080074a8 	.word	0x080074a8

08000f80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b094      	sub	sp, #80	@ 0x50
 8000f84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f8a:	2228      	movs	r2, #40	@ 0x28
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f003 fa9b 	bl	80044ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fcc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000fd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f001 ff66 	bl	8002ea8 <HAL_RCC_OscConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fe2:	f000 f8ed 	bl	80011c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe6:	230f      	movs	r3, #15
 8000fe8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fea:	2302      	movs	r3, #2
 8000fec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ff6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2102      	movs	r1, #2
 8001002:	4618      	mov	r0, r3
 8001004:	f002 f9d2 	bl	80033ac <HAL_RCC_ClockConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800100e:	f000 f8d7 	bl	80011c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001012:	2302      	movs	r3, #2
 8001014:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001016:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800101a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	4618      	mov	r0, r3
 8001020:	f002 fb52 	bl	80036c8 <HAL_RCCEx_PeriphCLKConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800102a:	f000 f8c9 	bl	80011c0 <Error_Handler>
  }
}
 800102e:	bf00      	nop
 8001030:	3750      	adds	r7, #80	@ 0x50
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001048:	4b18      	ldr	r3, [pc, #96]	@ (80010ac <MX_ADC1_Init+0x74>)
 800104a:	4a19      	ldr	r2, [pc, #100]	@ (80010b0 <MX_ADC1_Init+0x78>)
 800104c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800104e:	4b17      	ldr	r3, [pc, #92]	@ (80010ac <MX_ADC1_Init+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001054:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <MX_ADC1_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800105a:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <MX_ADC1_Init+0x74>)
 800105c:	2200      	movs	r2, #0
 800105e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001060:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <MX_ADC1_Init+0x74>)
 8001062:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001066:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b10      	ldr	r3, [pc, #64]	@ (80010ac <MX_ADC1_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800106e:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <MX_ADC1_Init+0x74>)
 8001070:	2201      	movs	r2, #1
 8001072:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001074:	480d      	ldr	r0, [pc, #52]	@ (80010ac <MX_ADC1_Init+0x74>)
 8001076:	f000 faf5 	bl	8001664 <HAL_ADC_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001080:	f000 f89e 	bl	80011c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001084:	2301      	movs	r3, #1
 8001086:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001088:	2301      	movs	r3, #1
 800108a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	4619      	mov	r1, r3
 8001094:	4805      	ldr	r0, [pc, #20]	@ (80010ac <MX_ADC1_Init+0x74>)
 8001096:	f000 fda9 	bl	8001bec <HAL_ADC_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80010a0:	f000 f88e 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000204 	.word	0x20000204
 80010b0:	40012400 	.word	0x40012400

080010b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010ba:	4a13      	ldr	r2, [pc, #76]	@ (8001108 <MX_I2C1_Init+0x54>)
 80010bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010be:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010c0:	4a12      	ldr	r2, [pc, #72]	@ (800110c <MX_I2C1_Init+0x58>)
 80010c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010de:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e4:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010f0:	4804      	ldr	r0, [pc, #16]	@ (8001104 <MX_I2C1_Init+0x50>)
 80010f2:	f001 fa3d 	bl	8002570 <HAL_I2C_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010fc:	f000 f860 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000234 	.word	0x20000234
 8001108:	40005400 	.word	0x40005400
 800110c:	000186a0 	.word	0x000186a0

08001110 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001116:	f107 0310 	add.w	r3, r7, #16
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001124:	4b24      	ldr	r3, [pc, #144]	@ (80011b8 <MX_GPIO_Init+0xa8>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a23      	ldr	r2, [pc, #140]	@ (80011b8 <MX_GPIO_Init+0xa8>)
 800112a:	f043 0310 	orr.w	r3, r3, #16
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b21      	ldr	r3, [pc, #132]	@ (80011b8 <MX_GPIO_Init+0xa8>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0310 	and.w	r3, r3, #16
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800113c:	4b1e      	ldr	r3, [pc, #120]	@ (80011b8 <MX_GPIO_Init+0xa8>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a1d      	ldr	r2, [pc, #116]	@ (80011b8 <MX_GPIO_Init+0xa8>)
 8001142:	f043 0320 	orr.w	r3, r3, #32
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b1b      	ldr	r3, [pc, #108]	@ (80011b8 <MX_GPIO_Init+0xa8>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0320 	and.w	r3, r3, #32
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001154:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <MX_GPIO_Init+0xa8>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	4a17      	ldr	r2, [pc, #92]	@ (80011b8 <MX_GPIO_Init+0xa8>)
 800115a:	f043 0304 	orr.w	r3, r3, #4
 800115e:	6193      	str	r3, [r2, #24]
 8001160:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <MX_GPIO_Init+0xa8>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116c:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <MX_GPIO_Init+0xa8>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a11      	ldr	r2, [pc, #68]	@ (80011b8 <MX_GPIO_Init+0xa8>)
 8001172:	f043 0308 	orr.w	r3, r3, #8
 8001176:	6193      	str	r3, [r2, #24]
 8001178:	4b0f      	ldr	r3, [pc, #60]	@ (80011b8 <MX_GPIO_Init+0xa8>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f003 0308 	and.w	r3, r3, #8
 8001180:	603b      	str	r3, [r7, #0]
 8001182:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800118a:	480c      	ldr	r0, [pc, #48]	@ (80011bc <MX_GPIO_Init+0xac>)
 800118c:	f001 f9d8 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001190:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001194:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001196:	2301      	movs	r3, #1
 8001198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2302      	movs	r3, #2
 80011a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 0310 	add.w	r3, r7, #16
 80011a6:	4619      	mov	r1, r3
 80011a8:	4804      	ldr	r0, [pc, #16]	@ (80011bc <MX_GPIO_Init+0xac>)
 80011aa:	f001 f845 	bl	8002238 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ae:	bf00      	nop
 80011b0:	3720      	adds	r7, #32
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000
 80011bc:	40011000 	.word	0x40011000

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c4:	b672      	cpsid	i
}
 80011c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <Error_Handler+0x8>

080011cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011d2:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <HAL_MspInit+0x5c>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	4a14      	ldr	r2, [pc, #80]	@ (8001228 <HAL_MspInit+0x5c>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6193      	str	r3, [r2, #24]
 80011de:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <HAL_MspInit+0x5c>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001228 <HAL_MspInit+0x5c>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001228 <HAL_MspInit+0x5c>)
 80011f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f4:	61d3      	str	r3, [r2, #28]
 80011f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <HAL_MspInit+0x5c>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001202:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <HAL_MspInit+0x60>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	4a04      	ldr	r2, [pc, #16]	@ (800122c <HAL_MspInit+0x60>)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121e:	bf00      	nop
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	40021000 	.word	0x40021000
 800122c:	40010000 	.word	0x40010000

08001230 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a14      	ldr	r2, [pc, #80]	@ (800129c <HAL_ADC_MspInit+0x6c>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d121      	bne.n	8001294 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001250:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <HAL_ADC_MspInit+0x70>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	4a12      	ldr	r2, [pc, #72]	@ (80012a0 <HAL_ADC_MspInit+0x70>)
 8001256:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800125a:	6193      	str	r3, [r2, #24]
 800125c:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <HAL_ADC_MspInit+0x70>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001268:	4b0d      	ldr	r3, [pc, #52]	@ (80012a0 <HAL_ADC_MspInit+0x70>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a0c      	ldr	r2, [pc, #48]	@ (80012a0 <HAL_ADC_MspInit+0x70>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <HAL_ADC_MspInit+0x70>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001280:	2302      	movs	r3, #2
 8001282:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001284:	2303      	movs	r3, #3
 8001286:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	4619      	mov	r1, r3
 800128e:	4805      	ldr	r0, [pc, #20]	@ (80012a4 <HAL_ADC_MspInit+0x74>)
 8001290:	f000 ffd2 	bl	8002238 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001294:	bf00      	nop
 8001296:	3720      	adds	r7, #32
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40012400 	.word	0x40012400
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40010800 	.word	0x40010800

080012a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a15      	ldr	r2, [pc, #84]	@ (8001318 <HAL_I2C_MspInit+0x70>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d123      	bne.n	8001310 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b14      	ldr	r3, [pc, #80]	@ (800131c <HAL_I2C_MspInit+0x74>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a13      	ldr	r2, [pc, #76]	@ (800131c <HAL_I2C_MspInit+0x74>)
 80012ce:	f043 0308 	orr.w	r3, r3, #8
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b11      	ldr	r3, [pc, #68]	@ (800131c <HAL_I2C_MspInit+0x74>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012e0:	23c0      	movs	r3, #192	@ 0xc0
 80012e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e4:	2312      	movs	r3, #18
 80012e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	4619      	mov	r1, r3
 80012f2:	480b      	ldr	r0, [pc, #44]	@ (8001320 <HAL_I2C_MspInit+0x78>)
 80012f4:	f000 ffa0 	bl	8002238 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012f8:	4b08      	ldr	r3, [pc, #32]	@ (800131c <HAL_I2C_MspInit+0x74>)
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	4a07      	ldr	r2, [pc, #28]	@ (800131c <HAL_I2C_MspInit+0x74>)
 80012fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001302:	61d3      	str	r3, [r2, #28]
 8001304:	4b05      	ldr	r3, [pc, #20]	@ (800131c <HAL_I2C_MspInit+0x74>)
 8001306:	69db      	ldr	r3, [r3, #28]
 8001308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001310:	bf00      	nop
 8001312:	3720      	adds	r7, #32
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40005400 	.word	0x40005400
 800131c:	40021000 	.word	0x40021000
 8001320:	40010c00 	.word	0x40010c00

08001324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <NMI_Handler+0x4>

0800132c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <MemManage_Handler+0x4>

0800133c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <BusFault_Handler+0x4>

08001344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <UsageFault_Handler+0x4>

0800134c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr

08001358 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001374:	f000 f936 	bl	80015e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return 1;
 8001380:	2301      	movs	r3, #1
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <_kill>:

int _kill(int pid, int sig)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001394:	f003 f8ec 	bl	8004570 <__errno>
 8001398:	4603      	mov	r3, r0
 800139a:	2216      	movs	r2, #22
 800139c:	601a      	str	r2, [r3, #0]
  return -1;
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <_exit>:

void _exit (int status)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013b2:	f04f 31ff 	mov.w	r1, #4294967295
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ffe7 	bl	800138a <_kill>
  while (1) {}    /* Make sure we hang here */
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <_exit+0x12>

080013c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	e00a      	b.n	80013e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013d2:	f3af 8000 	nop.w
 80013d6:	4601      	mov	r1, r0
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	60ba      	str	r2, [r7, #8]
 80013de:	b2ca      	uxtb	r2, r1
 80013e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	3301      	adds	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	dbf0      	blt.n	80013d2 <_read+0x12>
  }

  return len;
 80013f0:	687b      	ldr	r3, [r7, #4]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b086      	sub	sp, #24
 80013fe:	af00      	add	r7, sp, #0
 8001400:	60f8      	str	r0, [r7, #12]
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	e009      	b.n	8001420 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	60ba      	str	r2, [r7, #8]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	3301      	adds	r3, #1
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	429a      	cmp	r2, r3
 8001426:	dbf1      	blt.n	800140c <_write+0x12>
  }
  return len;
 8001428:	687b      	ldr	r3, [r7, #4]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <_close>:

int _close(int file)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr

08001448 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001458:	605a      	str	r2, [r3, #4]
  return 0;
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr

08001466 <_isatty>:

int _isatty(int file)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800146e:	2301      	movs	r3, #1
}
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr

0800147a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800147a:	b480      	push	{r7}
 800147c:	b085      	sub	sp, #20
 800147e:	af00      	add	r7, sp, #0
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
	...

08001494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800149c:	4a14      	ldr	r2, [pc, #80]	@ (80014f0 <_sbrk+0x5c>)
 800149e:	4b15      	ldr	r3, [pc, #84]	@ (80014f4 <_sbrk+0x60>)
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a8:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <_sbrk+0x64>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d102      	bne.n	80014b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b0:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <_sbrk+0x64>)
 80014b2:	4a12      	ldr	r2, [pc, #72]	@ (80014fc <_sbrk+0x68>)
 80014b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014b6:	4b10      	ldr	r3, [pc, #64]	@ (80014f8 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d207      	bcs.n	80014d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c4:	f003 f854 	bl	8004570 <__errno>
 80014c8:	4603      	mov	r3, r0
 80014ca:	220c      	movs	r2, #12
 80014cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295
 80014d2:	e009      	b.n	80014e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d4:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <_sbrk+0x64>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014da:	4b07      	ldr	r3, [pc, #28]	@ (80014f8 <_sbrk+0x64>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	4a05      	ldr	r2, [pc, #20]	@ (80014f8 <_sbrk+0x64>)
 80014e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014e6:	68fb      	ldr	r3, [r7, #12]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20005000 	.word	0x20005000
 80014f4:	00000400 	.word	0x00000400
 80014f8:	20000288 	.word	0x20000288
 80014fc:	200003e0 	.word	0x200003e0

08001500 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800150c:	f7ff fff8 	bl	8001500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001510:	480b      	ldr	r0, [pc, #44]	@ (8001540 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001512:	490c      	ldr	r1, [pc, #48]	@ (8001544 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001514:	4a0c      	ldr	r2, [pc, #48]	@ (8001548 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a09      	ldr	r2, [pc, #36]	@ (800154c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001528:	4c09      	ldr	r4, [pc, #36]	@ (8001550 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001536:	f003 f821 	bl	800457c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800153a:	f7ff fbdd 	bl	8000cf8 <main>
  bx lr
 800153e:	4770      	bx	lr
  ldr r0, =_sdata
 8001540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001544:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001548:	080078a0 	.word	0x080078a0
  ldr r2, =_sbss
 800154c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001550:	200003dc 	.word	0x200003dc

08001554 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001554:	e7fe      	b.n	8001554 <ADC1_2_IRQHandler>
	...

08001558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800155c:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <HAL_Init+0x28>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a07      	ldr	r2, [pc, #28]	@ (8001580 <HAL_Init+0x28>)
 8001562:	f043 0310 	orr.w	r3, r3, #16
 8001566:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001568:	2003      	movs	r0, #3
 800156a:	f000 fe31 	bl	80021d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156e:	200f      	movs	r0, #15
 8001570:	f000 f808 	bl	8001584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001574:	f7ff fe2a 	bl	80011cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40022000 	.word	0x40022000

08001584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <HAL_InitTick+0x54>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <HAL_InitTick+0x58>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800159a:	fbb3 f3f1 	udiv	r3, r3, r1
 800159e:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 fe3b 	bl	800221e <HAL_SYSTICK_Config>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00e      	b.n	80015d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b0f      	cmp	r3, #15
 80015b6:	d80a      	bhi.n	80015ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b8:	2200      	movs	r2, #0
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295
 80015c0:	f000 fe11 	bl	80021e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c4:	4a06      	ldr	r2, [pc, #24]	@ (80015e0 <HAL_InitTick+0x5c>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e000      	b.n	80015d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000000 	.word	0x20000000
 80015dc:	20000008 	.word	0x20000008
 80015e0:	20000004 	.word	0x20000004

080015e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e8:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <HAL_IncTick+0x1c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b05      	ldr	r3, [pc, #20]	@ (8001604 <HAL_IncTick+0x20>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	4a03      	ldr	r2, [pc, #12]	@ (8001604 <HAL_IncTick+0x20>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	20000008 	.word	0x20000008
 8001604:	2000028c 	.word	0x2000028c

08001608 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;
 800160c:	4b02      	ldr	r3, [pc, #8]	@ (8001618 <HAL_GetTick+0x10>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	2000028c 	.word	0x2000028c

0800161c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001624:	f7ff fff0 	bl	8001608 <HAL_GetTick>
 8001628:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001634:	d005      	beq.n	8001642 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001636:	4b0a      	ldr	r3, [pc, #40]	@ (8001660 <HAL_Delay+0x44>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	4413      	add	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001642:	bf00      	nop
 8001644:	f7ff ffe0 	bl	8001608 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	429a      	cmp	r2, r3
 8001652:	d8f7      	bhi.n	8001644 <HAL_Delay+0x28>
  {
  }
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000008 	.word	0x20000008

08001664 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800166c:	2300      	movs	r3, #0
 800166e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001674:	2300      	movs	r3, #0
 8001676:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e0be      	b.n	8001804 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001690:	2b00      	cmp	r3, #0
 8001692:	d109      	bne.n	80016a8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff fdc4 	bl	8001230 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 fbf1 	bl	8001e90 <ADC_ConversionStop_Disable>
 80016ae:	4603      	mov	r3, r0
 80016b0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b6:	f003 0310 	and.w	r3, r3, #16
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f040 8099 	bne.w	80017f2 <HAL_ADC_Init+0x18e>
 80016c0:	7dfb      	ldrb	r3, [r7, #23]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f040 8095 	bne.w	80017f2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016cc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016d0:	f023 0302 	bic.w	r3, r3, #2
 80016d4:	f043 0202 	orr.w	r2, r3, #2
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016e4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	7b1b      	ldrb	r3, [r3, #12]
 80016ea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016ec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016fc:	d003      	beq.n	8001706 <HAL_ADC_Init+0xa2>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d102      	bne.n	800170c <HAL_ADC_Init+0xa8>
 8001706:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800170a:	e000      	b.n	800170e <HAL_ADC_Init+0xaa>
 800170c:	2300      	movs	r3, #0
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7d1b      	ldrb	r3, [r3, #20]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d119      	bne.n	8001750 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	7b1b      	ldrb	r3, [r3, #12]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d109      	bne.n	8001738 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	3b01      	subs	r3, #1
 800172a:	035a      	lsls	r2, r3, #13
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	e00b      	b.n	8001750 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800173c:	f043 0220 	orr.w	r2, r3, #32
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001748:	f043 0201 	orr.w	r2, r3, #1
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	430a      	orrs	r2, r1
 8001762:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	4b28      	ldr	r3, [pc, #160]	@ (800180c <HAL_ADC_Init+0x1a8>)
 800176c:	4013      	ands	r3, r2
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6812      	ldr	r2, [r2, #0]
 8001772:	68b9      	ldr	r1, [r7, #8]
 8001774:	430b      	orrs	r3, r1
 8001776:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001780:	d003      	beq.n	800178a <HAL_ADC_Init+0x126>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d104      	bne.n	8001794 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	3b01      	subs	r3, #1
 8001790:	051b      	lsls	r3, r3, #20
 8001792:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800179a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	430a      	orrs	r2, r1
 80017a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	4b18      	ldr	r3, [pc, #96]	@ (8001810 <HAL_ADC_Init+0x1ac>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d10b      	bne.n	80017d0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c2:	f023 0303 	bic.w	r3, r3, #3
 80017c6:	f043 0201 	orr.w	r2, r3, #1
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017ce:	e018      	b.n	8001802 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d4:	f023 0312 	bic.w	r3, r3, #18
 80017d8:	f043 0210 	orr.w	r2, r3, #16
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e4:	f043 0201 	orr.w	r2, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017f0:	e007      	b.n	8001802 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f6:	f043 0210 	orr.w	r2, r3, #16
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001802:	7dfb      	ldrb	r3, [r7, #23]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	ffe1f7fd 	.word	0xffe1f7fd
 8001810:	ff1f0efe 	.word	0xff1f0efe

08001814 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001826:	2b01      	cmp	r3, #1
 8001828:	d101      	bne.n	800182e <HAL_ADC_Start+0x1a>
 800182a:	2302      	movs	r3, #2
 800182c:	e098      	b.n	8001960 <HAL_ADC_Start+0x14c>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 fad0 	bl	8001ddc <ADC_Enable>
 800183c:	4603      	mov	r3, r0
 800183e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001840:	7bfb      	ldrb	r3, [r7, #15]
 8001842:	2b00      	cmp	r3, #0
 8001844:	f040 8087 	bne.w	8001956 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800184c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001850:	f023 0301 	bic.w	r3, r3, #1
 8001854:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a41      	ldr	r2, [pc, #260]	@ (8001968 <HAL_ADC_Start+0x154>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d105      	bne.n	8001872 <HAL_ADC_Start+0x5e>
 8001866:	4b41      	ldr	r3, [pc, #260]	@ (800196c <HAL_ADC_Start+0x158>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d115      	bne.n	800189e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001876:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001888:	2b00      	cmp	r3, #0
 800188a:	d026      	beq.n	80018da <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001890:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001894:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800189c:	e01d      	b.n	80018da <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a2f      	ldr	r2, [pc, #188]	@ (800196c <HAL_ADC_Start+0x158>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d004      	beq.n	80018be <HAL_ADC_Start+0xaa>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a2b      	ldr	r2, [pc, #172]	@ (8001968 <HAL_ADC_Start+0x154>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d10d      	bne.n	80018da <HAL_ADC_Start+0xc6>
 80018be:	4b2b      	ldr	r3, [pc, #172]	@ (800196c <HAL_ADC_Start+0x158>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d007      	beq.n	80018da <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018d2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d006      	beq.n	80018f4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ea:	f023 0206 	bic.w	r2, r3, #6
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018f2:	e002      	b.n	80018fa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f06f 0202 	mvn.w	r2, #2
 800190a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001916:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800191a:	d113      	bne.n	8001944 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001920:	4a11      	ldr	r2, [pc, #68]	@ (8001968 <HAL_ADC_Start+0x154>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d105      	bne.n	8001932 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001926:	4b11      	ldr	r3, [pc, #68]	@ (800196c <HAL_ADC_Start+0x158>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800192e:	2b00      	cmp	r3, #0
 8001930:	d108      	bne.n	8001944 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	e00c      	b.n	800195e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	e003      	b.n	800195e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800195e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40012800 	.word	0x40012800
 800196c:	40012400 	.word	0x40012400

08001970 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001982:	2b01      	cmp	r3, #1
 8001984:	d101      	bne.n	800198a <HAL_ADC_Stop+0x1a>
 8001986:	2302      	movs	r3, #2
 8001988:	e01a      	b.n	80019c0 <HAL_ADC_Stop+0x50>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 fa7c 	bl	8001e90 <ADC_ConversionStop_Disable>
 8001998:	4603      	mov	r3, r0
 800199a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d109      	bne.n	80019b6 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019aa:	f023 0301 	bic.w	r3, r3, #1
 80019ae:	f043 0201 	orr.w	r2, r3, #1
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80019be:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80019de:	f7ff fe13 	bl	8001608 <HAL_GetTick>
 80019e2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00b      	beq.n	8001a0a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f6:	f043 0220 	orr.w	r2, r3, #32
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e0d3      	b.n	8001bb2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d131      	bne.n	8001a7c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d12a      	bne.n	8001a7c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a26:	e021      	b.n	8001a6c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a2e:	d01d      	beq.n	8001a6c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d007      	beq.n	8001a46 <HAL_ADC_PollForConversion+0x7e>
 8001a36:	f7ff fde7 	bl	8001608 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d212      	bcs.n	8001a6c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d10b      	bne.n	8001a6c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a58:	f043 0204 	orr.w	r2, r3, #4
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e0a2      	b.n	8001bb2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0d6      	beq.n	8001a28 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a7a:	e070      	b.n	8001b5e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001a7c:	4b4f      	ldr	r3, [pc, #316]	@ (8001bbc <HAL_ADC_PollForConversion+0x1f4>)
 8001a7e:	681c      	ldr	r4, [r3, #0]
 8001a80:	2002      	movs	r0, #2
 8001a82:	f001 fed7 	bl	8003834 <HAL_RCCEx_GetPeriphCLKFreq>
 8001a86:	4603      	mov	r3, r0
 8001a88:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6919      	ldr	r1, [r3, #16]
 8001a92:	4b4b      	ldr	r3, [pc, #300]	@ (8001bc0 <HAL_ADC_PollForConversion+0x1f8>)
 8001a94:	400b      	ands	r3, r1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d118      	bne.n	8001acc <HAL_ADC_PollForConversion+0x104>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68d9      	ldr	r1, [r3, #12]
 8001aa0:	4b48      	ldr	r3, [pc, #288]	@ (8001bc4 <HAL_ADC_PollForConversion+0x1fc>)
 8001aa2:	400b      	ands	r3, r1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d111      	bne.n	8001acc <HAL_ADC_PollForConversion+0x104>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6919      	ldr	r1, [r3, #16]
 8001aae:	4b46      	ldr	r3, [pc, #280]	@ (8001bc8 <HAL_ADC_PollForConversion+0x200>)
 8001ab0:	400b      	ands	r3, r1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d108      	bne.n	8001ac8 <HAL_ADC_PollForConversion+0x100>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68d9      	ldr	r1, [r3, #12]
 8001abc:	4b43      	ldr	r3, [pc, #268]	@ (8001bcc <HAL_ADC_PollForConversion+0x204>)
 8001abe:	400b      	ands	r3, r1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_ADC_PollForConversion+0x100>
 8001ac4:	2314      	movs	r3, #20
 8001ac6:	e020      	b.n	8001b0a <HAL_ADC_PollForConversion+0x142>
 8001ac8:	2329      	movs	r3, #41	@ 0x29
 8001aca:	e01e      	b.n	8001b0a <HAL_ADC_PollForConversion+0x142>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6919      	ldr	r1, [r3, #16]
 8001ad2:	4b3d      	ldr	r3, [pc, #244]	@ (8001bc8 <HAL_ADC_PollForConversion+0x200>)
 8001ad4:	400b      	ands	r3, r1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d106      	bne.n	8001ae8 <HAL_ADC_PollForConversion+0x120>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68d9      	ldr	r1, [r3, #12]
 8001ae0:	4b3a      	ldr	r3, [pc, #232]	@ (8001bcc <HAL_ADC_PollForConversion+0x204>)
 8001ae2:	400b      	ands	r3, r1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00d      	beq.n	8001b04 <HAL_ADC_PollForConversion+0x13c>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6919      	ldr	r1, [r3, #16]
 8001aee:	4b38      	ldr	r3, [pc, #224]	@ (8001bd0 <HAL_ADC_PollForConversion+0x208>)
 8001af0:	400b      	ands	r3, r1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d108      	bne.n	8001b08 <HAL_ADC_PollForConversion+0x140>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68d9      	ldr	r1, [r3, #12]
 8001afc:	4b34      	ldr	r3, [pc, #208]	@ (8001bd0 <HAL_ADC_PollForConversion+0x208>)
 8001afe:	400b      	ands	r3, r1
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_ADC_PollForConversion+0x140>
 8001b04:	2354      	movs	r3, #84	@ 0x54
 8001b06:	e000      	b.n	8001b0a <HAL_ADC_PollForConversion+0x142>
 8001b08:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b10:	e021      	b.n	8001b56 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b18:	d01a      	beq.n	8001b50 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d007      	beq.n	8001b30 <HAL_ADC_PollForConversion+0x168>
 8001b20:	f7ff fd72 	bl	8001608 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d20f      	bcs.n	8001b50 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d90b      	bls.n	8001b50 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b3c:	f043 0204 	orr.w	r2, r3, #4
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e030      	b.n	8001bb2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	3301      	adds	r3, #1
 8001b54:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d8d9      	bhi.n	8001b12 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f06f 0212 	mvn.w	r2, #18
 8001b66:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b6c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001b7e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001b82:	d115      	bne.n	8001bb0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d111      	bne.n	8001bb0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d105      	bne.n	8001bb0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba8:	f043 0201 	orr.w	r2, r3, #1
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	371c      	adds	r7, #28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd90      	pop	{r4, r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000000 	.word	0x20000000
 8001bc0:	24924924 	.word	0x24924924
 8001bc4:	00924924 	.word	0x00924924
 8001bc8:	12492492 	.word	0x12492492
 8001bcc:	00492492 	.word	0x00492492
 8001bd0:	00249249 	.word	0x00249249

08001bd4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x20>
 8001c08:	2302      	movs	r3, #2
 8001c0a:	e0dc      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x1da>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b06      	cmp	r3, #6
 8001c1a:	d81c      	bhi.n	8001c56 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3b05      	subs	r3, #5
 8001c2e:	221f      	movs	r2, #31
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	4019      	ands	r1, r3
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	6818      	ldr	r0, [r3, #0]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	3b05      	subs	r3, #5
 8001c48:	fa00 f203 	lsl.w	r2, r0, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c54:	e03c      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b0c      	cmp	r3, #12
 8001c5c:	d81c      	bhi.n	8001c98 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3b23      	subs	r3, #35	@ 0x23
 8001c70:	221f      	movs	r2, #31
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	4019      	ands	r1, r3
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	3b23      	subs	r3, #35	@ 0x23
 8001c8a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c96:	e01b      	b.n	8001cd0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3b41      	subs	r3, #65	@ 0x41
 8001caa:	221f      	movs	r2, #31
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	4019      	ands	r1, r3
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3b41      	subs	r3, #65	@ 0x41
 8001cc4:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b09      	cmp	r3, #9
 8001cd6:	d91c      	bls.n	8001d12 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68d9      	ldr	r1, [r3, #12]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3b1e      	subs	r3, #30
 8001cea:	2207      	movs	r2, #7
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	4019      	ands	r1, r3
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6898      	ldr	r0, [r3, #8]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	3b1e      	subs	r3, #30
 8001d04:	fa00 f203 	lsl.w	r2, r0, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	60da      	str	r2, [r3, #12]
 8001d10:	e019      	b.n	8001d46 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6919      	ldr	r1, [r3, #16]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	2207      	movs	r2, #7
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	4019      	ands	r1, r3
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	6898      	ldr	r0, [r3, #8]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4613      	mov	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4413      	add	r3, r2
 8001d3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b10      	cmp	r3, #16
 8001d4c:	d003      	beq.n	8001d56 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d52:	2b11      	cmp	r3, #17
 8001d54:	d132      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd0 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d125      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d126      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001d7c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2b10      	cmp	r3, #16
 8001d84:	d11a      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d86:	4b13      	ldr	r3, [pc, #76]	@ (8001dd4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a13      	ldr	r2, [pc, #76]	@ (8001dd8 <HAL_ADC_ConfigChannel+0x1ec>)
 8001d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d90:	0c9a      	lsrs	r2, r3, #18
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d9c:	e002      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f9      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x1b2>
 8001daa:	e007      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db0:	f043 0220 	orr.w	r2, r3, #32
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	40012400 	.word	0x40012400
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	431bde83 	.word	0x431bde83

08001ddc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d040      	beq.n	8001e7c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f042 0201 	orr.w	r2, r2, #1
 8001e08:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e88 <ADC_Enable+0xac>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a1f      	ldr	r2, [pc, #124]	@ (8001e8c <ADC_Enable+0xb0>)
 8001e10:	fba2 2303 	umull	r2, r3, r2, r3
 8001e14:	0c9b      	lsrs	r3, r3, #18
 8001e16:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e18:	e002      	b.n	8001e20 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f9      	bne.n	8001e1a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e26:	f7ff fbef 	bl	8001608 <HAL_GetTick>
 8001e2a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e2c:	e01f      	b.n	8001e6e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e2e:	f7ff fbeb 	bl	8001608 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d918      	bls.n	8001e6e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d011      	beq.n	8001e6e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4e:	f043 0210 	orr.w	r2, r3, #16
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5a:	f043 0201 	orr.w	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e007      	b.n	8001e7e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d1d8      	bne.n	8001e2e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000000 	.word	0x20000000
 8001e8c:	431bde83 	.word	0x431bde83

08001e90 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d12e      	bne.n	8001f08 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0201 	bic.w	r2, r2, #1
 8001eb8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001eba:	f7ff fba5 	bl	8001608 <HAL_GetTick>
 8001ebe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ec0:	e01b      	b.n	8001efa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ec2:	f7ff fba1 	bl	8001608 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d914      	bls.n	8001efa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d10d      	bne.n	8001efa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee2:	f043 0210 	orr.w	r2, r3, #16
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eee:	f043 0201 	orr.w	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e007      	b.n	8001f0a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d0dc      	beq.n	8001ec2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001f14:	b590      	push	{r4, r7, lr}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_ADCEx_Calibration_Start+0x1e>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e097      	b.n	8002062 <HAL_ADCEx_Calibration_Start+0x14e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff ffa8 	bl	8001e90 <ADC_ConversionStop_Disable>
 8001f40:	4603      	mov	r3, r0
 8001f42:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ff49 	bl	8001ddc <ADC_Enable>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001f4e:	7dfb      	ldrb	r3, [r7, #23]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f040 8081 	bne.w	8002058 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f5e:	f023 0302 	bic.w	r3, r3, #2
 8001f62:	f043 0202 	orr.w	r2, r3, #2
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001f6a:	4b40      	ldr	r3, [pc, #256]	@ (800206c <HAL_ADCEx_Calibration_Start+0x158>)
 8001f6c:	681c      	ldr	r4, [r3, #0]
 8001f6e:	2002      	movs	r0, #2
 8001f70:	f001 fc60 	bl	8003834 <HAL_RCCEx_GetPeriphCLKFreq>
 8001f74:	4603      	mov	r3, r0
 8001f76:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001f7a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001f7c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001f7e:	e002      	b.n	8001f86 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1f9      	bne.n	8001f80 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0208 	orr.w	r2, r2, #8
 8001f9a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001f9c:	f7ff fb34 	bl	8001608 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001fa2:	e01b      	b.n	8001fdc <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001fa4:	f7ff fb30 	bl	8001608 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b0a      	cmp	r3, #10
 8001fb0:	d914      	bls.n	8001fdc <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00d      	beq.n	8001fdc <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc4:	f023 0312 	bic.w	r3, r3, #18
 8001fc8:	f043 0210 	orr.w	r2, r3, #16
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e042      	b.n	8002062 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1dc      	bne.n	8001fa4 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0204 	orr.w	r2, r2, #4
 8001ff8:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001ffa:	f7ff fb05 	bl	8001608 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002000:	e01b      	b.n	800203a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002002:	f7ff fb01 	bl	8001608 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b0a      	cmp	r3, #10
 800200e:	d914      	bls.n	800203a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00d      	beq.n	800203a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002022:	f023 0312 	bic.w	r3, r3, #18
 8002026:	f043 0210 	orr.w	r2, r3, #16
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e013      	b.n	8002062 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1dc      	bne.n	8002002 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204c:	f023 0303 	bic.w	r3, r3, #3
 8002050:	f043 0201 	orr.w	r2, r3, #1
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002060:	7dfb      	ldrb	r3, [r7, #23]
}
 8002062:	4618      	mov	r0, r3
 8002064:	371c      	adds	r7, #28
 8002066:	46bd      	mov	sp, r7
 8002068:	bd90      	pop	{r4, r7, pc}
 800206a:	bf00      	nop
 800206c:	20000000 	.word	0x20000000

08002070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002080:	4b0c      	ldr	r3, [pc, #48]	@ (80020b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800208c:	4013      	ands	r3, r2
 800208e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002098:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800209c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020a2:	4a04      	ldr	r2, [pc, #16]	@ (80020b4 <__NVIC_SetPriorityGrouping+0x44>)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	60d3      	str	r3, [r2, #12]
}
 80020a8:	bf00      	nop
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bc80      	pop	{r7}
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020bc:	4b04      	ldr	r3, [pc, #16]	@ (80020d0 <__NVIC_GetPriorityGrouping+0x18>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	f003 0307 	and.w	r3, r3, #7
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	6039      	str	r1, [r7, #0]
 80020de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	db0a      	blt.n	80020fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	490c      	ldr	r1, [pc, #48]	@ (8002120 <__NVIC_SetPriority+0x4c>)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	0112      	lsls	r2, r2, #4
 80020f4:	b2d2      	uxtb	r2, r2
 80020f6:	440b      	add	r3, r1
 80020f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020fc:	e00a      	b.n	8002114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	b2da      	uxtb	r2, r3
 8002102:	4908      	ldr	r1, [pc, #32]	@ (8002124 <__NVIC_SetPriority+0x50>)
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	3b04      	subs	r3, #4
 800210c:	0112      	lsls	r2, r2, #4
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	440b      	add	r3, r1
 8002112:	761a      	strb	r2, [r3, #24]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000e100 	.word	0xe000e100
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002128:	b480      	push	{r7}
 800212a:	b089      	sub	sp, #36	@ 0x24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f1c3 0307 	rsb	r3, r3, #7
 8002142:	2b04      	cmp	r3, #4
 8002144:	bf28      	it	cs
 8002146:	2304      	movcs	r3, #4
 8002148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3304      	adds	r3, #4
 800214e:	2b06      	cmp	r3, #6
 8002150:	d902      	bls.n	8002158 <NVIC_EncodePriority+0x30>
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3b03      	subs	r3, #3
 8002156:	e000      	b.n	800215a <NVIC_EncodePriority+0x32>
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	f04f 32ff 	mov.w	r2, #4294967295
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43da      	mvns	r2, r3
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	401a      	ands	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002170:	f04f 31ff 	mov.w	r1, #4294967295
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	fa01 f303 	lsl.w	r3, r1, r3
 800217a:	43d9      	mvns	r1, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002180:	4313      	orrs	r3, r2
         );
}
 8002182:	4618      	mov	r0, r3
 8002184:	3724      	adds	r7, #36	@ 0x24
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3b01      	subs	r3, #1
 8002198:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800219c:	d301      	bcc.n	80021a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800219e:	2301      	movs	r3, #1
 80021a0:	e00f      	b.n	80021c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021a2:	4a0a      	ldr	r2, [pc, #40]	@ (80021cc <SysTick_Config+0x40>)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021aa:	210f      	movs	r1, #15
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295
 80021b0:	f7ff ff90 	bl	80020d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b4:	4b05      	ldr	r3, [pc, #20]	@ (80021cc <SysTick_Config+0x40>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ba:	4b04      	ldr	r3, [pc, #16]	@ (80021cc <SysTick_Config+0x40>)
 80021bc:	2207      	movs	r2, #7
 80021be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	e000e010 	.word	0xe000e010

080021d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff ff49 	bl	8002070 <__NVIC_SetPriorityGrouping>
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b086      	sub	sp, #24
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	4603      	mov	r3, r0
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021f8:	f7ff ff5e 	bl	80020b8 <__NVIC_GetPriorityGrouping>
 80021fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	6978      	ldr	r0, [r7, #20]
 8002204:	f7ff ff90 	bl	8002128 <NVIC_EncodePriority>
 8002208:	4602      	mov	r2, r0
 800220a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800220e:	4611      	mov	r1, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff ff5f 	bl	80020d4 <__NVIC_SetPriority>
}
 8002216:	bf00      	nop
 8002218:	3718      	adds	r7, #24
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff ffb0 	bl	800218c <SysTick_Config>
 800222c:	4603      	mov	r3, r0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002238:	b480      	push	{r7}
 800223a:	b08b      	sub	sp, #44	@ 0x2c
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002242:	2300      	movs	r3, #0
 8002244:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002246:	2300      	movs	r3, #0
 8002248:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800224a:	e169      	b.n	8002520 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800224c:	2201      	movs	r2, #1
 800224e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	429a      	cmp	r2, r3
 8002266:	f040 8158 	bne.w	800251a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4a9a      	ldr	r2, [pc, #616]	@ (80024d8 <HAL_GPIO_Init+0x2a0>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d05e      	beq.n	8002332 <HAL_GPIO_Init+0xfa>
 8002274:	4a98      	ldr	r2, [pc, #608]	@ (80024d8 <HAL_GPIO_Init+0x2a0>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d875      	bhi.n	8002366 <HAL_GPIO_Init+0x12e>
 800227a:	4a98      	ldr	r2, [pc, #608]	@ (80024dc <HAL_GPIO_Init+0x2a4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d058      	beq.n	8002332 <HAL_GPIO_Init+0xfa>
 8002280:	4a96      	ldr	r2, [pc, #600]	@ (80024dc <HAL_GPIO_Init+0x2a4>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d86f      	bhi.n	8002366 <HAL_GPIO_Init+0x12e>
 8002286:	4a96      	ldr	r2, [pc, #600]	@ (80024e0 <HAL_GPIO_Init+0x2a8>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d052      	beq.n	8002332 <HAL_GPIO_Init+0xfa>
 800228c:	4a94      	ldr	r2, [pc, #592]	@ (80024e0 <HAL_GPIO_Init+0x2a8>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d869      	bhi.n	8002366 <HAL_GPIO_Init+0x12e>
 8002292:	4a94      	ldr	r2, [pc, #592]	@ (80024e4 <HAL_GPIO_Init+0x2ac>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d04c      	beq.n	8002332 <HAL_GPIO_Init+0xfa>
 8002298:	4a92      	ldr	r2, [pc, #584]	@ (80024e4 <HAL_GPIO_Init+0x2ac>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d863      	bhi.n	8002366 <HAL_GPIO_Init+0x12e>
 800229e:	4a92      	ldr	r2, [pc, #584]	@ (80024e8 <HAL_GPIO_Init+0x2b0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d046      	beq.n	8002332 <HAL_GPIO_Init+0xfa>
 80022a4:	4a90      	ldr	r2, [pc, #576]	@ (80024e8 <HAL_GPIO_Init+0x2b0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d85d      	bhi.n	8002366 <HAL_GPIO_Init+0x12e>
 80022aa:	2b12      	cmp	r3, #18
 80022ac:	d82a      	bhi.n	8002304 <HAL_GPIO_Init+0xcc>
 80022ae:	2b12      	cmp	r3, #18
 80022b0:	d859      	bhi.n	8002366 <HAL_GPIO_Init+0x12e>
 80022b2:	a201      	add	r2, pc, #4	@ (adr r2, 80022b8 <HAL_GPIO_Init+0x80>)
 80022b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b8:	08002333 	.word	0x08002333
 80022bc:	0800230d 	.word	0x0800230d
 80022c0:	0800231f 	.word	0x0800231f
 80022c4:	08002361 	.word	0x08002361
 80022c8:	08002367 	.word	0x08002367
 80022cc:	08002367 	.word	0x08002367
 80022d0:	08002367 	.word	0x08002367
 80022d4:	08002367 	.word	0x08002367
 80022d8:	08002367 	.word	0x08002367
 80022dc:	08002367 	.word	0x08002367
 80022e0:	08002367 	.word	0x08002367
 80022e4:	08002367 	.word	0x08002367
 80022e8:	08002367 	.word	0x08002367
 80022ec:	08002367 	.word	0x08002367
 80022f0:	08002367 	.word	0x08002367
 80022f4:	08002367 	.word	0x08002367
 80022f8:	08002367 	.word	0x08002367
 80022fc:	08002315 	.word	0x08002315
 8002300:	08002329 	.word	0x08002329
 8002304:	4a79      	ldr	r2, [pc, #484]	@ (80024ec <HAL_GPIO_Init+0x2b4>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d013      	beq.n	8002332 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800230a:	e02c      	b.n	8002366 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	623b      	str	r3, [r7, #32]
          break;
 8002312:	e029      	b.n	8002368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	3304      	adds	r3, #4
 800231a:	623b      	str	r3, [r7, #32]
          break;
 800231c:	e024      	b.n	8002368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	3308      	adds	r3, #8
 8002324:	623b      	str	r3, [r7, #32]
          break;
 8002326:	e01f      	b.n	8002368 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	330c      	adds	r3, #12
 800232e:	623b      	str	r3, [r7, #32]
          break;
 8002330:	e01a      	b.n	8002368 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d102      	bne.n	8002340 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800233a:	2304      	movs	r3, #4
 800233c:	623b      	str	r3, [r7, #32]
          break;
 800233e:	e013      	b.n	8002368 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d105      	bne.n	8002354 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002348:	2308      	movs	r3, #8
 800234a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	611a      	str	r2, [r3, #16]
          break;
 8002352:	e009      	b.n	8002368 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002354:	2308      	movs	r3, #8
 8002356:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69fa      	ldr	r2, [r7, #28]
 800235c:	615a      	str	r2, [r3, #20]
          break;
 800235e:	e003      	b.n	8002368 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002360:	2300      	movs	r3, #0
 8002362:	623b      	str	r3, [r7, #32]
          break;
 8002364:	e000      	b.n	8002368 <HAL_GPIO_Init+0x130>
          break;
 8002366:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	2bff      	cmp	r3, #255	@ 0xff
 800236c:	d801      	bhi.n	8002372 <HAL_GPIO_Init+0x13a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	e001      	b.n	8002376 <HAL_GPIO_Init+0x13e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3304      	adds	r3, #4
 8002376:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	2bff      	cmp	r3, #255	@ 0xff
 800237c:	d802      	bhi.n	8002384 <HAL_GPIO_Init+0x14c>
 800237e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	e002      	b.n	800238a <HAL_GPIO_Init+0x152>
 8002384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002386:	3b08      	subs	r3, #8
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	210f      	movs	r1, #15
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	fa01 f303 	lsl.w	r3, r1, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	401a      	ands	r2, r3
 800239c:	6a39      	ldr	r1, [r7, #32]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	fa01 f303 	lsl.w	r3, r1, r3
 80023a4:	431a      	orrs	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 80b1 	beq.w	800251a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023b8:	4b4d      	ldr	r3, [pc, #308]	@ (80024f0 <HAL_GPIO_Init+0x2b8>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	4a4c      	ldr	r2, [pc, #304]	@ (80024f0 <HAL_GPIO_Init+0x2b8>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	6193      	str	r3, [r2, #24]
 80023c4:	4b4a      	ldr	r3, [pc, #296]	@ (80024f0 <HAL_GPIO_Init+0x2b8>)
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023d0:	4a48      	ldr	r2, [pc, #288]	@ (80024f4 <HAL_GPIO_Init+0x2bc>)
 80023d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d4:	089b      	lsrs	r3, r3, #2
 80023d6:	3302      	adds	r3, #2
 80023d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e0:	f003 0303 	and.w	r3, r3, #3
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	220f      	movs	r2, #15
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4013      	ands	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a40      	ldr	r2, [pc, #256]	@ (80024f8 <HAL_GPIO_Init+0x2c0>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d013      	beq.n	8002424 <HAL_GPIO_Init+0x1ec>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a3f      	ldr	r2, [pc, #252]	@ (80024fc <HAL_GPIO_Init+0x2c4>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d00d      	beq.n	8002420 <HAL_GPIO_Init+0x1e8>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a3e      	ldr	r2, [pc, #248]	@ (8002500 <HAL_GPIO_Init+0x2c8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d007      	beq.n	800241c <HAL_GPIO_Init+0x1e4>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a3d      	ldr	r2, [pc, #244]	@ (8002504 <HAL_GPIO_Init+0x2cc>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d101      	bne.n	8002418 <HAL_GPIO_Init+0x1e0>
 8002414:	2303      	movs	r3, #3
 8002416:	e006      	b.n	8002426 <HAL_GPIO_Init+0x1ee>
 8002418:	2304      	movs	r3, #4
 800241a:	e004      	b.n	8002426 <HAL_GPIO_Init+0x1ee>
 800241c:	2302      	movs	r3, #2
 800241e:	e002      	b.n	8002426 <HAL_GPIO_Init+0x1ee>
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <HAL_GPIO_Init+0x1ee>
 8002424:	2300      	movs	r3, #0
 8002426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002428:	f002 0203 	and.w	r2, r2, #3
 800242c:	0092      	lsls	r2, r2, #2
 800242e:	4093      	lsls	r3, r2
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	4313      	orrs	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002436:	492f      	ldr	r1, [pc, #188]	@ (80024f4 <HAL_GPIO_Init+0x2bc>)
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	089b      	lsrs	r3, r3, #2
 800243c:	3302      	adds	r3, #2
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d006      	beq.n	800245e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002450:	4b2d      	ldr	r3, [pc, #180]	@ (8002508 <HAL_GPIO_Init+0x2d0>)
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	492c      	ldr	r1, [pc, #176]	@ (8002508 <HAL_GPIO_Init+0x2d0>)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	608b      	str	r3, [r1, #8]
 800245c:	e006      	b.n	800246c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800245e:	4b2a      	ldr	r3, [pc, #168]	@ (8002508 <HAL_GPIO_Init+0x2d0>)
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	43db      	mvns	r3, r3
 8002466:	4928      	ldr	r1, [pc, #160]	@ (8002508 <HAL_GPIO_Init+0x2d0>)
 8002468:	4013      	ands	r3, r2
 800246a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d006      	beq.n	8002486 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002478:	4b23      	ldr	r3, [pc, #140]	@ (8002508 <HAL_GPIO_Init+0x2d0>)
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	4922      	ldr	r1, [pc, #136]	@ (8002508 <HAL_GPIO_Init+0x2d0>)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	60cb      	str	r3, [r1, #12]
 8002484:	e006      	b.n	8002494 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002486:	4b20      	ldr	r3, [pc, #128]	@ (8002508 <HAL_GPIO_Init+0x2d0>)
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	43db      	mvns	r3, r3
 800248e:	491e      	ldr	r1, [pc, #120]	@ (8002508 <HAL_GPIO_Init+0x2d0>)
 8002490:	4013      	ands	r3, r2
 8002492:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d006      	beq.n	80024ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024a0:	4b19      	ldr	r3, [pc, #100]	@ (8002508 <HAL_GPIO_Init+0x2d0>)
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	4918      	ldr	r1, [pc, #96]	@ (8002508 <HAL_GPIO_Init+0x2d0>)
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]
 80024ac:	e006      	b.n	80024bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024ae:	4b16      	ldr	r3, [pc, #88]	@ (8002508 <HAL_GPIO_Init+0x2d0>)
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	4914      	ldr	r1, [pc, #80]	@ (8002508 <HAL_GPIO_Init+0x2d0>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d021      	beq.n	800250c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002508 <HAL_GPIO_Init+0x2d0>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	490e      	ldr	r1, [pc, #56]	@ (8002508 <HAL_GPIO_Init+0x2d0>)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	600b      	str	r3, [r1, #0]
 80024d4:	e021      	b.n	800251a <HAL_GPIO_Init+0x2e2>
 80024d6:	bf00      	nop
 80024d8:	10320000 	.word	0x10320000
 80024dc:	10310000 	.word	0x10310000
 80024e0:	10220000 	.word	0x10220000
 80024e4:	10210000 	.word	0x10210000
 80024e8:	10120000 	.word	0x10120000
 80024ec:	10110000 	.word	0x10110000
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40010000 	.word	0x40010000
 80024f8:	40010800 	.word	0x40010800
 80024fc:	40010c00 	.word	0x40010c00
 8002500:	40011000 	.word	0x40011000
 8002504:	40011400 	.word	0x40011400
 8002508:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800250c:	4b0b      	ldr	r3, [pc, #44]	@ (800253c <HAL_GPIO_Init+0x304>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	43db      	mvns	r3, r3
 8002514:	4909      	ldr	r1, [pc, #36]	@ (800253c <HAL_GPIO_Init+0x304>)
 8002516:	4013      	ands	r3, r2
 8002518:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800251a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251c:	3301      	adds	r3, #1
 800251e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002526:	fa22 f303 	lsr.w	r3, r2, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	f47f ae8e 	bne.w	800224c <HAL_GPIO_Init+0x14>
  }
}
 8002530:	bf00      	nop
 8002532:	bf00      	nop
 8002534:	372c      	adds	r7, #44	@ 0x2c
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr
 800253c:	40010400 	.word	0x40010400

08002540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	807b      	strh	r3, [r7, #2]
 800254c:	4613      	mov	r3, r2
 800254e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002550:	787b      	ldrb	r3, [r7, #1]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002556:	887a      	ldrh	r2, [r7, #2]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800255c:	e003      	b.n	8002566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800255e:	887b      	ldrh	r3, [r7, #2]
 8002560:	041a      	lsls	r2, r3, #16
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	611a      	str	r2, [r3, #16]
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e12b      	b.n	80027da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d106      	bne.n	800259c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7fe fe86 	bl	80012a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2224      	movs	r2, #36	@ 0x24
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0201 	bic.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025d4:	f001 f832 	bl	800363c <HAL_RCC_GetPCLK1Freq>
 80025d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	4a81      	ldr	r2, [pc, #516]	@ (80027e4 <HAL_I2C_Init+0x274>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d807      	bhi.n	80025f4 <HAL_I2C_Init+0x84>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4a80      	ldr	r2, [pc, #512]	@ (80027e8 <HAL_I2C_Init+0x278>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	bf94      	ite	ls
 80025ec:	2301      	movls	r3, #1
 80025ee:	2300      	movhi	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	e006      	b.n	8002602 <HAL_I2C_Init+0x92>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4a7d      	ldr	r2, [pc, #500]	@ (80027ec <HAL_I2C_Init+0x27c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	bf94      	ite	ls
 80025fc:	2301      	movls	r3, #1
 80025fe:	2300      	movhi	r3, #0
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e0e7      	b.n	80027da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4a78      	ldr	r2, [pc, #480]	@ (80027f0 <HAL_I2C_Init+0x280>)
 800260e:	fba2 2303 	umull	r2, r3, r2, r3
 8002612:	0c9b      	lsrs	r3, r3, #18
 8002614:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	430a      	orrs	r2, r1
 8002628:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	4a6a      	ldr	r2, [pc, #424]	@ (80027e4 <HAL_I2C_Init+0x274>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d802      	bhi.n	8002644 <HAL_I2C_Init+0xd4>
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	3301      	adds	r3, #1
 8002642:	e009      	b.n	8002658 <HAL_I2C_Init+0xe8>
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800264a:	fb02 f303 	mul.w	r3, r2, r3
 800264e:	4a69      	ldr	r2, [pc, #420]	@ (80027f4 <HAL_I2C_Init+0x284>)
 8002650:	fba2 2303 	umull	r2, r3, r2, r3
 8002654:	099b      	lsrs	r3, r3, #6
 8002656:	3301      	adds	r3, #1
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	430b      	orrs	r3, r1
 800265e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800266a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	495c      	ldr	r1, [pc, #368]	@ (80027e4 <HAL_I2C_Init+0x274>)
 8002674:	428b      	cmp	r3, r1
 8002676:	d819      	bhi.n	80026ac <HAL_I2C_Init+0x13c>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	1e59      	subs	r1, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	fbb1 f3f3 	udiv	r3, r1, r3
 8002686:	1c59      	adds	r1, r3, #1
 8002688:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800268c:	400b      	ands	r3, r1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00a      	beq.n	80026a8 <HAL_I2C_Init+0x138>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1e59      	subs	r1, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	fbb1 f3f3 	udiv	r3, r1, r3
 80026a0:	3301      	adds	r3, #1
 80026a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a6:	e051      	b.n	800274c <HAL_I2C_Init+0x1dc>
 80026a8:	2304      	movs	r3, #4
 80026aa:	e04f      	b.n	800274c <HAL_I2C_Init+0x1dc>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d111      	bne.n	80026d8 <HAL_I2C_Init+0x168>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1e58      	subs	r0, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	440b      	add	r3, r1
 80026c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c6:	3301      	adds	r3, #1
 80026c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bf0c      	ite	eq
 80026d0:	2301      	moveq	r3, #1
 80026d2:	2300      	movne	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	e012      	b.n	80026fe <HAL_I2C_Init+0x18e>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	1e58      	subs	r0, r3, #1
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6859      	ldr	r1, [r3, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	0099      	lsls	r1, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ee:	3301      	adds	r3, #1
 80026f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	bf0c      	ite	eq
 80026f8:	2301      	moveq	r3, #1
 80026fa:	2300      	movne	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_I2C_Init+0x196>
 8002702:	2301      	movs	r3, #1
 8002704:	e022      	b.n	800274c <HAL_I2C_Init+0x1dc>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10e      	bne.n	800272c <HAL_I2C_Init+0x1bc>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1e58      	subs	r0, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6859      	ldr	r1, [r3, #4]
 8002716:	460b      	mov	r3, r1
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	440b      	add	r3, r1
 800271c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002720:	3301      	adds	r3, #1
 8002722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002726:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800272a:	e00f      	b.n	800274c <HAL_I2C_Init+0x1dc>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	1e58      	subs	r0, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6859      	ldr	r1, [r3, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	0099      	lsls	r1, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002742:	3301      	adds	r3, #1
 8002744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002748:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	6809      	ldr	r1, [r1, #0]
 8002750:	4313      	orrs	r3, r2
 8002752:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69da      	ldr	r2, [r3, #28]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800277a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6911      	ldr	r1, [r2, #16]
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	68d2      	ldr	r2, [r2, #12]
 8002786:	4311      	orrs	r1, r2
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	430b      	orrs	r3, r1
 800278e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2220      	movs	r2, #32
 80027c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	000186a0 	.word	0x000186a0
 80027e8:	001e847f 	.word	0x001e847f
 80027ec:	003d08ff 	.word	0x003d08ff
 80027f0:	431bde83 	.word	0x431bde83
 80027f4:	10624dd3 	.word	0x10624dd3

080027f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b088      	sub	sp, #32
 80027fc:	af02      	add	r7, sp, #8
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	607a      	str	r2, [r7, #4]
 8002802:	461a      	mov	r2, r3
 8002804:	460b      	mov	r3, r1
 8002806:	817b      	strh	r3, [r7, #10]
 8002808:	4613      	mov	r3, r2
 800280a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800280c:	f7fe fefc 	bl	8001608 <HAL_GetTick>
 8002810:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b20      	cmp	r3, #32
 800281c:	f040 80e0 	bne.w	80029e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	2319      	movs	r3, #25
 8002826:	2201      	movs	r2, #1
 8002828:	4970      	ldr	r1, [pc, #448]	@ (80029ec <HAL_I2C_Master_Transmit+0x1f4>)
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 f964 	bl	8002af8 <I2C_WaitOnFlagUntilTimeout>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002836:	2302      	movs	r3, #2
 8002838:	e0d3      	b.n	80029e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_I2C_Master_Transmit+0x50>
 8002844:	2302      	movs	r3, #2
 8002846:	e0cc      	b.n	80029e2 <HAL_I2C_Master_Transmit+0x1ea>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b01      	cmp	r3, #1
 800285c:	d007      	beq.n	800286e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f042 0201 	orr.w	r2, r2, #1
 800286c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800287c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2221      	movs	r2, #33	@ 0x21
 8002882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2210      	movs	r2, #16
 800288a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	893a      	ldrh	r2, [r7, #8]
 800289e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4a50      	ldr	r2, [pc, #320]	@ (80029f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80028ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028b0:	8979      	ldrh	r1, [r7, #10]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	6a3a      	ldr	r2, [r7, #32]
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 f89c 	bl	80029f4 <I2C_MasterRequestWrite>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e08d      	b.n	80029e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c6:	2300      	movs	r3, #0
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80028dc:	e066      	b.n	80029ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	6a39      	ldr	r1, [r7, #32]
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 fa22 	bl	8002d2c <I2C_WaitOnTXEFlagUntilTimeout>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00d      	beq.n	800290a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d107      	bne.n	8002906 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002904:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e06b      	b.n	80029e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290e:	781a      	ldrb	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002932:	3b01      	subs	r3, #1
 8002934:	b29a      	uxth	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b04      	cmp	r3, #4
 8002946:	d11b      	bne.n	8002980 <HAL_I2C_Master_Transmit+0x188>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294c:	2b00      	cmp	r3, #0
 800294e:	d017      	beq.n	8002980 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002954:	781a      	ldrb	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800296a:	b29b      	uxth	r3, r3
 800296c:	3b01      	subs	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	6a39      	ldr	r1, [r7, #32]
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 fa19 	bl	8002dbc <I2C_WaitOnBTFFlagUntilTimeout>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00d      	beq.n	80029ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002994:	2b04      	cmp	r3, #4
 8002996:	d107      	bne.n	80029a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e01a      	b.n	80029e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d194      	bne.n	80028de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029dc:	2300      	movs	r3, #0
 80029de:	e000      	b.n	80029e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80029e0:	2302      	movs	r3, #2
  }
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	00100002 	.word	0x00100002
 80029f0:	ffff0000 	.word	0xffff0000

080029f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af02      	add	r7, sp, #8
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	607a      	str	r2, [r7, #4]
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	460b      	mov	r3, r1
 8002a02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a08:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d006      	beq.n	8002a1e <I2C_MasterRequestWrite+0x2a>
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d003      	beq.n	8002a1e <I2C_MasterRequestWrite+0x2a>
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a1c:	d108      	bne.n	8002a30 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	e00b      	b.n	8002a48 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a34:	2b12      	cmp	r3, #18
 8002a36:	d107      	bne.n	8002a48 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 f84f 	bl	8002af8 <I2C_WaitOnFlagUntilTimeout>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00d      	beq.n	8002a7c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a6e:	d103      	bne.n	8002a78 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a76:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e035      	b.n	8002ae8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a84:	d108      	bne.n	8002a98 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a86:	897b      	ldrh	r3, [r7, #10]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a94:	611a      	str	r2, [r3, #16]
 8002a96:	e01b      	b.n	8002ad0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a98:	897b      	ldrh	r3, [r7, #10]
 8002a9a:	11db      	asrs	r3, r3, #7
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	f003 0306 	and.w	r3, r3, #6
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f063 030f 	orn	r3, r3, #15
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	490e      	ldr	r1, [pc, #56]	@ (8002af0 <I2C_MasterRequestWrite+0xfc>)
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 f898 	bl	8002bec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e010      	b.n	8002ae8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ac6:	897b      	ldrh	r3, [r7, #10]
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	4907      	ldr	r1, [pc, #28]	@ (8002af4 <I2C_MasterRequestWrite+0x100>)
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 f888 	bl	8002bec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e000      	b.n	8002ae8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	00010008 	.word	0x00010008
 8002af4:	00010002 	.word	0x00010002

08002af8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	603b      	str	r3, [r7, #0]
 8002b04:	4613      	mov	r3, r2
 8002b06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b08:	e048      	b.n	8002b9c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b10:	d044      	beq.n	8002b9c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b12:	f7fe fd79 	bl	8001608 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d302      	bcc.n	8002b28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d139      	bne.n	8002b9c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	0c1b      	lsrs	r3, r3, #16
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d10d      	bne.n	8002b4e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	43da      	mvns	r2, r3
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	bf0c      	ite	eq
 8002b44:	2301      	moveq	r3, #1
 8002b46:	2300      	movne	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	e00c      	b.n	8002b68 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	43da      	mvns	r2, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	bf0c      	ite	eq
 8002b60:	2301      	moveq	r3, #1
 8002b62:	2300      	movne	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d116      	bne.n	8002b9c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b88:	f043 0220 	orr.w	r2, r3, #32
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e023      	b.n	8002be4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	0c1b      	lsrs	r3, r3, #16
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d10d      	bne.n	8002bc2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	43da      	mvns	r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	bf0c      	ite	eq
 8002bb8:	2301      	moveq	r3, #1
 8002bba:	2300      	movne	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	e00c      	b.n	8002bdc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	43da      	mvns	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bf0c      	ite	eq
 8002bd4:	2301      	moveq	r3, #1
 8002bd6:	2300      	movne	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	461a      	mov	r2, r3
 8002bdc:	79fb      	ldrb	r3, [r7, #7]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d093      	beq.n	8002b0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bfa:	e071      	b.n	8002ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c0a:	d123      	bne.n	8002c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c1a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c40:	f043 0204 	orr.w	r2, r3, #4
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e067      	b.n	8002d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5a:	d041      	beq.n	8002ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c5c:	f7fe fcd4 	bl	8001608 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d302      	bcc.n	8002c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d136      	bne.n	8002ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	0c1b      	lsrs	r3, r3, #16
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d10c      	bne.n	8002c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	43da      	mvns	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4013      	ands	r3, r2
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	bf14      	ite	ne
 8002c8e:	2301      	movne	r3, #1
 8002c90:	2300      	moveq	r3, #0
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	e00b      	b.n	8002cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	43da      	mvns	r2, r3
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	bf14      	ite	ne
 8002ca8:	2301      	movne	r3, #1
 8002caa:	2300      	moveq	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d016      	beq.n	8002ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ccc:	f043 0220 	orr.w	r2, r3, #32
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e021      	b.n	8002d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	0c1b      	lsrs	r3, r3, #16
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d10c      	bne.n	8002d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	43da      	mvns	r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	bf14      	ite	ne
 8002cfc:	2301      	movne	r3, #1
 8002cfe:	2300      	moveq	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	e00b      	b.n	8002d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	43da      	mvns	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	bf14      	ite	ne
 8002d16:	2301      	movne	r3, #1
 8002d18:	2300      	moveq	r3, #0
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f47f af6d 	bne.w	8002bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d38:	e034      	b.n	8002da4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f886 	bl	8002e4c <I2C_IsAcknowledgeFailed>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e034      	b.n	8002db4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d50:	d028      	beq.n	8002da4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d52:	f7fe fc59 	bl	8001608 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d302      	bcc.n	8002d68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d11d      	bne.n	8002da4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d72:	2b80      	cmp	r3, #128	@ 0x80
 8002d74:	d016      	beq.n	8002da4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d90:	f043 0220 	orr.w	r2, r3, #32
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e007      	b.n	8002db4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dae:	2b80      	cmp	r3, #128	@ 0x80
 8002db0:	d1c3      	bne.n	8002d3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dc8:	e034      	b.n	8002e34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 f83e 	bl	8002e4c <I2C_IsAcknowledgeFailed>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e034      	b.n	8002e44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de0:	d028      	beq.n	8002e34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de2:	f7fe fc11 	bl	8001608 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d302      	bcc.n	8002df8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d11d      	bne.n	8002e34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d016      	beq.n	8002e34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e20:	f043 0220 	orr.w	r2, r3, #32
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e007      	b.n	8002e44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d1c3      	bne.n	8002dca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e62:	d11b      	bne.n	8002e9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e88:	f043 0204 	orr.w	r2, r3, #4
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e272      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 8087 	beq.w	8002fd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ec8:	4b92      	ldr	r3, [pc, #584]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 030c 	and.w	r3, r3, #12
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d00c      	beq.n	8002eee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ed4:	4b8f      	ldr	r3, [pc, #572]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 030c 	and.w	r3, r3, #12
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d112      	bne.n	8002f06 <HAL_RCC_OscConfig+0x5e>
 8002ee0:	4b8c      	ldr	r3, [pc, #560]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002eec:	d10b      	bne.n	8002f06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eee:	4b89      	ldr	r3, [pc, #548]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d06c      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x12c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d168      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e24c      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f0e:	d106      	bne.n	8002f1e <HAL_RCC_OscConfig+0x76>
 8002f10:	4b80      	ldr	r3, [pc, #512]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a7f      	ldr	r2, [pc, #508]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f1a:	6013      	str	r3, [r2, #0]
 8002f1c:	e02e      	b.n	8002f7c <HAL_RCC_OscConfig+0xd4>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCC_OscConfig+0x98>
 8002f26:	4b7b      	ldr	r3, [pc, #492]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a7a      	ldr	r2, [pc, #488]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b78      	ldr	r3, [pc, #480]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a77      	ldr	r2, [pc, #476]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e01d      	b.n	8002f7c <HAL_RCC_OscConfig+0xd4>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCC_OscConfig+0xbc>
 8002f4a:	4b72      	ldr	r3, [pc, #456]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a71      	ldr	r2, [pc, #452]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	4b6f      	ldr	r3, [pc, #444]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a6e      	ldr	r2, [pc, #440]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e00b      	b.n	8002f7c <HAL_RCC_OscConfig+0xd4>
 8002f64:	4b6b      	ldr	r3, [pc, #428]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a6a      	ldr	r2, [pc, #424]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	4b68      	ldr	r3, [pc, #416]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a67      	ldr	r2, [pc, #412]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002f76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d013      	beq.n	8002fac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f84:	f7fe fb40 	bl	8001608 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7fe fb3c 	bl	8001608 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	@ 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e200      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9e:	4b5d      	ldr	r3, [pc, #372]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0xe4>
 8002faa:	e014      	b.n	8002fd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7fe fb2c 	bl	8001608 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb4:	f7fe fb28 	bl	8001608 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b64      	cmp	r3, #100	@ 0x64
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e1ec      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc6:	4b53      	ldr	r3, [pc, #332]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x10c>
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d063      	beq.n	80030aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fe2:	4b4c      	ldr	r3, [pc, #304]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00b      	beq.n	8003006 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fee:	4b49      	ldr	r3, [pc, #292]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d11c      	bne.n	8003034 <HAL_RCC_OscConfig+0x18c>
 8002ffa:	4b46      	ldr	r3, [pc, #280]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d116      	bne.n	8003034 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003006:	4b43      	ldr	r3, [pc, #268]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d005      	beq.n	800301e <HAL_RCC_OscConfig+0x176>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d001      	beq.n	800301e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e1c0      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301e:	4b3d      	ldr	r3, [pc, #244]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4939      	ldr	r1, [pc, #228]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003032:	e03a      	b.n	80030aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d020      	beq.n	800307e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800303c:	4b36      	ldr	r3, [pc, #216]	@ (8003118 <HAL_RCC_OscConfig+0x270>)
 800303e:	2201      	movs	r2, #1
 8003040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003042:	f7fe fae1 	bl	8001608 <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800304a:	f7fe fadd 	bl	8001608 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e1a1      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305c:	4b2d      	ldr	r3, [pc, #180]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0f0      	beq.n	800304a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003068:	4b2a      	ldr	r3, [pc, #168]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4927      	ldr	r1, [pc, #156]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 8003078:	4313      	orrs	r3, r2
 800307a:	600b      	str	r3, [r1, #0]
 800307c:	e015      	b.n	80030aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800307e:	4b26      	ldr	r3, [pc, #152]	@ (8003118 <HAL_RCC_OscConfig+0x270>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7fe fac0 	bl	8001608 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800308c:	f7fe fabc 	bl	8001608 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e180      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309e:	4b1d      	ldr	r3, [pc, #116]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d03a      	beq.n	800312c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d019      	beq.n	80030f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030be:	4b17      	ldr	r3, [pc, #92]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 80030c0:	2201      	movs	r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c4:	f7fe faa0 	bl	8001608 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030cc:	f7fe fa9c 	bl	8001608 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e160      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030de:	4b0d      	ldr	r3, [pc, #52]	@ (8003114 <HAL_RCC_OscConfig+0x26c>)
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f0      	beq.n	80030cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030ea:	2001      	movs	r0, #1
 80030ec:	f000 face 	bl	800368c <RCC_Delay>
 80030f0:	e01c      	b.n	800312c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f2:	4b0a      	ldr	r3, [pc, #40]	@ (800311c <HAL_RCC_OscConfig+0x274>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f8:	f7fe fa86 	bl	8001608 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030fe:	e00f      	b.n	8003120 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003100:	f7fe fa82 	bl	8001608 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d908      	bls.n	8003120 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e146      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000
 8003118:	42420000 	.word	0x42420000
 800311c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003120:	4b92      	ldr	r3, [pc, #584]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1e9      	bne.n	8003100 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 80a6 	beq.w	8003286 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800313a:	2300      	movs	r3, #0
 800313c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313e:	4b8b      	ldr	r3, [pc, #556]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10d      	bne.n	8003166 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800314a:	4b88      	ldr	r3, [pc, #544]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	4a87      	ldr	r2, [pc, #540]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003150:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003154:	61d3      	str	r3, [r2, #28]
 8003156:	4b85      	ldr	r3, [pc, #532]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315e:	60bb      	str	r3, [r7, #8]
 8003160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003162:	2301      	movs	r3, #1
 8003164:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003166:	4b82      	ldr	r3, [pc, #520]	@ (8003370 <HAL_RCC_OscConfig+0x4c8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316e:	2b00      	cmp	r3, #0
 8003170:	d118      	bne.n	80031a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003172:	4b7f      	ldr	r3, [pc, #508]	@ (8003370 <HAL_RCC_OscConfig+0x4c8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a7e      	ldr	r2, [pc, #504]	@ (8003370 <HAL_RCC_OscConfig+0x4c8>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800317c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317e:	f7fe fa43 	bl	8001608 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003186:	f7fe fa3f 	bl	8001608 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b64      	cmp	r3, #100	@ 0x64
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e103      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003198:	4b75      	ldr	r3, [pc, #468]	@ (8003370 <HAL_RCC_OscConfig+0x4c8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d106      	bne.n	80031ba <HAL_RCC_OscConfig+0x312>
 80031ac:	4b6f      	ldr	r3, [pc, #444]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4a6e      	ldr	r2, [pc, #440]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031b2:	f043 0301 	orr.w	r3, r3, #1
 80031b6:	6213      	str	r3, [r2, #32]
 80031b8:	e02d      	b.n	8003216 <HAL_RCC_OscConfig+0x36e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10c      	bne.n	80031dc <HAL_RCC_OscConfig+0x334>
 80031c2:	4b6a      	ldr	r3, [pc, #424]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	4a69      	ldr	r2, [pc, #420]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031c8:	f023 0301 	bic.w	r3, r3, #1
 80031cc:	6213      	str	r3, [r2, #32]
 80031ce:	4b67      	ldr	r3, [pc, #412]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	4a66      	ldr	r2, [pc, #408]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031d4:	f023 0304 	bic.w	r3, r3, #4
 80031d8:	6213      	str	r3, [r2, #32]
 80031da:	e01c      	b.n	8003216 <HAL_RCC_OscConfig+0x36e>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	2b05      	cmp	r3, #5
 80031e2:	d10c      	bne.n	80031fe <HAL_RCC_OscConfig+0x356>
 80031e4:	4b61      	ldr	r3, [pc, #388]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	4a60      	ldr	r2, [pc, #384]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031ea:	f043 0304 	orr.w	r3, r3, #4
 80031ee:	6213      	str	r3, [r2, #32]
 80031f0:	4b5e      	ldr	r3, [pc, #376]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	4a5d      	ldr	r2, [pc, #372]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6213      	str	r3, [r2, #32]
 80031fc:	e00b      	b.n	8003216 <HAL_RCC_OscConfig+0x36e>
 80031fe:	4b5b      	ldr	r3, [pc, #364]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	4a5a      	ldr	r2, [pc, #360]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003204:	f023 0301 	bic.w	r3, r3, #1
 8003208:	6213      	str	r3, [r2, #32]
 800320a:	4b58      	ldr	r3, [pc, #352]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	4a57      	ldr	r2, [pc, #348]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003210:	f023 0304 	bic.w	r3, r3, #4
 8003214:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d015      	beq.n	800324a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321e:	f7fe f9f3 	bl	8001608 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003224:	e00a      	b.n	800323c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003226:	f7fe f9ef 	bl	8001608 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003234:	4293      	cmp	r3, r2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e0b1      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323c:	4b4b      	ldr	r3, [pc, #300]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0ee      	beq.n	8003226 <HAL_RCC_OscConfig+0x37e>
 8003248:	e014      	b.n	8003274 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324a:	f7fe f9dd 	bl	8001608 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003250:	e00a      	b.n	8003268 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003252:	f7fe f9d9 	bl	8001608 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003260:	4293      	cmp	r3, r2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e09b      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003268:	4b40      	ldr	r3, [pc, #256]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1ee      	bne.n	8003252 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003274:	7dfb      	ldrb	r3, [r7, #23]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d105      	bne.n	8003286 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800327a:	4b3c      	ldr	r3, [pc, #240]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	4a3b      	ldr	r2, [pc, #236]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003280:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003284:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 8087 	beq.w	800339e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003290:	4b36      	ldr	r3, [pc, #216]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 030c 	and.w	r3, r3, #12
 8003298:	2b08      	cmp	r3, #8
 800329a:	d061      	beq.n	8003360 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d146      	bne.n	8003332 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a4:	4b33      	ldr	r3, [pc, #204]	@ (8003374 <HAL_RCC_OscConfig+0x4cc>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032aa:	f7fe f9ad 	bl	8001608 <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b2:	f7fe f9a9 	bl	8001608 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e06d      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c4:	4b29      	ldr	r3, [pc, #164]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f0      	bne.n	80032b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032d8:	d108      	bne.n	80032ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032da:	4b24      	ldr	r3, [pc, #144]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	4921      	ldr	r1, [pc, #132]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032ec:	4b1f      	ldr	r3, [pc, #124]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a19      	ldr	r1, [r3, #32]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fc:	430b      	orrs	r3, r1
 80032fe:	491b      	ldr	r1, [pc, #108]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003300:	4313      	orrs	r3, r2
 8003302:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003304:	4b1b      	ldr	r3, [pc, #108]	@ (8003374 <HAL_RCC_OscConfig+0x4cc>)
 8003306:	2201      	movs	r2, #1
 8003308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330a:	f7fe f97d 	bl	8001608 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003312:	f7fe f979 	bl	8001608 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e03d      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003324:	4b11      	ldr	r3, [pc, #68]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCC_OscConfig+0x46a>
 8003330:	e035      	b.n	800339e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003332:	4b10      	ldr	r3, [pc, #64]	@ (8003374 <HAL_RCC_OscConfig+0x4cc>)
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fe f966 	bl	8001608 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003340:	f7fe f962 	bl	8001608 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e026      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003352:	4b06      	ldr	r3, [pc, #24]	@ (800336c <HAL_RCC_OscConfig+0x4c4>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x498>
 800335e:	e01e      	b.n	800339e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d107      	bne.n	8003378 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e019      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
 800336c:	40021000 	.word	0x40021000
 8003370:	40007000 	.word	0x40007000
 8003374:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003378:	4b0b      	ldr	r3, [pc, #44]	@ (80033a8 <HAL_RCC_OscConfig+0x500>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	429a      	cmp	r2, r3
 800338a:	d106      	bne.n	800339a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003396:	429a      	cmp	r2, r3
 8003398:	d001      	beq.n	800339e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40021000 	.word	0x40021000

080033ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0d0      	b.n	8003562 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033c0:	4b6a      	ldr	r3, [pc, #424]	@ (800356c <HAL_RCC_ClockConfig+0x1c0>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d910      	bls.n	80033f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ce:	4b67      	ldr	r3, [pc, #412]	@ (800356c <HAL_RCC_ClockConfig+0x1c0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f023 0207 	bic.w	r2, r3, #7
 80033d6:	4965      	ldr	r1, [pc, #404]	@ (800356c <HAL_RCC_ClockConfig+0x1c0>)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	4313      	orrs	r3, r2
 80033dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033de:	4b63      	ldr	r3, [pc, #396]	@ (800356c <HAL_RCC_ClockConfig+0x1c0>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d001      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e0b8      	b.n	8003562 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d020      	beq.n	800343e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003408:	4b59      	ldr	r3, [pc, #356]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	4a58      	ldr	r2, [pc, #352]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800340e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003412:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003420:	4b53      	ldr	r3, [pc, #332]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4a52      	ldr	r2, [pc, #328]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 8003426:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800342a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800342c:	4b50      	ldr	r3, [pc, #320]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	494d      	ldr	r1, [pc, #308]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800343a:	4313      	orrs	r3, r2
 800343c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d040      	beq.n	80034cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d107      	bne.n	8003462 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003452:	4b47      	ldr	r3, [pc, #284]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d115      	bne.n	800348a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e07f      	b.n	8003562 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d107      	bne.n	800347a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800346a:	4b41      	ldr	r3, [pc, #260]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d109      	bne.n	800348a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e073      	b.n	8003562 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347a:	4b3d      	ldr	r3, [pc, #244]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e06b      	b.n	8003562 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800348a:	4b39      	ldr	r3, [pc, #228]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f023 0203 	bic.w	r2, r3, #3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	4936      	ldr	r1, [pc, #216]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 8003498:	4313      	orrs	r3, r2
 800349a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800349c:	f7fe f8b4 	bl	8001608 <HAL_GetTick>
 80034a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a2:	e00a      	b.n	80034ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a4:	f7fe f8b0 	bl	8001608 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e053      	b.n	8003562 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 020c 	and.w	r2, r3, #12
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d1eb      	bne.n	80034a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034cc:	4b27      	ldr	r3, [pc, #156]	@ (800356c <HAL_RCC_ClockConfig+0x1c0>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d210      	bcs.n	80034fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034da:	4b24      	ldr	r3, [pc, #144]	@ (800356c <HAL_RCC_ClockConfig+0x1c0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f023 0207 	bic.w	r2, r3, #7
 80034e2:	4922      	ldr	r1, [pc, #136]	@ (800356c <HAL_RCC_ClockConfig+0x1c0>)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ea:	4b20      	ldr	r3, [pc, #128]	@ (800356c <HAL_RCC_ClockConfig+0x1c0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d001      	beq.n	80034fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e032      	b.n	8003562 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d008      	beq.n	800351a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003508:	4b19      	ldr	r3, [pc, #100]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	4916      	ldr	r1, [pc, #88]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 8003516:	4313      	orrs	r3, r2
 8003518:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	2b00      	cmp	r3, #0
 8003524:	d009      	beq.n	800353a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003526:	4b12      	ldr	r3, [pc, #72]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	490e      	ldr	r1, [pc, #56]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 8003536:	4313      	orrs	r3, r2
 8003538:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800353a:	f000 f821 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 800353e:	4602      	mov	r2, r0
 8003540:	4b0b      	ldr	r3, [pc, #44]	@ (8003570 <HAL_RCC_ClockConfig+0x1c4>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	091b      	lsrs	r3, r3, #4
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	490a      	ldr	r1, [pc, #40]	@ (8003574 <HAL_RCC_ClockConfig+0x1c8>)
 800354c:	5ccb      	ldrb	r3, [r1, r3]
 800354e:	fa22 f303 	lsr.w	r3, r2, r3
 8003552:	4a09      	ldr	r2, [pc, #36]	@ (8003578 <HAL_RCC_ClockConfig+0x1cc>)
 8003554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003556:	4b09      	ldr	r3, [pc, #36]	@ (800357c <HAL_RCC_ClockConfig+0x1d0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7fe f812 	bl	8001584 <HAL_InitTick>

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40022000 	.word	0x40022000
 8003570:	40021000 	.word	0x40021000
 8003574:	080074b4 	.word	0x080074b4
 8003578:	20000000 	.word	0x20000000
 800357c:	20000004 	.word	0x20000004

08003580 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	2300      	movs	r3, #0
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	2300      	movs	r3, #0
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	2300      	movs	r3, #0
 8003594:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003596:	2300      	movs	r3, #0
 8003598:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800359a:	4b1e      	ldr	r3, [pc, #120]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x94>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d002      	beq.n	80035b0 <HAL_RCC_GetSysClockFreq+0x30>
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d003      	beq.n	80035b6 <HAL_RCC_GetSysClockFreq+0x36>
 80035ae:	e027      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035b0:	4b19      	ldr	r3, [pc, #100]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x98>)
 80035b2:	613b      	str	r3, [r7, #16]
      break;
 80035b4:	e027      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	0c9b      	lsrs	r3, r3, #18
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	4a17      	ldr	r2, [pc, #92]	@ (800361c <HAL_RCC_GetSysClockFreq+0x9c>)
 80035c0:	5cd3      	ldrb	r3, [r2, r3]
 80035c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d010      	beq.n	80035f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035ce:	4b11      	ldr	r3, [pc, #68]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x94>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	0c5b      	lsrs	r3, r3, #17
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	4a11      	ldr	r2, [pc, #68]	@ (8003620 <HAL_RCC_GetSysClockFreq+0xa0>)
 80035da:	5cd3      	ldrb	r3, [r2, r3]
 80035dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x98>)
 80035e2:	fb03 f202 	mul.w	r2, r3, r2
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ec:	617b      	str	r3, [r7, #20]
 80035ee:	e004      	b.n	80035fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a0c      	ldr	r2, [pc, #48]	@ (8003624 <HAL_RCC_GetSysClockFreq+0xa4>)
 80035f4:	fb02 f303 	mul.w	r3, r2, r3
 80035f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	613b      	str	r3, [r7, #16]
      break;
 80035fe:	e002      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003600:	4b05      	ldr	r3, [pc, #20]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x98>)
 8003602:	613b      	str	r3, [r7, #16]
      break;
 8003604:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003606:	693b      	ldr	r3, [r7, #16]
}
 8003608:	4618      	mov	r0, r3
 800360a:	371c      	adds	r7, #28
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40021000 	.word	0x40021000
 8003618:	007a1200 	.word	0x007a1200
 800361c:	080074cc 	.word	0x080074cc
 8003620:	080074dc 	.word	0x080074dc
 8003624:	003d0900 	.word	0x003d0900

08003628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800362c:	4b02      	ldr	r3, [pc, #8]	@ (8003638 <HAL_RCC_GetHCLKFreq+0x10>)
 800362e:	681b      	ldr	r3, [r3, #0]
}
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr
 8003638:	20000000 	.word	0x20000000

0800363c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003640:	f7ff fff2 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 8003644:	4602      	mov	r2, r0
 8003646:	4b05      	ldr	r3, [pc, #20]	@ (800365c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	0a1b      	lsrs	r3, r3, #8
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	4903      	ldr	r1, [pc, #12]	@ (8003660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003652:	5ccb      	ldrb	r3, [r1, r3]
 8003654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003658:	4618      	mov	r0, r3
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40021000 	.word	0x40021000
 8003660:	080074c4 	.word	0x080074c4

08003664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003668:	f7ff ffde 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 800366c:	4602      	mov	r2, r0
 800366e:	4b05      	ldr	r3, [pc, #20]	@ (8003684 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	0adb      	lsrs	r3, r3, #11
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	4903      	ldr	r1, [pc, #12]	@ (8003688 <HAL_RCC_GetPCLK2Freq+0x24>)
 800367a:	5ccb      	ldrb	r3, [r1, r3]
 800367c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003680:	4618      	mov	r0, r3
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40021000 	.word	0x40021000
 8003688:	080074c4 	.word	0x080074c4

0800368c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003694:	4b0a      	ldr	r3, [pc, #40]	@ (80036c0 <RCC_Delay+0x34>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a0a      	ldr	r2, [pc, #40]	@ (80036c4 <RCC_Delay+0x38>)
 800369a:	fba2 2303 	umull	r2, r3, r2, r3
 800369e:	0a5b      	lsrs	r3, r3, #9
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	fb02 f303 	mul.w	r3, r2, r3
 80036a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036a8:	bf00      	nop
  }
  while (Delay --);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	1e5a      	subs	r2, r3, #1
 80036ae:	60fa      	str	r2, [r7, #12]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1f9      	bne.n	80036a8 <RCC_Delay+0x1c>
}
 80036b4:	bf00      	nop
 80036b6:	bf00      	nop
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr
 80036c0:	20000000 	.word	0x20000000
 80036c4:	10624dd3 	.word	0x10624dd3

080036c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	613b      	str	r3, [r7, #16]
 80036d4:	2300      	movs	r3, #0
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d07d      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80036e4:	2300      	movs	r3, #0
 80036e6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036e8:	4b4f      	ldr	r3, [pc, #316]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10d      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f4:	4b4c      	ldr	r3, [pc, #304]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	4a4b      	ldr	r2, [pc, #300]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036fe:	61d3      	str	r3, [r2, #28]
 8003700:	4b49      	ldr	r3, [pc, #292]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800370c:	2301      	movs	r3, #1
 800370e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003710:	4b46      	ldr	r3, [pc, #280]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003718:	2b00      	cmp	r3, #0
 800371a:	d118      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800371c:	4b43      	ldr	r3, [pc, #268]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a42      	ldr	r2, [pc, #264]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003722:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003726:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003728:	f7fd ff6e 	bl	8001608 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372e:	e008      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003730:	f7fd ff6a 	bl	8001608 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b64      	cmp	r3, #100	@ 0x64
 800373c:	d901      	bls.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e06d      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003742:	4b3a      	ldr	r3, [pc, #232]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800374e:	4b36      	ldr	r3, [pc, #216]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003756:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d02e      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	429a      	cmp	r2, r3
 800376a:	d027      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800376c:	4b2e      	ldr	r3, [pc, #184]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003774:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003776:	4b2e      	ldr	r3, [pc, #184]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003778:	2201      	movs	r2, #1
 800377a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800377c:	4b2c      	ldr	r3, [pc, #176]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003782:	4a29      	ldr	r2, [pc, #164]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d014      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003792:	f7fd ff39 	bl	8001608 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003798:	e00a      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379a:	f7fd ff35 	bl	8001608 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e036      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0ee      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	4917      	ldr	r1, [pc, #92]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037ce:	7dfb      	ldrb	r3, [r7, #23]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d105      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d4:	4b14      	ldr	r3, [pc, #80]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	4a13      	ldr	r2, [pc, #76]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	490b      	ldr	r1, [pc, #44]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b00      	cmp	r3, #0
 8003808:	d008      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800380a:	4b07      	ldr	r3, [pc, #28]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	4904      	ldr	r1, [pc, #16]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003818:	4313      	orrs	r3, r2
 800381a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40021000 	.word	0x40021000
 800382c:	40007000 	.word	0x40007000
 8003830:	42420440 	.word	0x42420440

08003834 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	2300      	movs	r3, #0
 8003842:	61fb      	str	r3, [r7, #28]
 8003844:	2300      	movs	r3, #0
 8003846:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	2300      	movs	r3, #0
 800384e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b10      	cmp	r3, #16
 8003854:	d00a      	beq.n	800386c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b10      	cmp	r3, #16
 800385a:	f200 808a 	bhi.w	8003972 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d045      	beq.n	80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b02      	cmp	r3, #2
 8003868:	d075      	beq.n	8003956 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800386a:	e082      	b.n	8003972 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800386c:	4b46      	ldr	r3, [pc, #280]	@ (8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003872:	4b45      	ldr	r3, [pc, #276]	@ (8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d07b      	beq.n	8003976 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	0c9b      	lsrs	r3, r3, #18
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	4a41      	ldr	r2, [pc, #260]	@ (800398c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003888:	5cd3      	ldrb	r3, [r2, r3]
 800388a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d015      	beq.n	80038c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003896:	4b3c      	ldr	r3, [pc, #240]	@ (8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	0c5b      	lsrs	r3, r3, #17
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	4a3b      	ldr	r2, [pc, #236]	@ (8003990 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80038a2:	5cd3      	ldrb	r3, [r2, r3]
 80038a4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00d      	beq.n	80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80038b0:	4a38      	ldr	r2, [pc, #224]	@ (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	fb02 f303 	mul.w	r3, r2, r3
 80038be:	61fb      	str	r3, [r7, #28]
 80038c0:	e004      	b.n	80038cc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	4a34      	ldr	r2, [pc, #208]	@ (8003998 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80038c6:	fb02 f303 	mul.w	r3, r2, r3
 80038ca:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80038cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038d8:	d102      	bne.n	80038e0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	61bb      	str	r3, [r7, #24]
      break;
 80038de:	e04a      	b.n	8003976 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	4a2d      	ldr	r2, [pc, #180]	@ (800399c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80038e6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ea:	085b      	lsrs	r3, r3, #1
 80038ec:	61bb      	str	r3, [r7, #24]
      break;
 80038ee:	e042      	b.n	8003976 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80038f0:	4b25      	ldr	r3, [pc, #148]	@ (8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003900:	d108      	bne.n	8003914 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800390c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	e01f      	b.n	8003954 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800391a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800391e:	d109      	bne.n	8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003920:	4b19      	ldr	r3, [pc, #100]	@ (8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800392c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003930:	61bb      	str	r3, [r7, #24]
 8003932:	e00f      	b.n	8003954 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800393a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800393e:	d11c      	bne.n	800397a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003940:	4b11      	ldr	r3, [pc, #68]	@ (8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d016      	beq.n	800397a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800394c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003950:	61bb      	str	r3, [r7, #24]
      break;
 8003952:	e012      	b.n	800397a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003954:	e011      	b.n	800397a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003956:	f7ff fe85 	bl	8003664 <HAL_RCC_GetPCLK2Freq>
 800395a:	4602      	mov	r2, r0
 800395c:	4b0a      	ldr	r3, [pc, #40]	@ (8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	0b9b      	lsrs	r3, r3, #14
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	3301      	adds	r3, #1
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	fbb2 f3f3 	udiv	r3, r2, r3
 800396e:	61bb      	str	r3, [r7, #24]
      break;
 8003970:	e004      	b.n	800397c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003972:	bf00      	nop
 8003974:	e002      	b.n	800397c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003976:	bf00      	nop
 8003978:	e000      	b.n	800397c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800397a:	bf00      	nop
    }
  }
  return (frequency);
 800397c:	69bb      	ldr	r3, [r7, #24]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3720      	adds	r7, #32
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	40021000 	.word	0x40021000
 800398c:	080074e0 	.word	0x080074e0
 8003990:	080074f0 	.word	0x080074f0
 8003994:	007a1200 	.word	0x007a1200
 8003998:	003d0900 	.word	0x003d0900
 800399c:	aaaaaaab 	.word	0xaaaaaaab

080039a0 <__cvt>:
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039a6:	461d      	mov	r5, r3
 80039a8:	bfbb      	ittet	lt
 80039aa:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80039ae:	461d      	movlt	r5, r3
 80039b0:	2300      	movge	r3, #0
 80039b2:	232d      	movlt	r3, #45	@ 0x2d
 80039b4:	b088      	sub	sp, #32
 80039b6:	4614      	mov	r4, r2
 80039b8:	bfb8      	it	lt
 80039ba:	4614      	movlt	r4, r2
 80039bc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80039be:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80039c0:	7013      	strb	r3, [r2, #0]
 80039c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80039c4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80039c8:	f023 0820 	bic.w	r8, r3, #32
 80039cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80039d0:	d005      	beq.n	80039de <__cvt+0x3e>
 80039d2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80039d6:	d100      	bne.n	80039da <__cvt+0x3a>
 80039d8:	3601      	adds	r6, #1
 80039da:	2302      	movs	r3, #2
 80039dc:	e000      	b.n	80039e0 <__cvt+0x40>
 80039de:	2303      	movs	r3, #3
 80039e0:	aa07      	add	r2, sp, #28
 80039e2:	9204      	str	r2, [sp, #16]
 80039e4:	aa06      	add	r2, sp, #24
 80039e6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80039ea:	e9cd 3600 	strd	r3, r6, [sp]
 80039ee:	4622      	mov	r2, r4
 80039f0:	462b      	mov	r3, r5
 80039f2:	f000 fe81 	bl	80046f8 <_dtoa_r>
 80039f6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80039fa:	4607      	mov	r7, r0
 80039fc:	d119      	bne.n	8003a32 <__cvt+0x92>
 80039fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003a00:	07db      	lsls	r3, r3, #31
 8003a02:	d50e      	bpl.n	8003a22 <__cvt+0x82>
 8003a04:	eb00 0906 	add.w	r9, r0, r6
 8003a08:	2200      	movs	r2, #0
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	4620      	mov	r0, r4
 8003a0e:	4629      	mov	r1, r5
 8003a10:	f7fc ffca 	bl	80009a8 <__aeabi_dcmpeq>
 8003a14:	b108      	cbz	r0, 8003a1a <__cvt+0x7a>
 8003a16:	f8cd 901c 	str.w	r9, [sp, #28]
 8003a1a:	2230      	movs	r2, #48	@ 0x30
 8003a1c:	9b07      	ldr	r3, [sp, #28]
 8003a1e:	454b      	cmp	r3, r9
 8003a20:	d31e      	bcc.n	8003a60 <__cvt+0xc0>
 8003a22:	4638      	mov	r0, r7
 8003a24:	9b07      	ldr	r3, [sp, #28]
 8003a26:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003a28:	1bdb      	subs	r3, r3, r7
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	b008      	add	sp, #32
 8003a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a32:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003a36:	eb00 0906 	add.w	r9, r0, r6
 8003a3a:	d1e5      	bne.n	8003a08 <__cvt+0x68>
 8003a3c:	7803      	ldrb	r3, [r0, #0]
 8003a3e:	2b30      	cmp	r3, #48	@ 0x30
 8003a40:	d10a      	bne.n	8003a58 <__cvt+0xb8>
 8003a42:	2200      	movs	r2, #0
 8003a44:	2300      	movs	r3, #0
 8003a46:	4620      	mov	r0, r4
 8003a48:	4629      	mov	r1, r5
 8003a4a:	f7fc ffad 	bl	80009a8 <__aeabi_dcmpeq>
 8003a4e:	b918      	cbnz	r0, 8003a58 <__cvt+0xb8>
 8003a50:	f1c6 0601 	rsb	r6, r6, #1
 8003a54:	f8ca 6000 	str.w	r6, [sl]
 8003a58:	f8da 3000 	ldr.w	r3, [sl]
 8003a5c:	4499      	add	r9, r3
 8003a5e:	e7d3      	b.n	8003a08 <__cvt+0x68>
 8003a60:	1c59      	adds	r1, r3, #1
 8003a62:	9107      	str	r1, [sp, #28]
 8003a64:	701a      	strb	r2, [r3, #0]
 8003a66:	e7d9      	b.n	8003a1c <__cvt+0x7c>

08003a68 <__exponent>:
 8003a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a6a:	2900      	cmp	r1, #0
 8003a6c:	bfb6      	itet	lt
 8003a6e:	232d      	movlt	r3, #45	@ 0x2d
 8003a70:	232b      	movge	r3, #43	@ 0x2b
 8003a72:	4249      	neglt	r1, r1
 8003a74:	2909      	cmp	r1, #9
 8003a76:	7002      	strb	r2, [r0, #0]
 8003a78:	7043      	strb	r3, [r0, #1]
 8003a7a:	dd29      	ble.n	8003ad0 <__exponent+0x68>
 8003a7c:	f10d 0307 	add.w	r3, sp, #7
 8003a80:	461d      	mov	r5, r3
 8003a82:	270a      	movs	r7, #10
 8003a84:	fbb1 f6f7 	udiv	r6, r1, r7
 8003a88:	461a      	mov	r2, r3
 8003a8a:	fb07 1416 	mls	r4, r7, r6, r1
 8003a8e:	3430      	adds	r4, #48	@ 0x30
 8003a90:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003a94:	460c      	mov	r4, r1
 8003a96:	2c63      	cmp	r4, #99	@ 0x63
 8003a98:	4631      	mov	r1, r6
 8003a9a:	f103 33ff 	add.w	r3, r3, #4294967295
 8003a9e:	dcf1      	bgt.n	8003a84 <__exponent+0x1c>
 8003aa0:	3130      	adds	r1, #48	@ 0x30
 8003aa2:	1e94      	subs	r4, r2, #2
 8003aa4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003aa8:	4623      	mov	r3, r4
 8003aaa:	1c41      	adds	r1, r0, #1
 8003aac:	42ab      	cmp	r3, r5
 8003aae:	d30a      	bcc.n	8003ac6 <__exponent+0x5e>
 8003ab0:	f10d 0309 	add.w	r3, sp, #9
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	42ac      	cmp	r4, r5
 8003ab8:	bf88      	it	hi
 8003aba:	2300      	movhi	r3, #0
 8003abc:	3302      	adds	r3, #2
 8003abe:	4403      	add	r3, r0
 8003ac0:	1a18      	subs	r0, r3, r0
 8003ac2:	b003      	add	sp, #12
 8003ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ac6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003aca:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003ace:	e7ed      	b.n	8003aac <__exponent+0x44>
 8003ad0:	2330      	movs	r3, #48	@ 0x30
 8003ad2:	3130      	adds	r1, #48	@ 0x30
 8003ad4:	7083      	strb	r3, [r0, #2]
 8003ad6:	70c1      	strb	r1, [r0, #3]
 8003ad8:	1d03      	adds	r3, r0, #4
 8003ada:	e7f1      	b.n	8003ac0 <__exponent+0x58>

08003adc <_printf_float>:
 8003adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ae0:	b091      	sub	sp, #68	@ 0x44
 8003ae2:	460c      	mov	r4, r1
 8003ae4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003ae8:	4616      	mov	r6, r2
 8003aea:	461f      	mov	r7, r3
 8003aec:	4605      	mov	r5, r0
 8003aee:	f000 fcf5 	bl	80044dc <_localeconv_r>
 8003af2:	6803      	ldr	r3, [r0, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	9308      	str	r3, [sp, #32]
 8003af8:	f7fc fb2a 	bl	8000150 <strlen>
 8003afc:	2300      	movs	r3, #0
 8003afe:	930e      	str	r3, [sp, #56]	@ 0x38
 8003b00:	f8d8 3000 	ldr.w	r3, [r8]
 8003b04:	9009      	str	r0, [sp, #36]	@ 0x24
 8003b06:	3307      	adds	r3, #7
 8003b08:	f023 0307 	bic.w	r3, r3, #7
 8003b0c:	f103 0208 	add.w	r2, r3, #8
 8003b10:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003b14:	f8d4 b000 	ldr.w	fp, [r4]
 8003b18:	f8c8 2000 	str.w	r2, [r8]
 8003b1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003b20:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003b24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003b26:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003b2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003b32:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003b36:	4b9c      	ldr	r3, [pc, #624]	@ (8003da8 <_printf_float+0x2cc>)
 8003b38:	f7fc ff68 	bl	8000a0c <__aeabi_dcmpun>
 8003b3c:	bb70      	cbnz	r0, 8003b9c <_printf_float+0xc0>
 8003b3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003b42:	f04f 32ff 	mov.w	r2, #4294967295
 8003b46:	4b98      	ldr	r3, [pc, #608]	@ (8003da8 <_printf_float+0x2cc>)
 8003b48:	f7fc ff42 	bl	80009d0 <__aeabi_dcmple>
 8003b4c:	bb30      	cbnz	r0, 8003b9c <_printf_float+0xc0>
 8003b4e:	2200      	movs	r2, #0
 8003b50:	2300      	movs	r3, #0
 8003b52:	4640      	mov	r0, r8
 8003b54:	4649      	mov	r1, r9
 8003b56:	f7fc ff31 	bl	80009bc <__aeabi_dcmplt>
 8003b5a:	b110      	cbz	r0, 8003b62 <_printf_float+0x86>
 8003b5c:	232d      	movs	r3, #45	@ 0x2d
 8003b5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b62:	4a92      	ldr	r2, [pc, #584]	@ (8003dac <_printf_float+0x2d0>)
 8003b64:	4b92      	ldr	r3, [pc, #584]	@ (8003db0 <_printf_float+0x2d4>)
 8003b66:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003b6a:	bf94      	ite	ls
 8003b6c:	4690      	movls	r8, r2
 8003b6e:	4698      	movhi	r8, r3
 8003b70:	2303      	movs	r3, #3
 8003b72:	f04f 0900 	mov.w	r9, #0
 8003b76:	6123      	str	r3, [r4, #16]
 8003b78:	f02b 0304 	bic.w	r3, fp, #4
 8003b7c:	6023      	str	r3, [r4, #0]
 8003b7e:	4633      	mov	r3, r6
 8003b80:	4621      	mov	r1, r4
 8003b82:	4628      	mov	r0, r5
 8003b84:	9700      	str	r7, [sp, #0]
 8003b86:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003b88:	f000 f9d4 	bl	8003f34 <_printf_common>
 8003b8c:	3001      	adds	r0, #1
 8003b8e:	f040 8090 	bne.w	8003cb2 <_printf_float+0x1d6>
 8003b92:	f04f 30ff 	mov.w	r0, #4294967295
 8003b96:	b011      	add	sp, #68	@ 0x44
 8003b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b9c:	4642      	mov	r2, r8
 8003b9e:	464b      	mov	r3, r9
 8003ba0:	4640      	mov	r0, r8
 8003ba2:	4649      	mov	r1, r9
 8003ba4:	f7fc ff32 	bl	8000a0c <__aeabi_dcmpun>
 8003ba8:	b148      	cbz	r0, 8003bbe <_printf_float+0xe2>
 8003baa:	464b      	mov	r3, r9
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bfb8      	it	lt
 8003bb0:	232d      	movlt	r3, #45	@ 0x2d
 8003bb2:	4a80      	ldr	r2, [pc, #512]	@ (8003db4 <_printf_float+0x2d8>)
 8003bb4:	bfb8      	it	lt
 8003bb6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003bba:	4b7f      	ldr	r3, [pc, #508]	@ (8003db8 <_printf_float+0x2dc>)
 8003bbc:	e7d3      	b.n	8003b66 <_printf_float+0x8a>
 8003bbe:	6863      	ldr	r3, [r4, #4]
 8003bc0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	d13f      	bne.n	8003c48 <_printf_float+0x16c>
 8003bc8:	2306      	movs	r3, #6
 8003bca:	6063      	str	r3, [r4, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003bd2:	6023      	str	r3, [r4, #0]
 8003bd4:	9206      	str	r2, [sp, #24]
 8003bd6:	aa0e      	add	r2, sp, #56	@ 0x38
 8003bd8:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003bdc:	aa0d      	add	r2, sp, #52	@ 0x34
 8003bde:	9203      	str	r2, [sp, #12]
 8003be0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003be4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003be8:	6863      	ldr	r3, [r4, #4]
 8003bea:	4642      	mov	r2, r8
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	4628      	mov	r0, r5
 8003bf0:	464b      	mov	r3, r9
 8003bf2:	910a      	str	r1, [sp, #40]	@ 0x28
 8003bf4:	f7ff fed4 	bl	80039a0 <__cvt>
 8003bf8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003bfa:	4680      	mov	r8, r0
 8003bfc:	2947      	cmp	r1, #71	@ 0x47
 8003bfe:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003c00:	d128      	bne.n	8003c54 <_printf_float+0x178>
 8003c02:	1cc8      	adds	r0, r1, #3
 8003c04:	db02      	blt.n	8003c0c <_printf_float+0x130>
 8003c06:	6863      	ldr	r3, [r4, #4]
 8003c08:	4299      	cmp	r1, r3
 8003c0a:	dd40      	ble.n	8003c8e <_printf_float+0x1b2>
 8003c0c:	f1aa 0a02 	sub.w	sl, sl, #2
 8003c10:	fa5f fa8a 	uxtb.w	sl, sl
 8003c14:	4652      	mov	r2, sl
 8003c16:	3901      	subs	r1, #1
 8003c18:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003c1c:	910d      	str	r1, [sp, #52]	@ 0x34
 8003c1e:	f7ff ff23 	bl	8003a68 <__exponent>
 8003c22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003c24:	4681      	mov	r9, r0
 8003c26:	1813      	adds	r3, r2, r0
 8003c28:	2a01      	cmp	r2, #1
 8003c2a:	6123      	str	r3, [r4, #16]
 8003c2c:	dc02      	bgt.n	8003c34 <_printf_float+0x158>
 8003c2e:	6822      	ldr	r2, [r4, #0]
 8003c30:	07d2      	lsls	r2, r2, #31
 8003c32:	d501      	bpl.n	8003c38 <_printf_float+0x15c>
 8003c34:	3301      	adds	r3, #1
 8003c36:	6123      	str	r3, [r4, #16]
 8003c38:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d09e      	beq.n	8003b7e <_printf_float+0xa2>
 8003c40:	232d      	movs	r3, #45	@ 0x2d
 8003c42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c46:	e79a      	b.n	8003b7e <_printf_float+0xa2>
 8003c48:	2947      	cmp	r1, #71	@ 0x47
 8003c4a:	d1bf      	bne.n	8003bcc <_printf_float+0xf0>
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1bd      	bne.n	8003bcc <_printf_float+0xf0>
 8003c50:	2301      	movs	r3, #1
 8003c52:	e7ba      	b.n	8003bca <_printf_float+0xee>
 8003c54:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003c58:	d9dc      	bls.n	8003c14 <_printf_float+0x138>
 8003c5a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003c5e:	d118      	bne.n	8003c92 <_printf_float+0x1b6>
 8003c60:	2900      	cmp	r1, #0
 8003c62:	6863      	ldr	r3, [r4, #4]
 8003c64:	dd0b      	ble.n	8003c7e <_printf_float+0x1a2>
 8003c66:	6121      	str	r1, [r4, #16]
 8003c68:	b913      	cbnz	r3, 8003c70 <_printf_float+0x194>
 8003c6a:	6822      	ldr	r2, [r4, #0]
 8003c6c:	07d0      	lsls	r0, r2, #31
 8003c6e:	d502      	bpl.n	8003c76 <_printf_float+0x19a>
 8003c70:	3301      	adds	r3, #1
 8003c72:	440b      	add	r3, r1
 8003c74:	6123      	str	r3, [r4, #16]
 8003c76:	f04f 0900 	mov.w	r9, #0
 8003c7a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003c7c:	e7dc      	b.n	8003c38 <_printf_float+0x15c>
 8003c7e:	b913      	cbnz	r3, 8003c86 <_printf_float+0x1aa>
 8003c80:	6822      	ldr	r2, [r4, #0]
 8003c82:	07d2      	lsls	r2, r2, #31
 8003c84:	d501      	bpl.n	8003c8a <_printf_float+0x1ae>
 8003c86:	3302      	adds	r3, #2
 8003c88:	e7f4      	b.n	8003c74 <_printf_float+0x198>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e7f2      	b.n	8003c74 <_printf_float+0x198>
 8003c8e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003c92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003c94:	4299      	cmp	r1, r3
 8003c96:	db05      	blt.n	8003ca4 <_printf_float+0x1c8>
 8003c98:	6823      	ldr	r3, [r4, #0]
 8003c9a:	6121      	str	r1, [r4, #16]
 8003c9c:	07d8      	lsls	r0, r3, #31
 8003c9e:	d5ea      	bpl.n	8003c76 <_printf_float+0x19a>
 8003ca0:	1c4b      	adds	r3, r1, #1
 8003ca2:	e7e7      	b.n	8003c74 <_printf_float+0x198>
 8003ca4:	2900      	cmp	r1, #0
 8003ca6:	bfcc      	ite	gt
 8003ca8:	2201      	movgt	r2, #1
 8003caa:	f1c1 0202 	rsble	r2, r1, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	e7e0      	b.n	8003c74 <_printf_float+0x198>
 8003cb2:	6823      	ldr	r3, [r4, #0]
 8003cb4:	055a      	lsls	r2, r3, #21
 8003cb6:	d407      	bmi.n	8003cc8 <_printf_float+0x1ec>
 8003cb8:	6923      	ldr	r3, [r4, #16]
 8003cba:	4642      	mov	r2, r8
 8003cbc:	4631      	mov	r1, r6
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	47b8      	blx	r7
 8003cc2:	3001      	adds	r0, #1
 8003cc4:	d12b      	bne.n	8003d1e <_printf_float+0x242>
 8003cc6:	e764      	b.n	8003b92 <_printf_float+0xb6>
 8003cc8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003ccc:	f240 80dc 	bls.w	8003e88 <_printf_float+0x3ac>
 8003cd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f7fc fe66 	bl	80009a8 <__aeabi_dcmpeq>
 8003cdc:	2800      	cmp	r0, #0
 8003cde:	d033      	beq.n	8003d48 <_printf_float+0x26c>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	4631      	mov	r1, r6
 8003ce4:	4628      	mov	r0, r5
 8003ce6:	4a35      	ldr	r2, [pc, #212]	@ (8003dbc <_printf_float+0x2e0>)
 8003ce8:	47b8      	blx	r7
 8003cea:	3001      	adds	r0, #1
 8003cec:	f43f af51 	beq.w	8003b92 <_printf_float+0xb6>
 8003cf0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003cf4:	4543      	cmp	r3, r8
 8003cf6:	db02      	blt.n	8003cfe <_printf_float+0x222>
 8003cf8:	6823      	ldr	r3, [r4, #0]
 8003cfa:	07d8      	lsls	r0, r3, #31
 8003cfc:	d50f      	bpl.n	8003d1e <_printf_float+0x242>
 8003cfe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003d02:	4631      	mov	r1, r6
 8003d04:	4628      	mov	r0, r5
 8003d06:	47b8      	blx	r7
 8003d08:	3001      	adds	r0, #1
 8003d0a:	f43f af42 	beq.w	8003b92 <_printf_float+0xb6>
 8003d0e:	f04f 0900 	mov.w	r9, #0
 8003d12:	f108 38ff 	add.w	r8, r8, #4294967295
 8003d16:	f104 0a1a 	add.w	sl, r4, #26
 8003d1a:	45c8      	cmp	r8, r9
 8003d1c:	dc09      	bgt.n	8003d32 <_printf_float+0x256>
 8003d1e:	6823      	ldr	r3, [r4, #0]
 8003d20:	079b      	lsls	r3, r3, #30
 8003d22:	f100 8102 	bmi.w	8003f2a <_printf_float+0x44e>
 8003d26:	68e0      	ldr	r0, [r4, #12]
 8003d28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003d2a:	4298      	cmp	r0, r3
 8003d2c:	bfb8      	it	lt
 8003d2e:	4618      	movlt	r0, r3
 8003d30:	e731      	b.n	8003b96 <_printf_float+0xba>
 8003d32:	2301      	movs	r3, #1
 8003d34:	4652      	mov	r2, sl
 8003d36:	4631      	mov	r1, r6
 8003d38:	4628      	mov	r0, r5
 8003d3a:	47b8      	blx	r7
 8003d3c:	3001      	adds	r0, #1
 8003d3e:	f43f af28 	beq.w	8003b92 <_printf_float+0xb6>
 8003d42:	f109 0901 	add.w	r9, r9, #1
 8003d46:	e7e8      	b.n	8003d1a <_printf_float+0x23e>
 8003d48:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	dc38      	bgt.n	8003dc0 <_printf_float+0x2e4>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	4631      	mov	r1, r6
 8003d52:	4628      	mov	r0, r5
 8003d54:	4a19      	ldr	r2, [pc, #100]	@ (8003dbc <_printf_float+0x2e0>)
 8003d56:	47b8      	blx	r7
 8003d58:	3001      	adds	r0, #1
 8003d5a:	f43f af1a 	beq.w	8003b92 <_printf_float+0xb6>
 8003d5e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003d62:	ea59 0303 	orrs.w	r3, r9, r3
 8003d66:	d102      	bne.n	8003d6e <_printf_float+0x292>
 8003d68:	6823      	ldr	r3, [r4, #0]
 8003d6a:	07d9      	lsls	r1, r3, #31
 8003d6c:	d5d7      	bpl.n	8003d1e <_printf_float+0x242>
 8003d6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003d72:	4631      	mov	r1, r6
 8003d74:	4628      	mov	r0, r5
 8003d76:	47b8      	blx	r7
 8003d78:	3001      	adds	r0, #1
 8003d7a:	f43f af0a 	beq.w	8003b92 <_printf_float+0xb6>
 8003d7e:	f04f 0a00 	mov.w	sl, #0
 8003d82:	f104 0b1a 	add.w	fp, r4, #26
 8003d86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003d88:	425b      	negs	r3, r3
 8003d8a:	4553      	cmp	r3, sl
 8003d8c:	dc01      	bgt.n	8003d92 <_printf_float+0x2b6>
 8003d8e:	464b      	mov	r3, r9
 8003d90:	e793      	b.n	8003cba <_printf_float+0x1de>
 8003d92:	2301      	movs	r3, #1
 8003d94:	465a      	mov	r2, fp
 8003d96:	4631      	mov	r1, r6
 8003d98:	4628      	mov	r0, r5
 8003d9a:	47b8      	blx	r7
 8003d9c:	3001      	adds	r0, #1
 8003d9e:	f43f aef8 	beq.w	8003b92 <_printf_float+0xb6>
 8003da2:	f10a 0a01 	add.w	sl, sl, #1
 8003da6:	e7ee      	b.n	8003d86 <_printf_float+0x2aa>
 8003da8:	7fefffff 	.word	0x7fefffff
 8003dac:	080074f2 	.word	0x080074f2
 8003db0:	080074f6 	.word	0x080074f6
 8003db4:	080074fa 	.word	0x080074fa
 8003db8:	080074fe 	.word	0x080074fe
 8003dbc:	08007502 	.word	0x08007502
 8003dc0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003dc2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003dc6:	4553      	cmp	r3, sl
 8003dc8:	bfa8      	it	ge
 8003dca:	4653      	movge	r3, sl
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	4699      	mov	r9, r3
 8003dd0:	dc36      	bgt.n	8003e40 <_printf_float+0x364>
 8003dd2:	f04f 0b00 	mov.w	fp, #0
 8003dd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003dda:	f104 021a 	add.w	r2, r4, #26
 8003dde:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003de0:	930a      	str	r3, [sp, #40]	@ 0x28
 8003de2:	eba3 0309 	sub.w	r3, r3, r9
 8003de6:	455b      	cmp	r3, fp
 8003de8:	dc31      	bgt.n	8003e4e <_printf_float+0x372>
 8003dea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003dec:	459a      	cmp	sl, r3
 8003dee:	dc3a      	bgt.n	8003e66 <_printf_float+0x38a>
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	07da      	lsls	r2, r3, #31
 8003df4:	d437      	bmi.n	8003e66 <_printf_float+0x38a>
 8003df6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003df8:	ebaa 0903 	sub.w	r9, sl, r3
 8003dfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003dfe:	ebaa 0303 	sub.w	r3, sl, r3
 8003e02:	4599      	cmp	r9, r3
 8003e04:	bfa8      	it	ge
 8003e06:	4699      	movge	r9, r3
 8003e08:	f1b9 0f00 	cmp.w	r9, #0
 8003e0c:	dc33      	bgt.n	8003e76 <_printf_float+0x39a>
 8003e0e:	f04f 0800 	mov.w	r8, #0
 8003e12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e16:	f104 0b1a 	add.w	fp, r4, #26
 8003e1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e1c:	ebaa 0303 	sub.w	r3, sl, r3
 8003e20:	eba3 0309 	sub.w	r3, r3, r9
 8003e24:	4543      	cmp	r3, r8
 8003e26:	f77f af7a 	ble.w	8003d1e <_printf_float+0x242>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	465a      	mov	r2, fp
 8003e2e:	4631      	mov	r1, r6
 8003e30:	4628      	mov	r0, r5
 8003e32:	47b8      	blx	r7
 8003e34:	3001      	adds	r0, #1
 8003e36:	f43f aeac 	beq.w	8003b92 <_printf_float+0xb6>
 8003e3a:	f108 0801 	add.w	r8, r8, #1
 8003e3e:	e7ec      	b.n	8003e1a <_printf_float+0x33e>
 8003e40:	4642      	mov	r2, r8
 8003e42:	4631      	mov	r1, r6
 8003e44:	4628      	mov	r0, r5
 8003e46:	47b8      	blx	r7
 8003e48:	3001      	adds	r0, #1
 8003e4a:	d1c2      	bne.n	8003dd2 <_printf_float+0x2f6>
 8003e4c:	e6a1      	b.n	8003b92 <_printf_float+0xb6>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	4631      	mov	r1, r6
 8003e52:	4628      	mov	r0, r5
 8003e54:	920a      	str	r2, [sp, #40]	@ 0x28
 8003e56:	47b8      	blx	r7
 8003e58:	3001      	adds	r0, #1
 8003e5a:	f43f ae9a 	beq.w	8003b92 <_printf_float+0xb6>
 8003e5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003e60:	f10b 0b01 	add.w	fp, fp, #1
 8003e64:	e7bb      	b.n	8003dde <_printf_float+0x302>
 8003e66:	4631      	mov	r1, r6
 8003e68:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	47b8      	blx	r7
 8003e70:	3001      	adds	r0, #1
 8003e72:	d1c0      	bne.n	8003df6 <_printf_float+0x31a>
 8003e74:	e68d      	b.n	8003b92 <_printf_float+0xb6>
 8003e76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003e78:	464b      	mov	r3, r9
 8003e7a:	4631      	mov	r1, r6
 8003e7c:	4628      	mov	r0, r5
 8003e7e:	4442      	add	r2, r8
 8003e80:	47b8      	blx	r7
 8003e82:	3001      	adds	r0, #1
 8003e84:	d1c3      	bne.n	8003e0e <_printf_float+0x332>
 8003e86:	e684      	b.n	8003b92 <_printf_float+0xb6>
 8003e88:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003e8c:	f1ba 0f01 	cmp.w	sl, #1
 8003e90:	dc01      	bgt.n	8003e96 <_printf_float+0x3ba>
 8003e92:	07db      	lsls	r3, r3, #31
 8003e94:	d536      	bpl.n	8003f04 <_printf_float+0x428>
 8003e96:	2301      	movs	r3, #1
 8003e98:	4642      	mov	r2, r8
 8003e9a:	4631      	mov	r1, r6
 8003e9c:	4628      	mov	r0, r5
 8003e9e:	47b8      	blx	r7
 8003ea0:	3001      	adds	r0, #1
 8003ea2:	f43f ae76 	beq.w	8003b92 <_printf_float+0xb6>
 8003ea6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003eaa:	4631      	mov	r1, r6
 8003eac:	4628      	mov	r0, r5
 8003eae:	47b8      	blx	r7
 8003eb0:	3001      	adds	r0, #1
 8003eb2:	f43f ae6e 	beq.w	8003b92 <_printf_float+0xb6>
 8003eb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003eba:	2200      	movs	r2, #0
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003ec2:	f7fc fd71 	bl	80009a8 <__aeabi_dcmpeq>
 8003ec6:	b9c0      	cbnz	r0, 8003efa <_printf_float+0x41e>
 8003ec8:	4653      	mov	r3, sl
 8003eca:	f108 0201 	add.w	r2, r8, #1
 8003ece:	4631      	mov	r1, r6
 8003ed0:	4628      	mov	r0, r5
 8003ed2:	47b8      	blx	r7
 8003ed4:	3001      	adds	r0, #1
 8003ed6:	d10c      	bne.n	8003ef2 <_printf_float+0x416>
 8003ed8:	e65b      	b.n	8003b92 <_printf_float+0xb6>
 8003eda:	2301      	movs	r3, #1
 8003edc:	465a      	mov	r2, fp
 8003ede:	4631      	mov	r1, r6
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	47b8      	blx	r7
 8003ee4:	3001      	adds	r0, #1
 8003ee6:	f43f ae54 	beq.w	8003b92 <_printf_float+0xb6>
 8003eea:	f108 0801 	add.w	r8, r8, #1
 8003eee:	45d0      	cmp	r8, sl
 8003ef0:	dbf3      	blt.n	8003eda <_printf_float+0x3fe>
 8003ef2:	464b      	mov	r3, r9
 8003ef4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003ef8:	e6e0      	b.n	8003cbc <_printf_float+0x1e0>
 8003efa:	f04f 0800 	mov.w	r8, #0
 8003efe:	f104 0b1a 	add.w	fp, r4, #26
 8003f02:	e7f4      	b.n	8003eee <_printf_float+0x412>
 8003f04:	2301      	movs	r3, #1
 8003f06:	4642      	mov	r2, r8
 8003f08:	e7e1      	b.n	8003ece <_printf_float+0x3f2>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	464a      	mov	r2, r9
 8003f0e:	4631      	mov	r1, r6
 8003f10:	4628      	mov	r0, r5
 8003f12:	47b8      	blx	r7
 8003f14:	3001      	adds	r0, #1
 8003f16:	f43f ae3c 	beq.w	8003b92 <_printf_float+0xb6>
 8003f1a:	f108 0801 	add.w	r8, r8, #1
 8003f1e:	68e3      	ldr	r3, [r4, #12]
 8003f20:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003f22:	1a5b      	subs	r3, r3, r1
 8003f24:	4543      	cmp	r3, r8
 8003f26:	dcf0      	bgt.n	8003f0a <_printf_float+0x42e>
 8003f28:	e6fd      	b.n	8003d26 <_printf_float+0x24a>
 8003f2a:	f04f 0800 	mov.w	r8, #0
 8003f2e:	f104 0919 	add.w	r9, r4, #25
 8003f32:	e7f4      	b.n	8003f1e <_printf_float+0x442>

08003f34 <_printf_common>:
 8003f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f38:	4616      	mov	r6, r2
 8003f3a:	4698      	mov	r8, r3
 8003f3c:	688a      	ldr	r2, [r1, #8]
 8003f3e:	690b      	ldr	r3, [r1, #16]
 8003f40:	4607      	mov	r7, r0
 8003f42:	4293      	cmp	r3, r2
 8003f44:	bfb8      	it	lt
 8003f46:	4613      	movlt	r3, r2
 8003f48:	6033      	str	r3, [r6, #0]
 8003f4a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f4e:	460c      	mov	r4, r1
 8003f50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f54:	b10a      	cbz	r2, 8003f5a <_printf_common+0x26>
 8003f56:	3301      	adds	r3, #1
 8003f58:	6033      	str	r3, [r6, #0]
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	0699      	lsls	r1, r3, #26
 8003f5e:	bf42      	ittt	mi
 8003f60:	6833      	ldrmi	r3, [r6, #0]
 8003f62:	3302      	addmi	r3, #2
 8003f64:	6033      	strmi	r3, [r6, #0]
 8003f66:	6825      	ldr	r5, [r4, #0]
 8003f68:	f015 0506 	ands.w	r5, r5, #6
 8003f6c:	d106      	bne.n	8003f7c <_printf_common+0x48>
 8003f6e:	f104 0a19 	add.w	sl, r4, #25
 8003f72:	68e3      	ldr	r3, [r4, #12]
 8003f74:	6832      	ldr	r2, [r6, #0]
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	42ab      	cmp	r3, r5
 8003f7a:	dc2b      	bgt.n	8003fd4 <_printf_common+0xa0>
 8003f7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f80:	6822      	ldr	r2, [r4, #0]
 8003f82:	3b00      	subs	r3, #0
 8003f84:	bf18      	it	ne
 8003f86:	2301      	movne	r3, #1
 8003f88:	0692      	lsls	r2, r2, #26
 8003f8a:	d430      	bmi.n	8003fee <_printf_common+0xba>
 8003f8c:	4641      	mov	r1, r8
 8003f8e:	4638      	mov	r0, r7
 8003f90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f94:	47c8      	blx	r9
 8003f96:	3001      	adds	r0, #1
 8003f98:	d023      	beq.n	8003fe2 <_printf_common+0xae>
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	6922      	ldr	r2, [r4, #16]
 8003f9e:	f003 0306 	and.w	r3, r3, #6
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	bf14      	ite	ne
 8003fa6:	2500      	movne	r5, #0
 8003fa8:	6833      	ldreq	r3, [r6, #0]
 8003faa:	f04f 0600 	mov.w	r6, #0
 8003fae:	bf08      	it	eq
 8003fb0:	68e5      	ldreq	r5, [r4, #12]
 8003fb2:	f104 041a 	add.w	r4, r4, #26
 8003fb6:	bf08      	it	eq
 8003fb8:	1aed      	subeq	r5, r5, r3
 8003fba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003fbe:	bf08      	it	eq
 8003fc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	bfc4      	itt	gt
 8003fc8:	1a9b      	subgt	r3, r3, r2
 8003fca:	18ed      	addgt	r5, r5, r3
 8003fcc:	42b5      	cmp	r5, r6
 8003fce:	d11a      	bne.n	8004006 <_printf_common+0xd2>
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	e008      	b.n	8003fe6 <_printf_common+0xb2>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	4652      	mov	r2, sl
 8003fd8:	4641      	mov	r1, r8
 8003fda:	4638      	mov	r0, r7
 8003fdc:	47c8      	blx	r9
 8003fde:	3001      	adds	r0, #1
 8003fe0:	d103      	bne.n	8003fea <_printf_common+0xb6>
 8003fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fea:	3501      	adds	r5, #1
 8003fec:	e7c1      	b.n	8003f72 <_printf_common+0x3e>
 8003fee:	2030      	movs	r0, #48	@ 0x30
 8003ff0:	18e1      	adds	r1, r4, r3
 8003ff2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ffc:	4422      	add	r2, r4
 8003ffe:	3302      	adds	r3, #2
 8004000:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004004:	e7c2      	b.n	8003f8c <_printf_common+0x58>
 8004006:	2301      	movs	r3, #1
 8004008:	4622      	mov	r2, r4
 800400a:	4641      	mov	r1, r8
 800400c:	4638      	mov	r0, r7
 800400e:	47c8      	blx	r9
 8004010:	3001      	adds	r0, #1
 8004012:	d0e6      	beq.n	8003fe2 <_printf_common+0xae>
 8004014:	3601      	adds	r6, #1
 8004016:	e7d9      	b.n	8003fcc <_printf_common+0x98>

08004018 <_printf_i>:
 8004018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800401c:	7e0f      	ldrb	r7, [r1, #24]
 800401e:	4691      	mov	r9, r2
 8004020:	2f78      	cmp	r7, #120	@ 0x78
 8004022:	4680      	mov	r8, r0
 8004024:	460c      	mov	r4, r1
 8004026:	469a      	mov	sl, r3
 8004028:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800402a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800402e:	d807      	bhi.n	8004040 <_printf_i+0x28>
 8004030:	2f62      	cmp	r7, #98	@ 0x62
 8004032:	d80a      	bhi.n	800404a <_printf_i+0x32>
 8004034:	2f00      	cmp	r7, #0
 8004036:	f000 80d3 	beq.w	80041e0 <_printf_i+0x1c8>
 800403a:	2f58      	cmp	r7, #88	@ 0x58
 800403c:	f000 80ba 	beq.w	80041b4 <_printf_i+0x19c>
 8004040:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004044:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004048:	e03a      	b.n	80040c0 <_printf_i+0xa8>
 800404a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800404e:	2b15      	cmp	r3, #21
 8004050:	d8f6      	bhi.n	8004040 <_printf_i+0x28>
 8004052:	a101      	add	r1, pc, #4	@ (adr r1, 8004058 <_printf_i+0x40>)
 8004054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004058:	080040b1 	.word	0x080040b1
 800405c:	080040c5 	.word	0x080040c5
 8004060:	08004041 	.word	0x08004041
 8004064:	08004041 	.word	0x08004041
 8004068:	08004041 	.word	0x08004041
 800406c:	08004041 	.word	0x08004041
 8004070:	080040c5 	.word	0x080040c5
 8004074:	08004041 	.word	0x08004041
 8004078:	08004041 	.word	0x08004041
 800407c:	08004041 	.word	0x08004041
 8004080:	08004041 	.word	0x08004041
 8004084:	080041c7 	.word	0x080041c7
 8004088:	080040ef 	.word	0x080040ef
 800408c:	08004181 	.word	0x08004181
 8004090:	08004041 	.word	0x08004041
 8004094:	08004041 	.word	0x08004041
 8004098:	080041e9 	.word	0x080041e9
 800409c:	08004041 	.word	0x08004041
 80040a0:	080040ef 	.word	0x080040ef
 80040a4:	08004041 	.word	0x08004041
 80040a8:	08004041 	.word	0x08004041
 80040ac:	08004189 	.word	0x08004189
 80040b0:	6833      	ldr	r3, [r6, #0]
 80040b2:	1d1a      	adds	r2, r3, #4
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6032      	str	r2, [r6, #0]
 80040b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80040c0:	2301      	movs	r3, #1
 80040c2:	e09e      	b.n	8004202 <_printf_i+0x1ea>
 80040c4:	6833      	ldr	r3, [r6, #0]
 80040c6:	6820      	ldr	r0, [r4, #0]
 80040c8:	1d19      	adds	r1, r3, #4
 80040ca:	6031      	str	r1, [r6, #0]
 80040cc:	0606      	lsls	r6, r0, #24
 80040ce:	d501      	bpl.n	80040d4 <_printf_i+0xbc>
 80040d0:	681d      	ldr	r5, [r3, #0]
 80040d2:	e003      	b.n	80040dc <_printf_i+0xc4>
 80040d4:	0645      	lsls	r5, r0, #25
 80040d6:	d5fb      	bpl.n	80040d0 <_printf_i+0xb8>
 80040d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80040dc:	2d00      	cmp	r5, #0
 80040de:	da03      	bge.n	80040e8 <_printf_i+0xd0>
 80040e0:	232d      	movs	r3, #45	@ 0x2d
 80040e2:	426d      	negs	r5, r5
 80040e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040e8:	230a      	movs	r3, #10
 80040ea:	4859      	ldr	r0, [pc, #356]	@ (8004250 <_printf_i+0x238>)
 80040ec:	e011      	b.n	8004112 <_printf_i+0xfa>
 80040ee:	6821      	ldr	r1, [r4, #0]
 80040f0:	6833      	ldr	r3, [r6, #0]
 80040f2:	0608      	lsls	r0, r1, #24
 80040f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80040f8:	d402      	bmi.n	8004100 <_printf_i+0xe8>
 80040fa:	0649      	lsls	r1, r1, #25
 80040fc:	bf48      	it	mi
 80040fe:	b2ad      	uxthmi	r5, r5
 8004100:	2f6f      	cmp	r7, #111	@ 0x6f
 8004102:	6033      	str	r3, [r6, #0]
 8004104:	bf14      	ite	ne
 8004106:	230a      	movne	r3, #10
 8004108:	2308      	moveq	r3, #8
 800410a:	4851      	ldr	r0, [pc, #324]	@ (8004250 <_printf_i+0x238>)
 800410c:	2100      	movs	r1, #0
 800410e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004112:	6866      	ldr	r6, [r4, #4]
 8004114:	2e00      	cmp	r6, #0
 8004116:	bfa8      	it	ge
 8004118:	6821      	ldrge	r1, [r4, #0]
 800411a:	60a6      	str	r6, [r4, #8]
 800411c:	bfa4      	itt	ge
 800411e:	f021 0104 	bicge.w	r1, r1, #4
 8004122:	6021      	strge	r1, [r4, #0]
 8004124:	b90d      	cbnz	r5, 800412a <_printf_i+0x112>
 8004126:	2e00      	cmp	r6, #0
 8004128:	d04b      	beq.n	80041c2 <_printf_i+0x1aa>
 800412a:	4616      	mov	r6, r2
 800412c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004130:	fb03 5711 	mls	r7, r3, r1, r5
 8004134:	5dc7      	ldrb	r7, [r0, r7]
 8004136:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800413a:	462f      	mov	r7, r5
 800413c:	42bb      	cmp	r3, r7
 800413e:	460d      	mov	r5, r1
 8004140:	d9f4      	bls.n	800412c <_printf_i+0x114>
 8004142:	2b08      	cmp	r3, #8
 8004144:	d10b      	bne.n	800415e <_printf_i+0x146>
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	07df      	lsls	r7, r3, #31
 800414a:	d508      	bpl.n	800415e <_printf_i+0x146>
 800414c:	6923      	ldr	r3, [r4, #16]
 800414e:	6861      	ldr	r1, [r4, #4]
 8004150:	4299      	cmp	r1, r3
 8004152:	bfde      	ittt	le
 8004154:	2330      	movle	r3, #48	@ 0x30
 8004156:	f806 3c01 	strble.w	r3, [r6, #-1]
 800415a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800415e:	1b92      	subs	r2, r2, r6
 8004160:	6122      	str	r2, [r4, #16]
 8004162:	464b      	mov	r3, r9
 8004164:	4621      	mov	r1, r4
 8004166:	4640      	mov	r0, r8
 8004168:	f8cd a000 	str.w	sl, [sp]
 800416c:	aa03      	add	r2, sp, #12
 800416e:	f7ff fee1 	bl	8003f34 <_printf_common>
 8004172:	3001      	adds	r0, #1
 8004174:	d14a      	bne.n	800420c <_printf_i+0x1f4>
 8004176:	f04f 30ff 	mov.w	r0, #4294967295
 800417a:	b004      	add	sp, #16
 800417c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	f043 0320 	orr.w	r3, r3, #32
 8004186:	6023      	str	r3, [r4, #0]
 8004188:	2778      	movs	r7, #120	@ 0x78
 800418a:	4832      	ldr	r0, [pc, #200]	@ (8004254 <_printf_i+0x23c>)
 800418c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004190:	6823      	ldr	r3, [r4, #0]
 8004192:	6831      	ldr	r1, [r6, #0]
 8004194:	061f      	lsls	r7, r3, #24
 8004196:	f851 5b04 	ldr.w	r5, [r1], #4
 800419a:	d402      	bmi.n	80041a2 <_printf_i+0x18a>
 800419c:	065f      	lsls	r7, r3, #25
 800419e:	bf48      	it	mi
 80041a0:	b2ad      	uxthmi	r5, r5
 80041a2:	6031      	str	r1, [r6, #0]
 80041a4:	07d9      	lsls	r1, r3, #31
 80041a6:	bf44      	itt	mi
 80041a8:	f043 0320 	orrmi.w	r3, r3, #32
 80041ac:	6023      	strmi	r3, [r4, #0]
 80041ae:	b11d      	cbz	r5, 80041b8 <_printf_i+0x1a0>
 80041b0:	2310      	movs	r3, #16
 80041b2:	e7ab      	b.n	800410c <_printf_i+0xf4>
 80041b4:	4826      	ldr	r0, [pc, #152]	@ (8004250 <_printf_i+0x238>)
 80041b6:	e7e9      	b.n	800418c <_printf_i+0x174>
 80041b8:	6823      	ldr	r3, [r4, #0]
 80041ba:	f023 0320 	bic.w	r3, r3, #32
 80041be:	6023      	str	r3, [r4, #0]
 80041c0:	e7f6      	b.n	80041b0 <_printf_i+0x198>
 80041c2:	4616      	mov	r6, r2
 80041c4:	e7bd      	b.n	8004142 <_printf_i+0x12a>
 80041c6:	6833      	ldr	r3, [r6, #0]
 80041c8:	6825      	ldr	r5, [r4, #0]
 80041ca:	1d18      	adds	r0, r3, #4
 80041cc:	6961      	ldr	r1, [r4, #20]
 80041ce:	6030      	str	r0, [r6, #0]
 80041d0:	062e      	lsls	r6, r5, #24
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	d501      	bpl.n	80041da <_printf_i+0x1c2>
 80041d6:	6019      	str	r1, [r3, #0]
 80041d8:	e002      	b.n	80041e0 <_printf_i+0x1c8>
 80041da:	0668      	lsls	r0, r5, #25
 80041dc:	d5fb      	bpl.n	80041d6 <_printf_i+0x1be>
 80041de:	8019      	strh	r1, [r3, #0]
 80041e0:	2300      	movs	r3, #0
 80041e2:	4616      	mov	r6, r2
 80041e4:	6123      	str	r3, [r4, #16]
 80041e6:	e7bc      	b.n	8004162 <_printf_i+0x14a>
 80041e8:	6833      	ldr	r3, [r6, #0]
 80041ea:	2100      	movs	r1, #0
 80041ec:	1d1a      	adds	r2, r3, #4
 80041ee:	6032      	str	r2, [r6, #0]
 80041f0:	681e      	ldr	r6, [r3, #0]
 80041f2:	6862      	ldr	r2, [r4, #4]
 80041f4:	4630      	mov	r0, r6
 80041f6:	f000 f9e8 	bl	80045ca <memchr>
 80041fa:	b108      	cbz	r0, 8004200 <_printf_i+0x1e8>
 80041fc:	1b80      	subs	r0, r0, r6
 80041fe:	6060      	str	r0, [r4, #4]
 8004200:	6863      	ldr	r3, [r4, #4]
 8004202:	6123      	str	r3, [r4, #16]
 8004204:	2300      	movs	r3, #0
 8004206:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800420a:	e7aa      	b.n	8004162 <_printf_i+0x14a>
 800420c:	4632      	mov	r2, r6
 800420e:	4649      	mov	r1, r9
 8004210:	4640      	mov	r0, r8
 8004212:	6923      	ldr	r3, [r4, #16]
 8004214:	47d0      	blx	sl
 8004216:	3001      	adds	r0, #1
 8004218:	d0ad      	beq.n	8004176 <_printf_i+0x15e>
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	079b      	lsls	r3, r3, #30
 800421e:	d413      	bmi.n	8004248 <_printf_i+0x230>
 8004220:	68e0      	ldr	r0, [r4, #12]
 8004222:	9b03      	ldr	r3, [sp, #12]
 8004224:	4298      	cmp	r0, r3
 8004226:	bfb8      	it	lt
 8004228:	4618      	movlt	r0, r3
 800422a:	e7a6      	b.n	800417a <_printf_i+0x162>
 800422c:	2301      	movs	r3, #1
 800422e:	4632      	mov	r2, r6
 8004230:	4649      	mov	r1, r9
 8004232:	4640      	mov	r0, r8
 8004234:	47d0      	blx	sl
 8004236:	3001      	adds	r0, #1
 8004238:	d09d      	beq.n	8004176 <_printf_i+0x15e>
 800423a:	3501      	adds	r5, #1
 800423c:	68e3      	ldr	r3, [r4, #12]
 800423e:	9903      	ldr	r1, [sp, #12]
 8004240:	1a5b      	subs	r3, r3, r1
 8004242:	42ab      	cmp	r3, r5
 8004244:	dcf2      	bgt.n	800422c <_printf_i+0x214>
 8004246:	e7eb      	b.n	8004220 <_printf_i+0x208>
 8004248:	2500      	movs	r5, #0
 800424a:	f104 0619 	add.w	r6, r4, #25
 800424e:	e7f5      	b.n	800423c <_printf_i+0x224>
 8004250:	08007504 	.word	0x08007504
 8004254:	08007515 	.word	0x08007515

08004258 <std>:
 8004258:	2300      	movs	r3, #0
 800425a:	b510      	push	{r4, lr}
 800425c:	4604      	mov	r4, r0
 800425e:	e9c0 3300 	strd	r3, r3, [r0]
 8004262:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004266:	6083      	str	r3, [r0, #8]
 8004268:	8181      	strh	r1, [r0, #12]
 800426a:	6643      	str	r3, [r0, #100]	@ 0x64
 800426c:	81c2      	strh	r2, [r0, #14]
 800426e:	6183      	str	r3, [r0, #24]
 8004270:	4619      	mov	r1, r3
 8004272:	2208      	movs	r2, #8
 8004274:	305c      	adds	r0, #92	@ 0x5c
 8004276:	f000 f928 	bl	80044ca <memset>
 800427a:	4b0d      	ldr	r3, [pc, #52]	@ (80042b0 <std+0x58>)
 800427c:	6224      	str	r4, [r4, #32]
 800427e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004280:	4b0c      	ldr	r3, [pc, #48]	@ (80042b4 <std+0x5c>)
 8004282:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004284:	4b0c      	ldr	r3, [pc, #48]	@ (80042b8 <std+0x60>)
 8004286:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004288:	4b0c      	ldr	r3, [pc, #48]	@ (80042bc <std+0x64>)
 800428a:	6323      	str	r3, [r4, #48]	@ 0x30
 800428c:	4b0c      	ldr	r3, [pc, #48]	@ (80042c0 <std+0x68>)
 800428e:	429c      	cmp	r4, r3
 8004290:	d006      	beq.n	80042a0 <std+0x48>
 8004292:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004296:	4294      	cmp	r4, r2
 8004298:	d002      	beq.n	80042a0 <std+0x48>
 800429a:	33d0      	adds	r3, #208	@ 0xd0
 800429c:	429c      	cmp	r4, r3
 800429e:	d105      	bne.n	80042ac <std+0x54>
 80042a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80042a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042a8:	f000 b98c 	b.w	80045c4 <__retarget_lock_init_recursive>
 80042ac:	bd10      	pop	{r4, pc}
 80042ae:	bf00      	nop
 80042b0:	08004445 	.word	0x08004445
 80042b4:	08004467 	.word	0x08004467
 80042b8:	0800449f 	.word	0x0800449f
 80042bc:	080044c3 	.word	0x080044c3
 80042c0:	20000290 	.word	0x20000290

080042c4 <stdio_exit_handler>:
 80042c4:	4a02      	ldr	r2, [pc, #8]	@ (80042d0 <stdio_exit_handler+0xc>)
 80042c6:	4903      	ldr	r1, [pc, #12]	@ (80042d4 <stdio_exit_handler+0x10>)
 80042c8:	4803      	ldr	r0, [pc, #12]	@ (80042d8 <stdio_exit_handler+0x14>)
 80042ca:	f000 b869 	b.w	80043a0 <_fwalk_sglue>
 80042ce:	bf00      	nop
 80042d0:	2000000c 	.word	0x2000000c
 80042d4:	08005f35 	.word	0x08005f35
 80042d8:	2000001c 	.word	0x2000001c

080042dc <cleanup_stdio>:
 80042dc:	6841      	ldr	r1, [r0, #4]
 80042de:	4b0c      	ldr	r3, [pc, #48]	@ (8004310 <cleanup_stdio+0x34>)
 80042e0:	b510      	push	{r4, lr}
 80042e2:	4299      	cmp	r1, r3
 80042e4:	4604      	mov	r4, r0
 80042e6:	d001      	beq.n	80042ec <cleanup_stdio+0x10>
 80042e8:	f001 fe24 	bl	8005f34 <_fflush_r>
 80042ec:	68a1      	ldr	r1, [r4, #8]
 80042ee:	4b09      	ldr	r3, [pc, #36]	@ (8004314 <cleanup_stdio+0x38>)
 80042f0:	4299      	cmp	r1, r3
 80042f2:	d002      	beq.n	80042fa <cleanup_stdio+0x1e>
 80042f4:	4620      	mov	r0, r4
 80042f6:	f001 fe1d 	bl	8005f34 <_fflush_r>
 80042fa:	68e1      	ldr	r1, [r4, #12]
 80042fc:	4b06      	ldr	r3, [pc, #24]	@ (8004318 <cleanup_stdio+0x3c>)
 80042fe:	4299      	cmp	r1, r3
 8004300:	d004      	beq.n	800430c <cleanup_stdio+0x30>
 8004302:	4620      	mov	r0, r4
 8004304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004308:	f001 be14 	b.w	8005f34 <_fflush_r>
 800430c:	bd10      	pop	{r4, pc}
 800430e:	bf00      	nop
 8004310:	20000290 	.word	0x20000290
 8004314:	200002f8 	.word	0x200002f8
 8004318:	20000360 	.word	0x20000360

0800431c <global_stdio_init.part.0>:
 800431c:	b510      	push	{r4, lr}
 800431e:	4b0b      	ldr	r3, [pc, #44]	@ (800434c <global_stdio_init.part.0+0x30>)
 8004320:	4c0b      	ldr	r4, [pc, #44]	@ (8004350 <global_stdio_init.part.0+0x34>)
 8004322:	4a0c      	ldr	r2, [pc, #48]	@ (8004354 <global_stdio_init.part.0+0x38>)
 8004324:	4620      	mov	r0, r4
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	2104      	movs	r1, #4
 800432a:	2200      	movs	r2, #0
 800432c:	f7ff ff94 	bl	8004258 <std>
 8004330:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004334:	2201      	movs	r2, #1
 8004336:	2109      	movs	r1, #9
 8004338:	f7ff ff8e 	bl	8004258 <std>
 800433c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004340:	2202      	movs	r2, #2
 8004342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004346:	2112      	movs	r1, #18
 8004348:	f7ff bf86 	b.w	8004258 <std>
 800434c:	200003c8 	.word	0x200003c8
 8004350:	20000290 	.word	0x20000290
 8004354:	080042c5 	.word	0x080042c5

08004358 <__sfp_lock_acquire>:
 8004358:	4801      	ldr	r0, [pc, #4]	@ (8004360 <__sfp_lock_acquire+0x8>)
 800435a:	f000 b934 	b.w	80045c6 <__retarget_lock_acquire_recursive>
 800435e:	bf00      	nop
 8004360:	200003d1 	.word	0x200003d1

08004364 <__sfp_lock_release>:
 8004364:	4801      	ldr	r0, [pc, #4]	@ (800436c <__sfp_lock_release+0x8>)
 8004366:	f000 b92f 	b.w	80045c8 <__retarget_lock_release_recursive>
 800436a:	bf00      	nop
 800436c:	200003d1 	.word	0x200003d1

08004370 <__sinit>:
 8004370:	b510      	push	{r4, lr}
 8004372:	4604      	mov	r4, r0
 8004374:	f7ff fff0 	bl	8004358 <__sfp_lock_acquire>
 8004378:	6a23      	ldr	r3, [r4, #32]
 800437a:	b11b      	cbz	r3, 8004384 <__sinit+0x14>
 800437c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004380:	f7ff bff0 	b.w	8004364 <__sfp_lock_release>
 8004384:	4b04      	ldr	r3, [pc, #16]	@ (8004398 <__sinit+0x28>)
 8004386:	6223      	str	r3, [r4, #32]
 8004388:	4b04      	ldr	r3, [pc, #16]	@ (800439c <__sinit+0x2c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1f5      	bne.n	800437c <__sinit+0xc>
 8004390:	f7ff ffc4 	bl	800431c <global_stdio_init.part.0>
 8004394:	e7f2      	b.n	800437c <__sinit+0xc>
 8004396:	bf00      	nop
 8004398:	080042dd 	.word	0x080042dd
 800439c:	200003c8 	.word	0x200003c8

080043a0 <_fwalk_sglue>:
 80043a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043a4:	4607      	mov	r7, r0
 80043a6:	4688      	mov	r8, r1
 80043a8:	4614      	mov	r4, r2
 80043aa:	2600      	movs	r6, #0
 80043ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043b0:	f1b9 0901 	subs.w	r9, r9, #1
 80043b4:	d505      	bpl.n	80043c2 <_fwalk_sglue+0x22>
 80043b6:	6824      	ldr	r4, [r4, #0]
 80043b8:	2c00      	cmp	r4, #0
 80043ba:	d1f7      	bne.n	80043ac <_fwalk_sglue+0xc>
 80043bc:	4630      	mov	r0, r6
 80043be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043c2:	89ab      	ldrh	r3, [r5, #12]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d907      	bls.n	80043d8 <_fwalk_sglue+0x38>
 80043c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043cc:	3301      	adds	r3, #1
 80043ce:	d003      	beq.n	80043d8 <_fwalk_sglue+0x38>
 80043d0:	4629      	mov	r1, r5
 80043d2:	4638      	mov	r0, r7
 80043d4:	47c0      	blx	r8
 80043d6:	4306      	orrs	r6, r0
 80043d8:	3568      	adds	r5, #104	@ 0x68
 80043da:	e7e9      	b.n	80043b0 <_fwalk_sglue+0x10>

080043dc <sniprintf>:
 80043dc:	b40c      	push	{r2, r3}
 80043de:	b530      	push	{r4, r5, lr}
 80043e0:	4b17      	ldr	r3, [pc, #92]	@ (8004440 <sniprintf+0x64>)
 80043e2:	1e0c      	subs	r4, r1, #0
 80043e4:	681d      	ldr	r5, [r3, #0]
 80043e6:	b09d      	sub	sp, #116	@ 0x74
 80043e8:	da08      	bge.n	80043fc <sniprintf+0x20>
 80043ea:	238b      	movs	r3, #139	@ 0x8b
 80043ec:	f04f 30ff 	mov.w	r0, #4294967295
 80043f0:	602b      	str	r3, [r5, #0]
 80043f2:	b01d      	add	sp, #116	@ 0x74
 80043f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043f8:	b002      	add	sp, #8
 80043fa:	4770      	bx	lr
 80043fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004400:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004404:	bf0c      	ite	eq
 8004406:	4623      	moveq	r3, r4
 8004408:	f104 33ff 	addne.w	r3, r4, #4294967295
 800440c:	9304      	str	r3, [sp, #16]
 800440e:	9307      	str	r3, [sp, #28]
 8004410:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004414:	9002      	str	r0, [sp, #8]
 8004416:	9006      	str	r0, [sp, #24]
 8004418:	f8ad 3016 	strh.w	r3, [sp, #22]
 800441c:	4628      	mov	r0, r5
 800441e:	ab21      	add	r3, sp, #132	@ 0x84
 8004420:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004422:	a902      	add	r1, sp, #8
 8004424:	9301      	str	r3, [sp, #4]
 8004426:	f001 fc09 	bl	8005c3c <_svfiprintf_r>
 800442a:	1c43      	adds	r3, r0, #1
 800442c:	bfbc      	itt	lt
 800442e:	238b      	movlt	r3, #139	@ 0x8b
 8004430:	602b      	strlt	r3, [r5, #0]
 8004432:	2c00      	cmp	r4, #0
 8004434:	d0dd      	beq.n	80043f2 <sniprintf+0x16>
 8004436:	2200      	movs	r2, #0
 8004438:	9b02      	ldr	r3, [sp, #8]
 800443a:	701a      	strb	r2, [r3, #0]
 800443c:	e7d9      	b.n	80043f2 <sniprintf+0x16>
 800443e:	bf00      	nop
 8004440:	20000018 	.word	0x20000018

08004444 <__sread>:
 8004444:	b510      	push	{r4, lr}
 8004446:	460c      	mov	r4, r1
 8004448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800444c:	f000 f86c 	bl	8004528 <_read_r>
 8004450:	2800      	cmp	r0, #0
 8004452:	bfab      	itete	ge
 8004454:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004456:	89a3      	ldrhlt	r3, [r4, #12]
 8004458:	181b      	addge	r3, r3, r0
 800445a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800445e:	bfac      	ite	ge
 8004460:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004462:	81a3      	strhlt	r3, [r4, #12]
 8004464:	bd10      	pop	{r4, pc}

08004466 <__swrite>:
 8004466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800446a:	461f      	mov	r7, r3
 800446c:	898b      	ldrh	r3, [r1, #12]
 800446e:	4605      	mov	r5, r0
 8004470:	05db      	lsls	r3, r3, #23
 8004472:	460c      	mov	r4, r1
 8004474:	4616      	mov	r6, r2
 8004476:	d505      	bpl.n	8004484 <__swrite+0x1e>
 8004478:	2302      	movs	r3, #2
 800447a:	2200      	movs	r2, #0
 800447c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004480:	f000 f840 	bl	8004504 <_lseek_r>
 8004484:	89a3      	ldrh	r3, [r4, #12]
 8004486:	4632      	mov	r2, r6
 8004488:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800448c:	81a3      	strh	r3, [r4, #12]
 800448e:	4628      	mov	r0, r5
 8004490:	463b      	mov	r3, r7
 8004492:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800449a:	f000 b857 	b.w	800454c <_write_r>

0800449e <__sseek>:
 800449e:	b510      	push	{r4, lr}
 80044a0:	460c      	mov	r4, r1
 80044a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044a6:	f000 f82d 	bl	8004504 <_lseek_r>
 80044aa:	1c43      	adds	r3, r0, #1
 80044ac:	89a3      	ldrh	r3, [r4, #12]
 80044ae:	bf15      	itete	ne
 80044b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80044b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80044b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80044ba:	81a3      	strheq	r3, [r4, #12]
 80044bc:	bf18      	it	ne
 80044be:	81a3      	strhne	r3, [r4, #12]
 80044c0:	bd10      	pop	{r4, pc}

080044c2 <__sclose>:
 80044c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044c6:	f000 b80d 	b.w	80044e4 <_close_r>

080044ca <memset>:
 80044ca:	4603      	mov	r3, r0
 80044cc:	4402      	add	r2, r0
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d100      	bne.n	80044d4 <memset+0xa>
 80044d2:	4770      	bx	lr
 80044d4:	f803 1b01 	strb.w	r1, [r3], #1
 80044d8:	e7f9      	b.n	80044ce <memset+0x4>
	...

080044dc <_localeconv_r>:
 80044dc:	4800      	ldr	r0, [pc, #0]	@ (80044e0 <_localeconv_r+0x4>)
 80044de:	4770      	bx	lr
 80044e0:	20000158 	.word	0x20000158

080044e4 <_close_r>:
 80044e4:	b538      	push	{r3, r4, r5, lr}
 80044e6:	2300      	movs	r3, #0
 80044e8:	4d05      	ldr	r5, [pc, #20]	@ (8004500 <_close_r+0x1c>)
 80044ea:	4604      	mov	r4, r0
 80044ec:	4608      	mov	r0, r1
 80044ee:	602b      	str	r3, [r5, #0]
 80044f0:	f7fc ff9f 	bl	8001432 <_close>
 80044f4:	1c43      	adds	r3, r0, #1
 80044f6:	d102      	bne.n	80044fe <_close_r+0x1a>
 80044f8:	682b      	ldr	r3, [r5, #0]
 80044fa:	b103      	cbz	r3, 80044fe <_close_r+0x1a>
 80044fc:	6023      	str	r3, [r4, #0]
 80044fe:	bd38      	pop	{r3, r4, r5, pc}
 8004500:	200003cc 	.word	0x200003cc

08004504 <_lseek_r>:
 8004504:	b538      	push	{r3, r4, r5, lr}
 8004506:	4604      	mov	r4, r0
 8004508:	4608      	mov	r0, r1
 800450a:	4611      	mov	r1, r2
 800450c:	2200      	movs	r2, #0
 800450e:	4d05      	ldr	r5, [pc, #20]	@ (8004524 <_lseek_r+0x20>)
 8004510:	602a      	str	r2, [r5, #0]
 8004512:	461a      	mov	r2, r3
 8004514:	f7fc ffb1 	bl	800147a <_lseek>
 8004518:	1c43      	adds	r3, r0, #1
 800451a:	d102      	bne.n	8004522 <_lseek_r+0x1e>
 800451c:	682b      	ldr	r3, [r5, #0]
 800451e:	b103      	cbz	r3, 8004522 <_lseek_r+0x1e>
 8004520:	6023      	str	r3, [r4, #0]
 8004522:	bd38      	pop	{r3, r4, r5, pc}
 8004524:	200003cc 	.word	0x200003cc

08004528 <_read_r>:
 8004528:	b538      	push	{r3, r4, r5, lr}
 800452a:	4604      	mov	r4, r0
 800452c:	4608      	mov	r0, r1
 800452e:	4611      	mov	r1, r2
 8004530:	2200      	movs	r2, #0
 8004532:	4d05      	ldr	r5, [pc, #20]	@ (8004548 <_read_r+0x20>)
 8004534:	602a      	str	r2, [r5, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	f7fc ff42 	bl	80013c0 <_read>
 800453c:	1c43      	adds	r3, r0, #1
 800453e:	d102      	bne.n	8004546 <_read_r+0x1e>
 8004540:	682b      	ldr	r3, [r5, #0]
 8004542:	b103      	cbz	r3, 8004546 <_read_r+0x1e>
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	bd38      	pop	{r3, r4, r5, pc}
 8004548:	200003cc 	.word	0x200003cc

0800454c <_write_r>:
 800454c:	b538      	push	{r3, r4, r5, lr}
 800454e:	4604      	mov	r4, r0
 8004550:	4608      	mov	r0, r1
 8004552:	4611      	mov	r1, r2
 8004554:	2200      	movs	r2, #0
 8004556:	4d05      	ldr	r5, [pc, #20]	@ (800456c <_write_r+0x20>)
 8004558:	602a      	str	r2, [r5, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	f7fc ff4d 	bl	80013fa <_write>
 8004560:	1c43      	adds	r3, r0, #1
 8004562:	d102      	bne.n	800456a <_write_r+0x1e>
 8004564:	682b      	ldr	r3, [r5, #0]
 8004566:	b103      	cbz	r3, 800456a <_write_r+0x1e>
 8004568:	6023      	str	r3, [r4, #0]
 800456a:	bd38      	pop	{r3, r4, r5, pc}
 800456c:	200003cc 	.word	0x200003cc

08004570 <__errno>:
 8004570:	4b01      	ldr	r3, [pc, #4]	@ (8004578 <__errno+0x8>)
 8004572:	6818      	ldr	r0, [r3, #0]
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	20000018 	.word	0x20000018

0800457c <__libc_init_array>:
 800457c:	b570      	push	{r4, r5, r6, lr}
 800457e:	2600      	movs	r6, #0
 8004580:	4d0c      	ldr	r5, [pc, #48]	@ (80045b4 <__libc_init_array+0x38>)
 8004582:	4c0d      	ldr	r4, [pc, #52]	@ (80045b8 <__libc_init_array+0x3c>)
 8004584:	1b64      	subs	r4, r4, r5
 8004586:	10a4      	asrs	r4, r4, #2
 8004588:	42a6      	cmp	r6, r4
 800458a:	d109      	bne.n	80045a0 <__libc_init_array+0x24>
 800458c:	f002 ff7c 	bl	8007488 <_init>
 8004590:	2600      	movs	r6, #0
 8004592:	4d0a      	ldr	r5, [pc, #40]	@ (80045bc <__libc_init_array+0x40>)
 8004594:	4c0a      	ldr	r4, [pc, #40]	@ (80045c0 <__libc_init_array+0x44>)
 8004596:	1b64      	subs	r4, r4, r5
 8004598:	10a4      	asrs	r4, r4, #2
 800459a:	42a6      	cmp	r6, r4
 800459c:	d105      	bne.n	80045aa <__libc_init_array+0x2e>
 800459e:	bd70      	pop	{r4, r5, r6, pc}
 80045a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045a4:	4798      	blx	r3
 80045a6:	3601      	adds	r6, #1
 80045a8:	e7ee      	b.n	8004588 <__libc_init_array+0xc>
 80045aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ae:	4798      	blx	r3
 80045b0:	3601      	adds	r6, #1
 80045b2:	e7f2      	b.n	800459a <__libc_init_array+0x1e>
 80045b4:	08007898 	.word	0x08007898
 80045b8:	08007898 	.word	0x08007898
 80045bc:	08007898 	.word	0x08007898
 80045c0:	0800789c 	.word	0x0800789c

080045c4 <__retarget_lock_init_recursive>:
 80045c4:	4770      	bx	lr

080045c6 <__retarget_lock_acquire_recursive>:
 80045c6:	4770      	bx	lr

080045c8 <__retarget_lock_release_recursive>:
 80045c8:	4770      	bx	lr

080045ca <memchr>:
 80045ca:	4603      	mov	r3, r0
 80045cc:	b510      	push	{r4, lr}
 80045ce:	b2c9      	uxtb	r1, r1
 80045d0:	4402      	add	r2, r0
 80045d2:	4293      	cmp	r3, r2
 80045d4:	4618      	mov	r0, r3
 80045d6:	d101      	bne.n	80045dc <memchr+0x12>
 80045d8:	2000      	movs	r0, #0
 80045da:	e003      	b.n	80045e4 <memchr+0x1a>
 80045dc:	7804      	ldrb	r4, [r0, #0]
 80045de:	3301      	adds	r3, #1
 80045e0:	428c      	cmp	r4, r1
 80045e2:	d1f6      	bne.n	80045d2 <memchr+0x8>
 80045e4:	bd10      	pop	{r4, pc}

080045e6 <quorem>:
 80045e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ea:	6903      	ldr	r3, [r0, #16]
 80045ec:	690c      	ldr	r4, [r1, #16]
 80045ee:	4607      	mov	r7, r0
 80045f0:	42a3      	cmp	r3, r4
 80045f2:	db7e      	blt.n	80046f2 <quorem+0x10c>
 80045f4:	3c01      	subs	r4, #1
 80045f6:	00a3      	lsls	r3, r4, #2
 80045f8:	f100 0514 	add.w	r5, r0, #20
 80045fc:	f101 0814 	add.w	r8, r1, #20
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004606:	9301      	str	r3, [sp, #4]
 8004608:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800460c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004610:	3301      	adds	r3, #1
 8004612:	429a      	cmp	r2, r3
 8004614:	fbb2 f6f3 	udiv	r6, r2, r3
 8004618:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800461c:	d32e      	bcc.n	800467c <quorem+0x96>
 800461e:	f04f 0a00 	mov.w	sl, #0
 8004622:	46c4      	mov	ip, r8
 8004624:	46ae      	mov	lr, r5
 8004626:	46d3      	mov	fp, sl
 8004628:	f85c 3b04 	ldr.w	r3, [ip], #4
 800462c:	b298      	uxth	r0, r3
 800462e:	fb06 a000 	mla	r0, r6, r0, sl
 8004632:	0c1b      	lsrs	r3, r3, #16
 8004634:	0c02      	lsrs	r2, r0, #16
 8004636:	fb06 2303 	mla	r3, r6, r3, r2
 800463a:	f8de 2000 	ldr.w	r2, [lr]
 800463e:	b280      	uxth	r0, r0
 8004640:	b292      	uxth	r2, r2
 8004642:	1a12      	subs	r2, r2, r0
 8004644:	445a      	add	r2, fp
 8004646:	f8de 0000 	ldr.w	r0, [lr]
 800464a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800464e:	b29b      	uxth	r3, r3
 8004650:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004654:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004658:	b292      	uxth	r2, r2
 800465a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800465e:	45e1      	cmp	r9, ip
 8004660:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004664:	f84e 2b04 	str.w	r2, [lr], #4
 8004668:	d2de      	bcs.n	8004628 <quorem+0x42>
 800466a:	9b00      	ldr	r3, [sp, #0]
 800466c:	58eb      	ldr	r3, [r5, r3]
 800466e:	b92b      	cbnz	r3, 800467c <quorem+0x96>
 8004670:	9b01      	ldr	r3, [sp, #4]
 8004672:	3b04      	subs	r3, #4
 8004674:	429d      	cmp	r5, r3
 8004676:	461a      	mov	r2, r3
 8004678:	d32f      	bcc.n	80046da <quorem+0xf4>
 800467a:	613c      	str	r4, [r7, #16]
 800467c:	4638      	mov	r0, r7
 800467e:	f001 f979 	bl	8005974 <__mcmp>
 8004682:	2800      	cmp	r0, #0
 8004684:	db25      	blt.n	80046d2 <quorem+0xec>
 8004686:	4629      	mov	r1, r5
 8004688:	2000      	movs	r0, #0
 800468a:	f858 2b04 	ldr.w	r2, [r8], #4
 800468e:	f8d1 c000 	ldr.w	ip, [r1]
 8004692:	fa1f fe82 	uxth.w	lr, r2
 8004696:	fa1f f38c 	uxth.w	r3, ip
 800469a:	eba3 030e 	sub.w	r3, r3, lr
 800469e:	4403      	add	r3, r0
 80046a0:	0c12      	lsrs	r2, r2, #16
 80046a2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80046a6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046b0:	45c1      	cmp	r9, r8
 80046b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80046b6:	f841 3b04 	str.w	r3, [r1], #4
 80046ba:	d2e6      	bcs.n	800468a <quorem+0xa4>
 80046bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80046c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80046c4:	b922      	cbnz	r2, 80046d0 <quorem+0xea>
 80046c6:	3b04      	subs	r3, #4
 80046c8:	429d      	cmp	r5, r3
 80046ca:	461a      	mov	r2, r3
 80046cc:	d30b      	bcc.n	80046e6 <quorem+0x100>
 80046ce:	613c      	str	r4, [r7, #16]
 80046d0:	3601      	adds	r6, #1
 80046d2:	4630      	mov	r0, r6
 80046d4:	b003      	add	sp, #12
 80046d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046da:	6812      	ldr	r2, [r2, #0]
 80046dc:	3b04      	subs	r3, #4
 80046de:	2a00      	cmp	r2, #0
 80046e0:	d1cb      	bne.n	800467a <quorem+0x94>
 80046e2:	3c01      	subs	r4, #1
 80046e4:	e7c6      	b.n	8004674 <quorem+0x8e>
 80046e6:	6812      	ldr	r2, [r2, #0]
 80046e8:	3b04      	subs	r3, #4
 80046ea:	2a00      	cmp	r2, #0
 80046ec:	d1ef      	bne.n	80046ce <quorem+0xe8>
 80046ee:	3c01      	subs	r4, #1
 80046f0:	e7ea      	b.n	80046c8 <quorem+0xe2>
 80046f2:	2000      	movs	r0, #0
 80046f4:	e7ee      	b.n	80046d4 <quorem+0xee>
	...

080046f8 <_dtoa_r>:
 80046f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046fc:	4614      	mov	r4, r2
 80046fe:	461d      	mov	r5, r3
 8004700:	69c7      	ldr	r7, [r0, #28]
 8004702:	b097      	sub	sp, #92	@ 0x5c
 8004704:	4683      	mov	fp, r0
 8004706:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800470a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800470c:	b97f      	cbnz	r7, 800472e <_dtoa_r+0x36>
 800470e:	2010      	movs	r0, #16
 8004710:	f000 fe02 	bl	8005318 <malloc>
 8004714:	4602      	mov	r2, r0
 8004716:	f8cb 001c 	str.w	r0, [fp, #28]
 800471a:	b920      	cbnz	r0, 8004726 <_dtoa_r+0x2e>
 800471c:	21ef      	movs	r1, #239	@ 0xef
 800471e:	4ba8      	ldr	r3, [pc, #672]	@ (80049c0 <_dtoa_r+0x2c8>)
 8004720:	48a8      	ldr	r0, [pc, #672]	@ (80049c4 <_dtoa_r+0x2cc>)
 8004722:	f001 fc67 	bl	8005ff4 <__assert_func>
 8004726:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800472a:	6007      	str	r7, [r0, #0]
 800472c:	60c7      	str	r7, [r0, #12]
 800472e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004732:	6819      	ldr	r1, [r3, #0]
 8004734:	b159      	cbz	r1, 800474e <_dtoa_r+0x56>
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	2301      	movs	r3, #1
 800473a:	4093      	lsls	r3, r2
 800473c:	604a      	str	r2, [r1, #4]
 800473e:	608b      	str	r3, [r1, #8]
 8004740:	4658      	mov	r0, fp
 8004742:	f000 fedf 	bl	8005504 <_Bfree>
 8004746:	2200      	movs	r2, #0
 8004748:	f8db 301c 	ldr.w	r3, [fp, #28]
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	1e2b      	subs	r3, r5, #0
 8004750:	bfaf      	iteee	ge
 8004752:	2300      	movge	r3, #0
 8004754:	2201      	movlt	r2, #1
 8004756:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800475a:	9303      	strlt	r3, [sp, #12]
 800475c:	bfa8      	it	ge
 800475e:	6033      	strge	r3, [r6, #0]
 8004760:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004764:	4b98      	ldr	r3, [pc, #608]	@ (80049c8 <_dtoa_r+0x2d0>)
 8004766:	bfb8      	it	lt
 8004768:	6032      	strlt	r2, [r6, #0]
 800476a:	ea33 0308 	bics.w	r3, r3, r8
 800476e:	d112      	bne.n	8004796 <_dtoa_r+0x9e>
 8004770:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004774:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800477c:	4323      	orrs	r3, r4
 800477e:	f000 8550 	beq.w	8005222 <_dtoa_r+0xb2a>
 8004782:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004784:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80049cc <_dtoa_r+0x2d4>
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 8552 	beq.w	8005232 <_dtoa_r+0xb3a>
 800478e:	f10a 0303 	add.w	r3, sl, #3
 8004792:	f000 bd4c 	b.w	800522e <_dtoa_r+0xb36>
 8004796:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800479a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800479e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80047a2:	2200      	movs	r2, #0
 80047a4:	2300      	movs	r3, #0
 80047a6:	f7fc f8ff 	bl	80009a8 <__aeabi_dcmpeq>
 80047aa:	4607      	mov	r7, r0
 80047ac:	b158      	cbz	r0, 80047c6 <_dtoa_r+0xce>
 80047ae:	2301      	movs	r3, #1
 80047b0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80047b2:	6013      	str	r3, [r2, #0]
 80047b4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80047b6:	b113      	cbz	r3, 80047be <_dtoa_r+0xc6>
 80047b8:	4b85      	ldr	r3, [pc, #532]	@ (80049d0 <_dtoa_r+0x2d8>)
 80047ba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80049d4 <_dtoa_r+0x2dc>
 80047c2:	f000 bd36 	b.w	8005232 <_dtoa_r+0xb3a>
 80047c6:	ab14      	add	r3, sp, #80	@ 0x50
 80047c8:	9301      	str	r3, [sp, #4]
 80047ca:	ab15      	add	r3, sp, #84	@ 0x54
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	4658      	mov	r0, fp
 80047d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80047d4:	f001 f97e 	bl	8005ad4 <__d2b>
 80047d8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80047dc:	4681      	mov	r9, r0
 80047de:	2e00      	cmp	r6, #0
 80047e0:	d077      	beq.n	80048d2 <_dtoa_r+0x1da>
 80047e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80047e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80047e8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80047ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047f0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80047f4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80047f8:	9712      	str	r7, [sp, #72]	@ 0x48
 80047fa:	4619      	mov	r1, r3
 80047fc:	2200      	movs	r2, #0
 80047fe:	4b76      	ldr	r3, [pc, #472]	@ (80049d8 <_dtoa_r+0x2e0>)
 8004800:	f7fb fcb2 	bl	8000168 <__aeabi_dsub>
 8004804:	a368      	add	r3, pc, #416	@ (adr r3, 80049a8 <_dtoa_r+0x2b0>)
 8004806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480a:	f7fb fe65 	bl	80004d8 <__aeabi_dmul>
 800480e:	a368      	add	r3, pc, #416	@ (adr r3, 80049b0 <_dtoa_r+0x2b8>)
 8004810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004814:	f7fb fcaa 	bl	800016c <__adddf3>
 8004818:	4604      	mov	r4, r0
 800481a:	4630      	mov	r0, r6
 800481c:	460d      	mov	r5, r1
 800481e:	f7fb fdf1 	bl	8000404 <__aeabi_i2d>
 8004822:	a365      	add	r3, pc, #404	@ (adr r3, 80049b8 <_dtoa_r+0x2c0>)
 8004824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004828:	f7fb fe56 	bl	80004d8 <__aeabi_dmul>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	4620      	mov	r0, r4
 8004832:	4629      	mov	r1, r5
 8004834:	f7fb fc9a 	bl	800016c <__adddf3>
 8004838:	4604      	mov	r4, r0
 800483a:	460d      	mov	r5, r1
 800483c:	f7fc f8fc 	bl	8000a38 <__aeabi_d2iz>
 8004840:	2200      	movs	r2, #0
 8004842:	4607      	mov	r7, r0
 8004844:	2300      	movs	r3, #0
 8004846:	4620      	mov	r0, r4
 8004848:	4629      	mov	r1, r5
 800484a:	f7fc f8b7 	bl	80009bc <__aeabi_dcmplt>
 800484e:	b140      	cbz	r0, 8004862 <_dtoa_r+0x16a>
 8004850:	4638      	mov	r0, r7
 8004852:	f7fb fdd7 	bl	8000404 <__aeabi_i2d>
 8004856:	4622      	mov	r2, r4
 8004858:	462b      	mov	r3, r5
 800485a:	f7fc f8a5 	bl	80009a8 <__aeabi_dcmpeq>
 800485e:	b900      	cbnz	r0, 8004862 <_dtoa_r+0x16a>
 8004860:	3f01      	subs	r7, #1
 8004862:	2f16      	cmp	r7, #22
 8004864:	d853      	bhi.n	800490e <_dtoa_r+0x216>
 8004866:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800486a:	4b5c      	ldr	r3, [pc, #368]	@ (80049dc <_dtoa_r+0x2e4>)
 800486c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004874:	f7fc f8a2 	bl	80009bc <__aeabi_dcmplt>
 8004878:	2800      	cmp	r0, #0
 800487a:	d04a      	beq.n	8004912 <_dtoa_r+0x21a>
 800487c:	2300      	movs	r3, #0
 800487e:	3f01      	subs	r7, #1
 8004880:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004882:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004884:	1b9b      	subs	r3, r3, r6
 8004886:	1e5a      	subs	r2, r3, #1
 8004888:	bf46      	itte	mi
 800488a:	f1c3 0801 	rsbmi	r8, r3, #1
 800488e:	2300      	movmi	r3, #0
 8004890:	f04f 0800 	movpl.w	r8, #0
 8004894:	9209      	str	r2, [sp, #36]	@ 0x24
 8004896:	bf48      	it	mi
 8004898:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800489a:	2f00      	cmp	r7, #0
 800489c:	db3b      	blt.n	8004916 <_dtoa_r+0x21e>
 800489e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048a0:	970e      	str	r7, [sp, #56]	@ 0x38
 80048a2:	443b      	add	r3, r7
 80048a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80048a6:	2300      	movs	r3, #0
 80048a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80048aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80048ac:	2b09      	cmp	r3, #9
 80048ae:	d866      	bhi.n	800497e <_dtoa_r+0x286>
 80048b0:	2b05      	cmp	r3, #5
 80048b2:	bfc4      	itt	gt
 80048b4:	3b04      	subgt	r3, #4
 80048b6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80048b8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80048ba:	bfc8      	it	gt
 80048bc:	2400      	movgt	r4, #0
 80048be:	f1a3 0302 	sub.w	r3, r3, #2
 80048c2:	bfd8      	it	le
 80048c4:	2401      	movle	r4, #1
 80048c6:	2b03      	cmp	r3, #3
 80048c8:	d864      	bhi.n	8004994 <_dtoa_r+0x29c>
 80048ca:	e8df f003 	tbb	[pc, r3]
 80048ce:	382b      	.short	0x382b
 80048d0:	5636      	.short	0x5636
 80048d2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80048d6:	441e      	add	r6, r3
 80048d8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80048dc:	2b20      	cmp	r3, #32
 80048de:	bfc1      	itttt	gt
 80048e0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80048e4:	fa08 f803 	lslgt.w	r8, r8, r3
 80048e8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80048ec:	fa24 f303 	lsrgt.w	r3, r4, r3
 80048f0:	bfd6      	itet	le
 80048f2:	f1c3 0320 	rsble	r3, r3, #32
 80048f6:	ea48 0003 	orrgt.w	r0, r8, r3
 80048fa:	fa04 f003 	lslle.w	r0, r4, r3
 80048fe:	f7fb fd71 	bl	80003e4 <__aeabi_ui2d>
 8004902:	2201      	movs	r2, #1
 8004904:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004908:	3e01      	subs	r6, #1
 800490a:	9212      	str	r2, [sp, #72]	@ 0x48
 800490c:	e775      	b.n	80047fa <_dtoa_r+0x102>
 800490e:	2301      	movs	r3, #1
 8004910:	e7b6      	b.n	8004880 <_dtoa_r+0x188>
 8004912:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004914:	e7b5      	b.n	8004882 <_dtoa_r+0x18a>
 8004916:	427b      	negs	r3, r7
 8004918:	930a      	str	r3, [sp, #40]	@ 0x28
 800491a:	2300      	movs	r3, #0
 800491c:	eba8 0807 	sub.w	r8, r8, r7
 8004920:	930e      	str	r3, [sp, #56]	@ 0x38
 8004922:	e7c2      	b.n	80048aa <_dtoa_r+0x1b2>
 8004924:	2300      	movs	r3, #0
 8004926:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004928:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800492a:	2b00      	cmp	r3, #0
 800492c:	dc35      	bgt.n	800499a <_dtoa_r+0x2a2>
 800492e:	2301      	movs	r3, #1
 8004930:	461a      	mov	r2, r3
 8004932:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004936:	9221      	str	r2, [sp, #132]	@ 0x84
 8004938:	e00b      	b.n	8004952 <_dtoa_r+0x25a>
 800493a:	2301      	movs	r3, #1
 800493c:	e7f3      	b.n	8004926 <_dtoa_r+0x22e>
 800493e:	2300      	movs	r3, #0
 8004940:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004942:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004944:	18fb      	adds	r3, r7, r3
 8004946:	9308      	str	r3, [sp, #32]
 8004948:	3301      	adds	r3, #1
 800494a:	2b01      	cmp	r3, #1
 800494c:	9307      	str	r3, [sp, #28]
 800494e:	bfb8      	it	lt
 8004950:	2301      	movlt	r3, #1
 8004952:	2100      	movs	r1, #0
 8004954:	2204      	movs	r2, #4
 8004956:	f8db 001c 	ldr.w	r0, [fp, #28]
 800495a:	f102 0514 	add.w	r5, r2, #20
 800495e:	429d      	cmp	r5, r3
 8004960:	d91f      	bls.n	80049a2 <_dtoa_r+0x2aa>
 8004962:	6041      	str	r1, [r0, #4]
 8004964:	4658      	mov	r0, fp
 8004966:	f000 fd8d 	bl	8005484 <_Balloc>
 800496a:	4682      	mov	sl, r0
 800496c:	2800      	cmp	r0, #0
 800496e:	d139      	bne.n	80049e4 <_dtoa_r+0x2ec>
 8004970:	4602      	mov	r2, r0
 8004972:	f240 11af 	movw	r1, #431	@ 0x1af
 8004976:	4b1a      	ldr	r3, [pc, #104]	@ (80049e0 <_dtoa_r+0x2e8>)
 8004978:	e6d2      	b.n	8004720 <_dtoa_r+0x28>
 800497a:	2301      	movs	r3, #1
 800497c:	e7e0      	b.n	8004940 <_dtoa_r+0x248>
 800497e:	2401      	movs	r4, #1
 8004980:	2300      	movs	r3, #0
 8004982:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004984:	9320      	str	r3, [sp, #128]	@ 0x80
 8004986:	f04f 33ff 	mov.w	r3, #4294967295
 800498a:	2200      	movs	r2, #0
 800498c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004990:	2312      	movs	r3, #18
 8004992:	e7d0      	b.n	8004936 <_dtoa_r+0x23e>
 8004994:	2301      	movs	r3, #1
 8004996:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004998:	e7f5      	b.n	8004986 <_dtoa_r+0x28e>
 800499a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800499c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80049a0:	e7d7      	b.n	8004952 <_dtoa_r+0x25a>
 80049a2:	3101      	adds	r1, #1
 80049a4:	0052      	lsls	r2, r2, #1
 80049a6:	e7d8      	b.n	800495a <_dtoa_r+0x262>
 80049a8:	636f4361 	.word	0x636f4361
 80049ac:	3fd287a7 	.word	0x3fd287a7
 80049b0:	8b60c8b3 	.word	0x8b60c8b3
 80049b4:	3fc68a28 	.word	0x3fc68a28
 80049b8:	509f79fb 	.word	0x509f79fb
 80049bc:	3fd34413 	.word	0x3fd34413
 80049c0:	08007533 	.word	0x08007533
 80049c4:	0800754a 	.word	0x0800754a
 80049c8:	7ff00000 	.word	0x7ff00000
 80049cc:	0800752f 	.word	0x0800752f
 80049d0:	08007503 	.word	0x08007503
 80049d4:	08007502 	.word	0x08007502
 80049d8:	3ff80000 	.word	0x3ff80000
 80049dc:	08007640 	.word	0x08007640
 80049e0:	080075a2 	.word	0x080075a2
 80049e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80049e8:	6018      	str	r0, [r3, #0]
 80049ea:	9b07      	ldr	r3, [sp, #28]
 80049ec:	2b0e      	cmp	r3, #14
 80049ee:	f200 80a4 	bhi.w	8004b3a <_dtoa_r+0x442>
 80049f2:	2c00      	cmp	r4, #0
 80049f4:	f000 80a1 	beq.w	8004b3a <_dtoa_r+0x442>
 80049f8:	2f00      	cmp	r7, #0
 80049fa:	dd33      	ble.n	8004a64 <_dtoa_r+0x36c>
 80049fc:	4b86      	ldr	r3, [pc, #536]	@ (8004c18 <_dtoa_r+0x520>)
 80049fe:	f007 020f 	and.w	r2, r7, #15
 8004a02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a06:	05f8      	lsls	r0, r7, #23
 8004a08:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a0c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004a10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004a14:	d516      	bpl.n	8004a44 <_dtoa_r+0x34c>
 8004a16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004a1a:	4b80      	ldr	r3, [pc, #512]	@ (8004c1c <_dtoa_r+0x524>)
 8004a1c:	2603      	movs	r6, #3
 8004a1e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004a22:	f7fb fe83 	bl	800072c <__aeabi_ddiv>
 8004a26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a2a:	f004 040f 	and.w	r4, r4, #15
 8004a2e:	4d7b      	ldr	r5, [pc, #492]	@ (8004c1c <_dtoa_r+0x524>)
 8004a30:	b954      	cbnz	r4, 8004a48 <_dtoa_r+0x350>
 8004a32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a3a:	f7fb fe77 	bl	800072c <__aeabi_ddiv>
 8004a3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a42:	e028      	b.n	8004a96 <_dtoa_r+0x39e>
 8004a44:	2602      	movs	r6, #2
 8004a46:	e7f2      	b.n	8004a2e <_dtoa_r+0x336>
 8004a48:	07e1      	lsls	r1, r4, #31
 8004a4a:	d508      	bpl.n	8004a5e <_dtoa_r+0x366>
 8004a4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004a54:	f7fb fd40 	bl	80004d8 <__aeabi_dmul>
 8004a58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a5c:	3601      	adds	r6, #1
 8004a5e:	1064      	asrs	r4, r4, #1
 8004a60:	3508      	adds	r5, #8
 8004a62:	e7e5      	b.n	8004a30 <_dtoa_r+0x338>
 8004a64:	f000 80d2 	beq.w	8004c0c <_dtoa_r+0x514>
 8004a68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004a6c:	427c      	negs	r4, r7
 8004a6e:	4b6a      	ldr	r3, [pc, #424]	@ (8004c18 <_dtoa_r+0x520>)
 8004a70:	f004 020f 	and.w	r2, r4, #15
 8004a74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	f7fb fd2c 	bl	80004d8 <__aeabi_dmul>
 8004a80:	2602      	movs	r6, #2
 8004a82:	2300      	movs	r3, #0
 8004a84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a88:	4d64      	ldr	r5, [pc, #400]	@ (8004c1c <_dtoa_r+0x524>)
 8004a8a:	1124      	asrs	r4, r4, #4
 8004a8c:	2c00      	cmp	r4, #0
 8004a8e:	f040 80b2 	bne.w	8004bf6 <_dtoa_r+0x4fe>
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1d3      	bne.n	8004a3e <_dtoa_r+0x346>
 8004a96:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004a9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 80b7 	beq.w	8004c10 <_dtoa_r+0x518>
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	4629      	mov	r1, r5
 8004aa8:	4b5d      	ldr	r3, [pc, #372]	@ (8004c20 <_dtoa_r+0x528>)
 8004aaa:	f7fb ff87 	bl	80009bc <__aeabi_dcmplt>
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	f000 80ae 	beq.w	8004c10 <_dtoa_r+0x518>
 8004ab4:	9b07      	ldr	r3, [sp, #28]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 80aa 	beq.w	8004c10 <_dtoa_r+0x518>
 8004abc:	9b08      	ldr	r3, [sp, #32]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	dd37      	ble.n	8004b32 <_dtoa_r+0x43a>
 8004ac2:	1e7b      	subs	r3, r7, #1
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	9304      	str	r3, [sp, #16]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	4629      	mov	r1, r5
 8004acc:	4b55      	ldr	r3, [pc, #340]	@ (8004c24 <_dtoa_r+0x52c>)
 8004ace:	f7fb fd03 	bl	80004d8 <__aeabi_dmul>
 8004ad2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ad6:	9c08      	ldr	r4, [sp, #32]
 8004ad8:	3601      	adds	r6, #1
 8004ada:	4630      	mov	r0, r6
 8004adc:	f7fb fc92 	bl	8000404 <__aeabi_i2d>
 8004ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ae4:	f7fb fcf8 	bl	80004d8 <__aeabi_dmul>
 8004ae8:	2200      	movs	r2, #0
 8004aea:	4b4f      	ldr	r3, [pc, #316]	@ (8004c28 <_dtoa_r+0x530>)
 8004aec:	f7fb fb3e 	bl	800016c <__adddf3>
 8004af0:	4605      	mov	r5, r0
 8004af2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004af6:	2c00      	cmp	r4, #0
 8004af8:	f040 809a 	bne.w	8004c30 <_dtoa_r+0x538>
 8004afc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b00:	2200      	movs	r2, #0
 8004b02:	4b4a      	ldr	r3, [pc, #296]	@ (8004c2c <_dtoa_r+0x534>)
 8004b04:	f7fb fb30 	bl	8000168 <__aeabi_dsub>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b10:	462a      	mov	r2, r5
 8004b12:	4633      	mov	r3, r6
 8004b14:	f7fb ff70 	bl	80009f8 <__aeabi_dcmpgt>
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	f040 828e 	bne.w	800503a <_dtoa_r+0x942>
 8004b1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b22:	462a      	mov	r2, r5
 8004b24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004b28:	f7fb ff48 	bl	80009bc <__aeabi_dcmplt>
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	f040 8127 	bne.w	8004d80 <_dtoa_r+0x688>
 8004b32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004b36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004b3a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f2c0 8163 	blt.w	8004e08 <_dtoa_r+0x710>
 8004b42:	2f0e      	cmp	r7, #14
 8004b44:	f300 8160 	bgt.w	8004e08 <_dtoa_r+0x710>
 8004b48:	4b33      	ldr	r3, [pc, #204]	@ (8004c18 <_dtoa_r+0x520>)
 8004b4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004b4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b52:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004b56:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	da03      	bge.n	8004b64 <_dtoa_r+0x46c>
 8004b5c:	9b07      	ldr	r3, [sp, #28]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f340 8100 	ble.w	8004d64 <_dtoa_r+0x66c>
 8004b64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004b68:	4656      	mov	r6, sl
 8004b6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b6e:	4620      	mov	r0, r4
 8004b70:	4629      	mov	r1, r5
 8004b72:	f7fb fddb 	bl	800072c <__aeabi_ddiv>
 8004b76:	f7fb ff5f 	bl	8000a38 <__aeabi_d2iz>
 8004b7a:	4680      	mov	r8, r0
 8004b7c:	f7fb fc42 	bl	8000404 <__aeabi_i2d>
 8004b80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b84:	f7fb fca8 	bl	80004d8 <__aeabi_dmul>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	4629      	mov	r1, r5
 8004b90:	f7fb faea 	bl	8000168 <__aeabi_dsub>
 8004b94:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004b98:	9d07      	ldr	r5, [sp, #28]
 8004b9a:	f806 4b01 	strb.w	r4, [r6], #1
 8004b9e:	eba6 040a 	sub.w	r4, r6, sl
 8004ba2:	42a5      	cmp	r5, r4
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	f040 8116 	bne.w	8004dd8 <_dtoa_r+0x6e0>
 8004bac:	f7fb fade 	bl	800016c <__adddf3>
 8004bb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bb4:	4604      	mov	r4, r0
 8004bb6:	460d      	mov	r5, r1
 8004bb8:	f7fb ff1e 	bl	80009f8 <__aeabi_dcmpgt>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	f040 80f8 	bne.w	8004db2 <_dtoa_r+0x6ba>
 8004bc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	4629      	mov	r1, r5
 8004bca:	f7fb feed 	bl	80009a8 <__aeabi_dcmpeq>
 8004bce:	b118      	cbz	r0, 8004bd8 <_dtoa_r+0x4e0>
 8004bd0:	f018 0f01 	tst.w	r8, #1
 8004bd4:	f040 80ed 	bne.w	8004db2 <_dtoa_r+0x6ba>
 8004bd8:	4649      	mov	r1, r9
 8004bda:	4658      	mov	r0, fp
 8004bdc:	f000 fc92 	bl	8005504 <_Bfree>
 8004be0:	2300      	movs	r3, #0
 8004be2:	7033      	strb	r3, [r6, #0]
 8004be4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004be6:	3701      	adds	r7, #1
 8004be8:	601f      	str	r7, [r3, #0]
 8004bea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 8320 	beq.w	8005232 <_dtoa_r+0xb3a>
 8004bf2:	601e      	str	r6, [r3, #0]
 8004bf4:	e31d      	b.n	8005232 <_dtoa_r+0xb3a>
 8004bf6:	07e2      	lsls	r2, r4, #31
 8004bf8:	d505      	bpl.n	8004c06 <_dtoa_r+0x50e>
 8004bfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004bfe:	f7fb fc6b 	bl	80004d8 <__aeabi_dmul>
 8004c02:	2301      	movs	r3, #1
 8004c04:	3601      	adds	r6, #1
 8004c06:	1064      	asrs	r4, r4, #1
 8004c08:	3508      	adds	r5, #8
 8004c0a:	e73f      	b.n	8004a8c <_dtoa_r+0x394>
 8004c0c:	2602      	movs	r6, #2
 8004c0e:	e742      	b.n	8004a96 <_dtoa_r+0x39e>
 8004c10:	9c07      	ldr	r4, [sp, #28]
 8004c12:	9704      	str	r7, [sp, #16]
 8004c14:	e761      	b.n	8004ada <_dtoa_r+0x3e2>
 8004c16:	bf00      	nop
 8004c18:	08007640 	.word	0x08007640
 8004c1c:	08007618 	.word	0x08007618
 8004c20:	3ff00000 	.word	0x3ff00000
 8004c24:	40240000 	.word	0x40240000
 8004c28:	401c0000 	.word	0x401c0000
 8004c2c:	40140000 	.word	0x40140000
 8004c30:	4b70      	ldr	r3, [pc, #448]	@ (8004df4 <_dtoa_r+0x6fc>)
 8004c32:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004c34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004c38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004c3c:	4454      	add	r4, sl
 8004c3e:	2900      	cmp	r1, #0
 8004c40:	d045      	beq.n	8004cce <_dtoa_r+0x5d6>
 8004c42:	2000      	movs	r0, #0
 8004c44:	496c      	ldr	r1, [pc, #432]	@ (8004df8 <_dtoa_r+0x700>)
 8004c46:	f7fb fd71 	bl	800072c <__aeabi_ddiv>
 8004c4a:	4633      	mov	r3, r6
 8004c4c:	462a      	mov	r2, r5
 8004c4e:	f7fb fa8b 	bl	8000168 <__aeabi_dsub>
 8004c52:	4656      	mov	r6, sl
 8004c54:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004c58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c5c:	f7fb feec 	bl	8000a38 <__aeabi_d2iz>
 8004c60:	4605      	mov	r5, r0
 8004c62:	f7fb fbcf 	bl	8000404 <__aeabi_i2d>
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c6e:	f7fb fa7b 	bl	8000168 <__aeabi_dsub>
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	3530      	adds	r5, #48	@ 0x30
 8004c78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004c80:	f806 5b01 	strb.w	r5, [r6], #1
 8004c84:	f7fb fe9a 	bl	80009bc <__aeabi_dcmplt>
 8004c88:	2800      	cmp	r0, #0
 8004c8a:	d163      	bne.n	8004d54 <_dtoa_r+0x65c>
 8004c8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c90:	2000      	movs	r0, #0
 8004c92:	495a      	ldr	r1, [pc, #360]	@ (8004dfc <_dtoa_r+0x704>)
 8004c94:	f7fb fa68 	bl	8000168 <__aeabi_dsub>
 8004c98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004c9c:	f7fb fe8e 	bl	80009bc <__aeabi_dcmplt>
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	f040 8087 	bne.w	8004db4 <_dtoa_r+0x6bc>
 8004ca6:	42a6      	cmp	r6, r4
 8004ca8:	f43f af43 	beq.w	8004b32 <_dtoa_r+0x43a>
 8004cac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	4b53      	ldr	r3, [pc, #332]	@ (8004e00 <_dtoa_r+0x708>)
 8004cb4:	f7fb fc10 	bl	80004d8 <__aeabi_dmul>
 8004cb8:	2200      	movs	r2, #0
 8004cba:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004cbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cc2:	4b4f      	ldr	r3, [pc, #316]	@ (8004e00 <_dtoa_r+0x708>)
 8004cc4:	f7fb fc08 	bl	80004d8 <__aeabi_dmul>
 8004cc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ccc:	e7c4      	b.n	8004c58 <_dtoa_r+0x560>
 8004cce:	4631      	mov	r1, r6
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	f7fb fc01 	bl	80004d8 <__aeabi_dmul>
 8004cd6:	4656      	mov	r6, sl
 8004cd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004cdc:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004cde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ce2:	f7fb fea9 	bl	8000a38 <__aeabi_d2iz>
 8004ce6:	4605      	mov	r5, r0
 8004ce8:	f7fb fb8c 	bl	8000404 <__aeabi_i2d>
 8004cec:	4602      	mov	r2, r0
 8004cee:	460b      	mov	r3, r1
 8004cf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cf4:	f7fb fa38 	bl	8000168 <__aeabi_dsub>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	3530      	adds	r5, #48	@ 0x30
 8004cfe:	f806 5b01 	strb.w	r5, [r6], #1
 8004d02:	42a6      	cmp	r6, r4
 8004d04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d08:	f04f 0200 	mov.w	r2, #0
 8004d0c:	d124      	bne.n	8004d58 <_dtoa_r+0x660>
 8004d0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004d12:	4b39      	ldr	r3, [pc, #228]	@ (8004df8 <_dtoa_r+0x700>)
 8004d14:	f7fb fa2a 	bl	800016c <__adddf3>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d20:	f7fb fe6a 	bl	80009f8 <__aeabi_dcmpgt>
 8004d24:	2800      	cmp	r0, #0
 8004d26:	d145      	bne.n	8004db4 <_dtoa_r+0x6bc>
 8004d28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004d2c:	2000      	movs	r0, #0
 8004d2e:	4932      	ldr	r1, [pc, #200]	@ (8004df8 <_dtoa_r+0x700>)
 8004d30:	f7fb fa1a 	bl	8000168 <__aeabi_dsub>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d3c:	f7fb fe3e 	bl	80009bc <__aeabi_dcmplt>
 8004d40:	2800      	cmp	r0, #0
 8004d42:	f43f aef6 	beq.w	8004b32 <_dtoa_r+0x43a>
 8004d46:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004d48:	1e73      	subs	r3, r6, #1
 8004d4a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004d4c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004d50:	2b30      	cmp	r3, #48	@ 0x30
 8004d52:	d0f8      	beq.n	8004d46 <_dtoa_r+0x64e>
 8004d54:	9f04      	ldr	r7, [sp, #16]
 8004d56:	e73f      	b.n	8004bd8 <_dtoa_r+0x4e0>
 8004d58:	4b29      	ldr	r3, [pc, #164]	@ (8004e00 <_dtoa_r+0x708>)
 8004d5a:	f7fb fbbd 	bl	80004d8 <__aeabi_dmul>
 8004d5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d62:	e7bc      	b.n	8004cde <_dtoa_r+0x5e6>
 8004d64:	d10c      	bne.n	8004d80 <_dtoa_r+0x688>
 8004d66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	4b25      	ldr	r3, [pc, #148]	@ (8004e04 <_dtoa_r+0x70c>)
 8004d6e:	f7fb fbb3 	bl	80004d8 <__aeabi_dmul>
 8004d72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d76:	f7fb fe35 	bl	80009e4 <__aeabi_dcmpge>
 8004d7a:	2800      	cmp	r0, #0
 8004d7c:	f000 815b 	beq.w	8005036 <_dtoa_r+0x93e>
 8004d80:	2400      	movs	r4, #0
 8004d82:	4625      	mov	r5, r4
 8004d84:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004d86:	4656      	mov	r6, sl
 8004d88:	43db      	mvns	r3, r3
 8004d8a:	9304      	str	r3, [sp, #16]
 8004d8c:	2700      	movs	r7, #0
 8004d8e:	4621      	mov	r1, r4
 8004d90:	4658      	mov	r0, fp
 8004d92:	f000 fbb7 	bl	8005504 <_Bfree>
 8004d96:	2d00      	cmp	r5, #0
 8004d98:	d0dc      	beq.n	8004d54 <_dtoa_r+0x65c>
 8004d9a:	b12f      	cbz	r7, 8004da8 <_dtoa_r+0x6b0>
 8004d9c:	42af      	cmp	r7, r5
 8004d9e:	d003      	beq.n	8004da8 <_dtoa_r+0x6b0>
 8004da0:	4639      	mov	r1, r7
 8004da2:	4658      	mov	r0, fp
 8004da4:	f000 fbae 	bl	8005504 <_Bfree>
 8004da8:	4629      	mov	r1, r5
 8004daa:	4658      	mov	r0, fp
 8004dac:	f000 fbaa 	bl	8005504 <_Bfree>
 8004db0:	e7d0      	b.n	8004d54 <_dtoa_r+0x65c>
 8004db2:	9704      	str	r7, [sp, #16]
 8004db4:	4633      	mov	r3, r6
 8004db6:	461e      	mov	r6, r3
 8004db8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004dbc:	2a39      	cmp	r2, #57	@ 0x39
 8004dbe:	d107      	bne.n	8004dd0 <_dtoa_r+0x6d8>
 8004dc0:	459a      	cmp	sl, r3
 8004dc2:	d1f8      	bne.n	8004db6 <_dtoa_r+0x6be>
 8004dc4:	9a04      	ldr	r2, [sp, #16]
 8004dc6:	3201      	adds	r2, #1
 8004dc8:	9204      	str	r2, [sp, #16]
 8004dca:	2230      	movs	r2, #48	@ 0x30
 8004dcc:	f88a 2000 	strb.w	r2, [sl]
 8004dd0:	781a      	ldrb	r2, [r3, #0]
 8004dd2:	3201      	adds	r2, #1
 8004dd4:	701a      	strb	r2, [r3, #0]
 8004dd6:	e7bd      	b.n	8004d54 <_dtoa_r+0x65c>
 8004dd8:	2200      	movs	r2, #0
 8004dda:	4b09      	ldr	r3, [pc, #36]	@ (8004e00 <_dtoa_r+0x708>)
 8004ddc:	f7fb fb7c 	bl	80004d8 <__aeabi_dmul>
 8004de0:	2200      	movs	r2, #0
 8004de2:	2300      	movs	r3, #0
 8004de4:	4604      	mov	r4, r0
 8004de6:	460d      	mov	r5, r1
 8004de8:	f7fb fdde 	bl	80009a8 <__aeabi_dcmpeq>
 8004dec:	2800      	cmp	r0, #0
 8004dee:	f43f aebc 	beq.w	8004b6a <_dtoa_r+0x472>
 8004df2:	e6f1      	b.n	8004bd8 <_dtoa_r+0x4e0>
 8004df4:	08007640 	.word	0x08007640
 8004df8:	3fe00000 	.word	0x3fe00000
 8004dfc:	3ff00000 	.word	0x3ff00000
 8004e00:	40240000 	.word	0x40240000
 8004e04:	40140000 	.word	0x40140000
 8004e08:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004e0a:	2a00      	cmp	r2, #0
 8004e0c:	f000 80db 	beq.w	8004fc6 <_dtoa_r+0x8ce>
 8004e10:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004e12:	2a01      	cmp	r2, #1
 8004e14:	f300 80bf 	bgt.w	8004f96 <_dtoa_r+0x89e>
 8004e18:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004e1a:	2a00      	cmp	r2, #0
 8004e1c:	f000 80b7 	beq.w	8004f8e <_dtoa_r+0x896>
 8004e20:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004e24:	4646      	mov	r6, r8
 8004e26:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004e28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	441a      	add	r2, r3
 8004e2e:	4658      	mov	r0, fp
 8004e30:	4498      	add	r8, r3
 8004e32:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e34:	f000 fc1a 	bl	800566c <__i2b>
 8004e38:	4605      	mov	r5, r0
 8004e3a:	b15e      	cbz	r6, 8004e54 <_dtoa_r+0x75c>
 8004e3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	dd08      	ble.n	8004e54 <_dtoa_r+0x75c>
 8004e42:	42b3      	cmp	r3, r6
 8004e44:	bfa8      	it	ge
 8004e46:	4633      	movge	r3, r6
 8004e48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e4a:	eba8 0803 	sub.w	r8, r8, r3
 8004e4e:	1af6      	subs	r6, r6, r3
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e56:	b1f3      	cbz	r3, 8004e96 <_dtoa_r+0x79e>
 8004e58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 80b7 	beq.w	8004fce <_dtoa_r+0x8d6>
 8004e60:	b18c      	cbz	r4, 8004e86 <_dtoa_r+0x78e>
 8004e62:	4629      	mov	r1, r5
 8004e64:	4622      	mov	r2, r4
 8004e66:	4658      	mov	r0, fp
 8004e68:	f000 fcbe 	bl	80057e8 <__pow5mult>
 8004e6c:	464a      	mov	r2, r9
 8004e6e:	4601      	mov	r1, r0
 8004e70:	4605      	mov	r5, r0
 8004e72:	4658      	mov	r0, fp
 8004e74:	f000 fc10 	bl	8005698 <__multiply>
 8004e78:	4649      	mov	r1, r9
 8004e7a:	9004      	str	r0, [sp, #16]
 8004e7c:	4658      	mov	r0, fp
 8004e7e:	f000 fb41 	bl	8005504 <_Bfree>
 8004e82:	9b04      	ldr	r3, [sp, #16]
 8004e84:	4699      	mov	r9, r3
 8004e86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e88:	1b1a      	subs	r2, r3, r4
 8004e8a:	d004      	beq.n	8004e96 <_dtoa_r+0x79e>
 8004e8c:	4649      	mov	r1, r9
 8004e8e:	4658      	mov	r0, fp
 8004e90:	f000 fcaa 	bl	80057e8 <__pow5mult>
 8004e94:	4681      	mov	r9, r0
 8004e96:	2101      	movs	r1, #1
 8004e98:	4658      	mov	r0, fp
 8004e9a:	f000 fbe7 	bl	800566c <__i2b>
 8004e9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ea0:	4604      	mov	r4, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 81c9 	beq.w	800523a <_dtoa_r+0xb42>
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	4601      	mov	r1, r0
 8004eac:	4658      	mov	r0, fp
 8004eae:	f000 fc9b 	bl	80057e8 <__pow5mult>
 8004eb2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004eb4:	4604      	mov	r4, r0
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	f300 808f 	bgt.w	8004fda <_dtoa_r+0x8e2>
 8004ebc:	9b02      	ldr	r3, [sp, #8]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f040 8087 	bne.w	8004fd2 <_dtoa_r+0x8da>
 8004ec4:	9b03      	ldr	r3, [sp, #12]
 8004ec6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f040 8083 	bne.w	8004fd6 <_dtoa_r+0x8de>
 8004ed0:	9b03      	ldr	r3, [sp, #12]
 8004ed2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ed6:	0d1b      	lsrs	r3, r3, #20
 8004ed8:	051b      	lsls	r3, r3, #20
 8004eda:	b12b      	cbz	r3, 8004ee8 <_dtoa_r+0x7f0>
 8004edc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ede:	f108 0801 	add.w	r8, r8, #1
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004eea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 81aa 	beq.w	8005246 <_dtoa_r+0xb4e>
 8004ef2:	6923      	ldr	r3, [r4, #16]
 8004ef4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004ef8:	6918      	ldr	r0, [r3, #16]
 8004efa:	f000 fb6b 	bl	80055d4 <__hi0bits>
 8004efe:	f1c0 0020 	rsb	r0, r0, #32
 8004f02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f04:	4418      	add	r0, r3
 8004f06:	f010 001f 	ands.w	r0, r0, #31
 8004f0a:	d071      	beq.n	8004ff0 <_dtoa_r+0x8f8>
 8004f0c:	f1c0 0320 	rsb	r3, r0, #32
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	dd65      	ble.n	8004fe0 <_dtoa_r+0x8e8>
 8004f14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f16:	f1c0 001c 	rsb	r0, r0, #28
 8004f1a:	4403      	add	r3, r0
 8004f1c:	4480      	add	r8, r0
 8004f1e:	4406      	add	r6, r0
 8004f20:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f22:	f1b8 0f00 	cmp.w	r8, #0
 8004f26:	dd05      	ble.n	8004f34 <_dtoa_r+0x83c>
 8004f28:	4649      	mov	r1, r9
 8004f2a:	4642      	mov	r2, r8
 8004f2c:	4658      	mov	r0, fp
 8004f2e:	f000 fcb5 	bl	800589c <__lshift>
 8004f32:	4681      	mov	r9, r0
 8004f34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	dd05      	ble.n	8004f46 <_dtoa_r+0x84e>
 8004f3a:	4621      	mov	r1, r4
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	4658      	mov	r0, fp
 8004f40:	f000 fcac 	bl	800589c <__lshift>
 8004f44:	4604      	mov	r4, r0
 8004f46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d053      	beq.n	8004ff4 <_dtoa_r+0x8fc>
 8004f4c:	4621      	mov	r1, r4
 8004f4e:	4648      	mov	r0, r9
 8004f50:	f000 fd10 	bl	8005974 <__mcmp>
 8004f54:	2800      	cmp	r0, #0
 8004f56:	da4d      	bge.n	8004ff4 <_dtoa_r+0x8fc>
 8004f58:	1e7b      	subs	r3, r7, #1
 8004f5a:	4649      	mov	r1, r9
 8004f5c:	9304      	str	r3, [sp, #16]
 8004f5e:	220a      	movs	r2, #10
 8004f60:	2300      	movs	r3, #0
 8004f62:	4658      	mov	r0, fp
 8004f64:	f000 faf0 	bl	8005548 <__multadd>
 8004f68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f6a:	4681      	mov	r9, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 816c 	beq.w	800524a <_dtoa_r+0xb52>
 8004f72:	2300      	movs	r3, #0
 8004f74:	4629      	mov	r1, r5
 8004f76:	220a      	movs	r2, #10
 8004f78:	4658      	mov	r0, fp
 8004f7a:	f000 fae5 	bl	8005548 <__multadd>
 8004f7e:	9b08      	ldr	r3, [sp, #32]
 8004f80:	4605      	mov	r5, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	dc61      	bgt.n	800504a <_dtoa_r+0x952>
 8004f86:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	dc3b      	bgt.n	8005004 <_dtoa_r+0x90c>
 8004f8c:	e05d      	b.n	800504a <_dtoa_r+0x952>
 8004f8e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004f90:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004f94:	e746      	b.n	8004e24 <_dtoa_r+0x72c>
 8004f96:	9b07      	ldr	r3, [sp, #28]
 8004f98:	1e5c      	subs	r4, r3, #1
 8004f9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f9c:	42a3      	cmp	r3, r4
 8004f9e:	bfbf      	itttt	lt
 8004fa0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004fa2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004fa4:	1ae3      	sublt	r3, r4, r3
 8004fa6:	18d2      	addlt	r2, r2, r3
 8004fa8:	bfa8      	it	ge
 8004faa:	1b1c      	subge	r4, r3, r4
 8004fac:	9b07      	ldr	r3, [sp, #28]
 8004fae:	bfbe      	ittt	lt
 8004fb0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004fb2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004fb4:	2400      	movlt	r4, #0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	bfb5      	itete	lt
 8004fba:	eba8 0603 	sublt.w	r6, r8, r3
 8004fbe:	4646      	movge	r6, r8
 8004fc0:	2300      	movlt	r3, #0
 8004fc2:	9b07      	ldrge	r3, [sp, #28]
 8004fc4:	e730      	b.n	8004e28 <_dtoa_r+0x730>
 8004fc6:	4646      	mov	r6, r8
 8004fc8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004fca:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004fcc:	e735      	b.n	8004e3a <_dtoa_r+0x742>
 8004fce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004fd0:	e75c      	b.n	8004e8c <_dtoa_r+0x794>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	e788      	b.n	8004ee8 <_dtoa_r+0x7f0>
 8004fd6:	9b02      	ldr	r3, [sp, #8]
 8004fd8:	e786      	b.n	8004ee8 <_dtoa_r+0x7f0>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fde:	e788      	b.n	8004ef2 <_dtoa_r+0x7fa>
 8004fe0:	d09f      	beq.n	8004f22 <_dtoa_r+0x82a>
 8004fe2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004fe4:	331c      	adds	r3, #28
 8004fe6:	441a      	add	r2, r3
 8004fe8:	4498      	add	r8, r3
 8004fea:	441e      	add	r6, r3
 8004fec:	9209      	str	r2, [sp, #36]	@ 0x24
 8004fee:	e798      	b.n	8004f22 <_dtoa_r+0x82a>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	e7f6      	b.n	8004fe2 <_dtoa_r+0x8ea>
 8004ff4:	9b07      	ldr	r3, [sp, #28]
 8004ff6:	9704      	str	r7, [sp, #16]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	dc20      	bgt.n	800503e <_dtoa_r+0x946>
 8004ffc:	9308      	str	r3, [sp, #32]
 8004ffe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005000:	2b02      	cmp	r3, #2
 8005002:	dd1e      	ble.n	8005042 <_dtoa_r+0x94a>
 8005004:	9b08      	ldr	r3, [sp, #32]
 8005006:	2b00      	cmp	r3, #0
 8005008:	f47f aebc 	bne.w	8004d84 <_dtoa_r+0x68c>
 800500c:	4621      	mov	r1, r4
 800500e:	2205      	movs	r2, #5
 8005010:	4658      	mov	r0, fp
 8005012:	f000 fa99 	bl	8005548 <__multadd>
 8005016:	4601      	mov	r1, r0
 8005018:	4604      	mov	r4, r0
 800501a:	4648      	mov	r0, r9
 800501c:	f000 fcaa 	bl	8005974 <__mcmp>
 8005020:	2800      	cmp	r0, #0
 8005022:	f77f aeaf 	ble.w	8004d84 <_dtoa_r+0x68c>
 8005026:	2331      	movs	r3, #49	@ 0x31
 8005028:	4656      	mov	r6, sl
 800502a:	f806 3b01 	strb.w	r3, [r6], #1
 800502e:	9b04      	ldr	r3, [sp, #16]
 8005030:	3301      	adds	r3, #1
 8005032:	9304      	str	r3, [sp, #16]
 8005034:	e6aa      	b.n	8004d8c <_dtoa_r+0x694>
 8005036:	9c07      	ldr	r4, [sp, #28]
 8005038:	9704      	str	r7, [sp, #16]
 800503a:	4625      	mov	r5, r4
 800503c:	e7f3      	b.n	8005026 <_dtoa_r+0x92e>
 800503e:	9b07      	ldr	r3, [sp, #28]
 8005040:	9308      	str	r3, [sp, #32]
 8005042:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 8104 	beq.w	8005252 <_dtoa_r+0xb5a>
 800504a:	2e00      	cmp	r6, #0
 800504c:	dd05      	ble.n	800505a <_dtoa_r+0x962>
 800504e:	4629      	mov	r1, r5
 8005050:	4632      	mov	r2, r6
 8005052:	4658      	mov	r0, fp
 8005054:	f000 fc22 	bl	800589c <__lshift>
 8005058:	4605      	mov	r5, r0
 800505a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800505c:	2b00      	cmp	r3, #0
 800505e:	d05a      	beq.n	8005116 <_dtoa_r+0xa1e>
 8005060:	4658      	mov	r0, fp
 8005062:	6869      	ldr	r1, [r5, #4]
 8005064:	f000 fa0e 	bl	8005484 <_Balloc>
 8005068:	4606      	mov	r6, r0
 800506a:	b928      	cbnz	r0, 8005078 <_dtoa_r+0x980>
 800506c:	4602      	mov	r2, r0
 800506e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005072:	4b83      	ldr	r3, [pc, #524]	@ (8005280 <_dtoa_r+0xb88>)
 8005074:	f7ff bb54 	b.w	8004720 <_dtoa_r+0x28>
 8005078:	692a      	ldr	r2, [r5, #16]
 800507a:	f105 010c 	add.w	r1, r5, #12
 800507e:	3202      	adds	r2, #2
 8005080:	0092      	lsls	r2, r2, #2
 8005082:	300c      	adds	r0, #12
 8005084:	f000 ffa8 	bl	8005fd8 <memcpy>
 8005088:	2201      	movs	r2, #1
 800508a:	4631      	mov	r1, r6
 800508c:	4658      	mov	r0, fp
 800508e:	f000 fc05 	bl	800589c <__lshift>
 8005092:	462f      	mov	r7, r5
 8005094:	4605      	mov	r5, r0
 8005096:	f10a 0301 	add.w	r3, sl, #1
 800509a:	9307      	str	r3, [sp, #28]
 800509c:	9b08      	ldr	r3, [sp, #32]
 800509e:	4453      	add	r3, sl
 80050a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80050a2:	9b02      	ldr	r3, [sp, #8]
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80050aa:	9b07      	ldr	r3, [sp, #28]
 80050ac:	4621      	mov	r1, r4
 80050ae:	3b01      	subs	r3, #1
 80050b0:	4648      	mov	r0, r9
 80050b2:	9302      	str	r3, [sp, #8]
 80050b4:	f7ff fa97 	bl	80045e6 <quorem>
 80050b8:	4639      	mov	r1, r7
 80050ba:	9008      	str	r0, [sp, #32]
 80050bc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80050c0:	4648      	mov	r0, r9
 80050c2:	f000 fc57 	bl	8005974 <__mcmp>
 80050c6:	462a      	mov	r2, r5
 80050c8:	9009      	str	r0, [sp, #36]	@ 0x24
 80050ca:	4621      	mov	r1, r4
 80050cc:	4658      	mov	r0, fp
 80050ce:	f000 fc6d 	bl	80059ac <__mdiff>
 80050d2:	68c2      	ldr	r2, [r0, #12]
 80050d4:	4606      	mov	r6, r0
 80050d6:	bb02      	cbnz	r2, 800511a <_dtoa_r+0xa22>
 80050d8:	4601      	mov	r1, r0
 80050da:	4648      	mov	r0, r9
 80050dc:	f000 fc4a 	bl	8005974 <__mcmp>
 80050e0:	4602      	mov	r2, r0
 80050e2:	4631      	mov	r1, r6
 80050e4:	4658      	mov	r0, fp
 80050e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80050e8:	f000 fa0c 	bl	8005504 <_Bfree>
 80050ec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80050ee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80050f0:	9e07      	ldr	r6, [sp, #28]
 80050f2:	ea43 0102 	orr.w	r1, r3, r2
 80050f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050f8:	4319      	orrs	r1, r3
 80050fa:	d110      	bne.n	800511e <_dtoa_r+0xa26>
 80050fc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005100:	d029      	beq.n	8005156 <_dtoa_r+0xa5e>
 8005102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005104:	2b00      	cmp	r3, #0
 8005106:	dd02      	ble.n	800510e <_dtoa_r+0xa16>
 8005108:	9b08      	ldr	r3, [sp, #32]
 800510a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800510e:	9b02      	ldr	r3, [sp, #8]
 8005110:	f883 8000 	strb.w	r8, [r3]
 8005114:	e63b      	b.n	8004d8e <_dtoa_r+0x696>
 8005116:	4628      	mov	r0, r5
 8005118:	e7bb      	b.n	8005092 <_dtoa_r+0x99a>
 800511a:	2201      	movs	r2, #1
 800511c:	e7e1      	b.n	80050e2 <_dtoa_r+0x9ea>
 800511e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005120:	2b00      	cmp	r3, #0
 8005122:	db04      	blt.n	800512e <_dtoa_r+0xa36>
 8005124:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005126:	430b      	orrs	r3, r1
 8005128:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800512a:	430b      	orrs	r3, r1
 800512c:	d120      	bne.n	8005170 <_dtoa_r+0xa78>
 800512e:	2a00      	cmp	r2, #0
 8005130:	dded      	ble.n	800510e <_dtoa_r+0xa16>
 8005132:	4649      	mov	r1, r9
 8005134:	2201      	movs	r2, #1
 8005136:	4658      	mov	r0, fp
 8005138:	f000 fbb0 	bl	800589c <__lshift>
 800513c:	4621      	mov	r1, r4
 800513e:	4681      	mov	r9, r0
 8005140:	f000 fc18 	bl	8005974 <__mcmp>
 8005144:	2800      	cmp	r0, #0
 8005146:	dc03      	bgt.n	8005150 <_dtoa_r+0xa58>
 8005148:	d1e1      	bne.n	800510e <_dtoa_r+0xa16>
 800514a:	f018 0f01 	tst.w	r8, #1
 800514e:	d0de      	beq.n	800510e <_dtoa_r+0xa16>
 8005150:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005154:	d1d8      	bne.n	8005108 <_dtoa_r+0xa10>
 8005156:	2339      	movs	r3, #57	@ 0x39
 8005158:	9a02      	ldr	r2, [sp, #8]
 800515a:	7013      	strb	r3, [r2, #0]
 800515c:	4633      	mov	r3, r6
 800515e:	461e      	mov	r6, r3
 8005160:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005164:	3b01      	subs	r3, #1
 8005166:	2a39      	cmp	r2, #57	@ 0x39
 8005168:	d052      	beq.n	8005210 <_dtoa_r+0xb18>
 800516a:	3201      	adds	r2, #1
 800516c:	701a      	strb	r2, [r3, #0]
 800516e:	e60e      	b.n	8004d8e <_dtoa_r+0x696>
 8005170:	2a00      	cmp	r2, #0
 8005172:	dd07      	ble.n	8005184 <_dtoa_r+0xa8c>
 8005174:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005178:	d0ed      	beq.n	8005156 <_dtoa_r+0xa5e>
 800517a:	9a02      	ldr	r2, [sp, #8]
 800517c:	f108 0301 	add.w	r3, r8, #1
 8005180:	7013      	strb	r3, [r2, #0]
 8005182:	e604      	b.n	8004d8e <_dtoa_r+0x696>
 8005184:	9b07      	ldr	r3, [sp, #28]
 8005186:	9a07      	ldr	r2, [sp, #28]
 8005188:	f803 8c01 	strb.w	r8, [r3, #-1]
 800518c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800518e:	4293      	cmp	r3, r2
 8005190:	d028      	beq.n	80051e4 <_dtoa_r+0xaec>
 8005192:	4649      	mov	r1, r9
 8005194:	2300      	movs	r3, #0
 8005196:	220a      	movs	r2, #10
 8005198:	4658      	mov	r0, fp
 800519a:	f000 f9d5 	bl	8005548 <__multadd>
 800519e:	42af      	cmp	r7, r5
 80051a0:	4681      	mov	r9, r0
 80051a2:	f04f 0300 	mov.w	r3, #0
 80051a6:	f04f 020a 	mov.w	r2, #10
 80051aa:	4639      	mov	r1, r7
 80051ac:	4658      	mov	r0, fp
 80051ae:	d107      	bne.n	80051c0 <_dtoa_r+0xac8>
 80051b0:	f000 f9ca 	bl	8005548 <__multadd>
 80051b4:	4607      	mov	r7, r0
 80051b6:	4605      	mov	r5, r0
 80051b8:	9b07      	ldr	r3, [sp, #28]
 80051ba:	3301      	adds	r3, #1
 80051bc:	9307      	str	r3, [sp, #28]
 80051be:	e774      	b.n	80050aa <_dtoa_r+0x9b2>
 80051c0:	f000 f9c2 	bl	8005548 <__multadd>
 80051c4:	4629      	mov	r1, r5
 80051c6:	4607      	mov	r7, r0
 80051c8:	2300      	movs	r3, #0
 80051ca:	220a      	movs	r2, #10
 80051cc:	4658      	mov	r0, fp
 80051ce:	f000 f9bb 	bl	8005548 <__multadd>
 80051d2:	4605      	mov	r5, r0
 80051d4:	e7f0      	b.n	80051b8 <_dtoa_r+0xac0>
 80051d6:	9b08      	ldr	r3, [sp, #32]
 80051d8:	2700      	movs	r7, #0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	bfcc      	ite	gt
 80051de:	461e      	movgt	r6, r3
 80051e0:	2601      	movle	r6, #1
 80051e2:	4456      	add	r6, sl
 80051e4:	4649      	mov	r1, r9
 80051e6:	2201      	movs	r2, #1
 80051e8:	4658      	mov	r0, fp
 80051ea:	f000 fb57 	bl	800589c <__lshift>
 80051ee:	4621      	mov	r1, r4
 80051f0:	4681      	mov	r9, r0
 80051f2:	f000 fbbf 	bl	8005974 <__mcmp>
 80051f6:	2800      	cmp	r0, #0
 80051f8:	dcb0      	bgt.n	800515c <_dtoa_r+0xa64>
 80051fa:	d102      	bne.n	8005202 <_dtoa_r+0xb0a>
 80051fc:	f018 0f01 	tst.w	r8, #1
 8005200:	d1ac      	bne.n	800515c <_dtoa_r+0xa64>
 8005202:	4633      	mov	r3, r6
 8005204:	461e      	mov	r6, r3
 8005206:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800520a:	2a30      	cmp	r2, #48	@ 0x30
 800520c:	d0fa      	beq.n	8005204 <_dtoa_r+0xb0c>
 800520e:	e5be      	b.n	8004d8e <_dtoa_r+0x696>
 8005210:	459a      	cmp	sl, r3
 8005212:	d1a4      	bne.n	800515e <_dtoa_r+0xa66>
 8005214:	9b04      	ldr	r3, [sp, #16]
 8005216:	3301      	adds	r3, #1
 8005218:	9304      	str	r3, [sp, #16]
 800521a:	2331      	movs	r3, #49	@ 0x31
 800521c:	f88a 3000 	strb.w	r3, [sl]
 8005220:	e5b5      	b.n	8004d8e <_dtoa_r+0x696>
 8005222:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005224:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005284 <_dtoa_r+0xb8c>
 8005228:	b11b      	cbz	r3, 8005232 <_dtoa_r+0xb3a>
 800522a:	f10a 0308 	add.w	r3, sl, #8
 800522e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	4650      	mov	r0, sl
 8005234:	b017      	add	sp, #92	@ 0x5c
 8005236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800523a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800523c:	2b01      	cmp	r3, #1
 800523e:	f77f ae3d 	ble.w	8004ebc <_dtoa_r+0x7c4>
 8005242:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005244:	930a      	str	r3, [sp, #40]	@ 0x28
 8005246:	2001      	movs	r0, #1
 8005248:	e65b      	b.n	8004f02 <_dtoa_r+0x80a>
 800524a:	9b08      	ldr	r3, [sp, #32]
 800524c:	2b00      	cmp	r3, #0
 800524e:	f77f aed6 	ble.w	8004ffe <_dtoa_r+0x906>
 8005252:	4656      	mov	r6, sl
 8005254:	4621      	mov	r1, r4
 8005256:	4648      	mov	r0, r9
 8005258:	f7ff f9c5 	bl	80045e6 <quorem>
 800525c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005260:	9b08      	ldr	r3, [sp, #32]
 8005262:	f806 8b01 	strb.w	r8, [r6], #1
 8005266:	eba6 020a 	sub.w	r2, r6, sl
 800526a:	4293      	cmp	r3, r2
 800526c:	ddb3      	ble.n	80051d6 <_dtoa_r+0xade>
 800526e:	4649      	mov	r1, r9
 8005270:	2300      	movs	r3, #0
 8005272:	220a      	movs	r2, #10
 8005274:	4658      	mov	r0, fp
 8005276:	f000 f967 	bl	8005548 <__multadd>
 800527a:	4681      	mov	r9, r0
 800527c:	e7ea      	b.n	8005254 <_dtoa_r+0xb5c>
 800527e:	bf00      	nop
 8005280:	080075a2 	.word	0x080075a2
 8005284:	08007526 	.word	0x08007526

08005288 <_free_r>:
 8005288:	b538      	push	{r3, r4, r5, lr}
 800528a:	4605      	mov	r5, r0
 800528c:	2900      	cmp	r1, #0
 800528e:	d040      	beq.n	8005312 <_free_r+0x8a>
 8005290:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005294:	1f0c      	subs	r4, r1, #4
 8005296:	2b00      	cmp	r3, #0
 8005298:	bfb8      	it	lt
 800529a:	18e4      	addlt	r4, r4, r3
 800529c:	f000 f8e6 	bl	800546c <__malloc_lock>
 80052a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005314 <_free_r+0x8c>)
 80052a2:	6813      	ldr	r3, [r2, #0]
 80052a4:	b933      	cbnz	r3, 80052b4 <_free_r+0x2c>
 80052a6:	6063      	str	r3, [r4, #4]
 80052a8:	6014      	str	r4, [r2, #0]
 80052aa:	4628      	mov	r0, r5
 80052ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052b0:	f000 b8e2 	b.w	8005478 <__malloc_unlock>
 80052b4:	42a3      	cmp	r3, r4
 80052b6:	d908      	bls.n	80052ca <_free_r+0x42>
 80052b8:	6820      	ldr	r0, [r4, #0]
 80052ba:	1821      	adds	r1, r4, r0
 80052bc:	428b      	cmp	r3, r1
 80052be:	bf01      	itttt	eq
 80052c0:	6819      	ldreq	r1, [r3, #0]
 80052c2:	685b      	ldreq	r3, [r3, #4]
 80052c4:	1809      	addeq	r1, r1, r0
 80052c6:	6021      	streq	r1, [r4, #0]
 80052c8:	e7ed      	b.n	80052a6 <_free_r+0x1e>
 80052ca:	461a      	mov	r2, r3
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	b10b      	cbz	r3, 80052d4 <_free_r+0x4c>
 80052d0:	42a3      	cmp	r3, r4
 80052d2:	d9fa      	bls.n	80052ca <_free_r+0x42>
 80052d4:	6811      	ldr	r1, [r2, #0]
 80052d6:	1850      	adds	r0, r2, r1
 80052d8:	42a0      	cmp	r0, r4
 80052da:	d10b      	bne.n	80052f4 <_free_r+0x6c>
 80052dc:	6820      	ldr	r0, [r4, #0]
 80052de:	4401      	add	r1, r0
 80052e0:	1850      	adds	r0, r2, r1
 80052e2:	4283      	cmp	r3, r0
 80052e4:	6011      	str	r1, [r2, #0]
 80052e6:	d1e0      	bne.n	80052aa <_free_r+0x22>
 80052e8:	6818      	ldr	r0, [r3, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	4408      	add	r0, r1
 80052ee:	6010      	str	r0, [r2, #0]
 80052f0:	6053      	str	r3, [r2, #4]
 80052f2:	e7da      	b.n	80052aa <_free_r+0x22>
 80052f4:	d902      	bls.n	80052fc <_free_r+0x74>
 80052f6:	230c      	movs	r3, #12
 80052f8:	602b      	str	r3, [r5, #0]
 80052fa:	e7d6      	b.n	80052aa <_free_r+0x22>
 80052fc:	6820      	ldr	r0, [r4, #0]
 80052fe:	1821      	adds	r1, r4, r0
 8005300:	428b      	cmp	r3, r1
 8005302:	bf01      	itttt	eq
 8005304:	6819      	ldreq	r1, [r3, #0]
 8005306:	685b      	ldreq	r3, [r3, #4]
 8005308:	1809      	addeq	r1, r1, r0
 800530a:	6021      	streq	r1, [r4, #0]
 800530c:	6063      	str	r3, [r4, #4]
 800530e:	6054      	str	r4, [r2, #4]
 8005310:	e7cb      	b.n	80052aa <_free_r+0x22>
 8005312:	bd38      	pop	{r3, r4, r5, pc}
 8005314:	200003d8 	.word	0x200003d8

08005318 <malloc>:
 8005318:	4b02      	ldr	r3, [pc, #8]	@ (8005324 <malloc+0xc>)
 800531a:	4601      	mov	r1, r0
 800531c:	6818      	ldr	r0, [r3, #0]
 800531e:	f000 b825 	b.w	800536c <_malloc_r>
 8005322:	bf00      	nop
 8005324:	20000018 	.word	0x20000018

08005328 <sbrk_aligned>:
 8005328:	b570      	push	{r4, r5, r6, lr}
 800532a:	4e0f      	ldr	r6, [pc, #60]	@ (8005368 <sbrk_aligned+0x40>)
 800532c:	460c      	mov	r4, r1
 800532e:	6831      	ldr	r1, [r6, #0]
 8005330:	4605      	mov	r5, r0
 8005332:	b911      	cbnz	r1, 800533a <sbrk_aligned+0x12>
 8005334:	f000 fe40 	bl	8005fb8 <_sbrk_r>
 8005338:	6030      	str	r0, [r6, #0]
 800533a:	4621      	mov	r1, r4
 800533c:	4628      	mov	r0, r5
 800533e:	f000 fe3b 	bl	8005fb8 <_sbrk_r>
 8005342:	1c43      	adds	r3, r0, #1
 8005344:	d103      	bne.n	800534e <sbrk_aligned+0x26>
 8005346:	f04f 34ff 	mov.w	r4, #4294967295
 800534a:	4620      	mov	r0, r4
 800534c:	bd70      	pop	{r4, r5, r6, pc}
 800534e:	1cc4      	adds	r4, r0, #3
 8005350:	f024 0403 	bic.w	r4, r4, #3
 8005354:	42a0      	cmp	r0, r4
 8005356:	d0f8      	beq.n	800534a <sbrk_aligned+0x22>
 8005358:	1a21      	subs	r1, r4, r0
 800535a:	4628      	mov	r0, r5
 800535c:	f000 fe2c 	bl	8005fb8 <_sbrk_r>
 8005360:	3001      	adds	r0, #1
 8005362:	d1f2      	bne.n	800534a <sbrk_aligned+0x22>
 8005364:	e7ef      	b.n	8005346 <sbrk_aligned+0x1e>
 8005366:	bf00      	nop
 8005368:	200003d4 	.word	0x200003d4

0800536c <_malloc_r>:
 800536c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005370:	1ccd      	adds	r5, r1, #3
 8005372:	f025 0503 	bic.w	r5, r5, #3
 8005376:	3508      	adds	r5, #8
 8005378:	2d0c      	cmp	r5, #12
 800537a:	bf38      	it	cc
 800537c:	250c      	movcc	r5, #12
 800537e:	2d00      	cmp	r5, #0
 8005380:	4606      	mov	r6, r0
 8005382:	db01      	blt.n	8005388 <_malloc_r+0x1c>
 8005384:	42a9      	cmp	r1, r5
 8005386:	d904      	bls.n	8005392 <_malloc_r+0x26>
 8005388:	230c      	movs	r3, #12
 800538a:	6033      	str	r3, [r6, #0]
 800538c:	2000      	movs	r0, #0
 800538e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005392:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005468 <_malloc_r+0xfc>
 8005396:	f000 f869 	bl	800546c <__malloc_lock>
 800539a:	f8d8 3000 	ldr.w	r3, [r8]
 800539e:	461c      	mov	r4, r3
 80053a0:	bb44      	cbnz	r4, 80053f4 <_malloc_r+0x88>
 80053a2:	4629      	mov	r1, r5
 80053a4:	4630      	mov	r0, r6
 80053a6:	f7ff ffbf 	bl	8005328 <sbrk_aligned>
 80053aa:	1c43      	adds	r3, r0, #1
 80053ac:	4604      	mov	r4, r0
 80053ae:	d158      	bne.n	8005462 <_malloc_r+0xf6>
 80053b0:	f8d8 4000 	ldr.w	r4, [r8]
 80053b4:	4627      	mov	r7, r4
 80053b6:	2f00      	cmp	r7, #0
 80053b8:	d143      	bne.n	8005442 <_malloc_r+0xd6>
 80053ba:	2c00      	cmp	r4, #0
 80053bc:	d04b      	beq.n	8005456 <_malloc_r+0xea>
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	4639      	mov	r1, r7
 80053c2:	4630      	mov	r0, r6
 80053c4:	eb04 0903 	add.w	r9, r4, r3
 80053c8:	f000 fdf6 	bl	8005fb8 <_sbrk_r>
 80053cc:	4581      	cmp	r9, r0
 80053ce:	d142      	bne.n	8005456 <_malloc_r+0xea>
 80053d0:	6821      	ldr	r1, [r4, #0]
 80053d2:	4630      	mov	r0, r6
 80053d4:	1a6d      	subs	r5, r5, r1
 80053d6:	4629      	mov	r1, r5
 80053d8:	f7ff ffa6 	bl	8005328 <sbrk_aligned>
 80053dc:	3001      	adds	r0, #1
 80053de:	d03a      	beq.n	8005456 <_malloc_r+0xea>
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	442b      	add	r3, r5
 80053e4:	6023      	str	r3, [r4, #0]
 80053e6:	f8d8 3000 	ldr.w	r3, [r8]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	bb62      	cbnz	r2, 8005448 <_malloc_r+0xdc>
 80053ee:	f8c8 7000 	str.w	r7, [r8]
 80053f2:	e00f      	b.n	8005414 <_malloc_r+0xa8>
 80053f4:	6822      	ldr	r2, [r4, #0]
 80053f6:	1b52      	subs	r2, r2, r5
 80053f8:	d420      	bmi.n	800543c <_malloc_r+0xd0>
 80053fa:	2a0b      	cmp	r2, #11
 80053fc:	d917      	bls.n	800542e <_malloc_r+0xc2>
 80053fe:	1961      	adds	r1, r4, r5
 8005400:	42a3      	cmp	r3, r4
 8005402:	6025      	str	r5, [r4, #0]
 8005404:	bf18      	it	ne
 8005406:	6059      	strne	r1, [r3, #4]
 8005408:	6863      	ldr	r3, [r4, #4]
 800540a:	bf08      	it	eq
 800540c:	f8c8 1000 	streq.w	r1, [r8]
 8005410:	5162      	str	r2, [r4, r5]
 8005412:	604b      	str	r3, [r1, #4]
 8005414:	4630      	mov	r0, r6
 8005416:	f000 f82f 	bl	8005478 <__malloc_unlock>
 800541a:	f104 000b 	add.w	r0, r4, #11
 800541e:	1d23      	adds	r3, r4, #4
 8005420:	f020 0007 	bic.w	r0, r0, #7
 8005424:	1ac2      	subs	r2, r0, r3
 8005426:	bf1c      	itt	ne
 8005428:	1a1b      	subne	r3, r3, r0
 800542a:	50a3      	strne	r3, [r4, r2]
 800542c:	e7af      	b.n	800538e <_malloc_r+0x22>
 800542e:	6862      	ldr	r2, [r4, #4]
 8005430:	42a3      	cmp	r3, r4
 8005432:	bf0c      	ite	eq
 8005434:	f8c8 2000 	streq.w	r2, [r8]
 8005438:	605a      	strne	r2, [r3, #4]
 800543a:	e7eb      	b.n	8005414 <_malloc_r+0xa8>
 800543c:	4623      	mov	r3, r4
 800543e:	6864      	ldr	r4, [r4, #4]
 8005440:	e7ae      	b.n	80053a0 <_malloc_r+0x34>
 8005442:	463c      	mov	r4, r7
 8005444:	687f      	ldr	r7, [r7, #4]
 8005446:	e7b6      	b.n	80053b6 <_malloc_r+0x4a>
 8005448:	461a      	mov	r2, r3
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	42a3      	cmp	r3, r4
 800544e:	d1fb      	bne.n	8005448 <_malloc_r+0xdc>
 8005450:	2300      	movs	r3, #0
 8005452:	6053      	str	r3, [r2, #4]
 8005454:	e7de      	b.n	8005414 <_malloc_r+0xa8>
 8005456:	230c      	movs	r3, #12
 8005458:	4630      	mov	r0, r6
 800545a:	6033      	str	r3, [r6, #0]
 800545c:	f000 f80c 	bl	8005478 <__malloc_unlock>
 8005460:	e794      	b.n	800538c <_malloc_r+0x20>
 8005462:	6005      	str	r5, [r0, #0]
 8005464:	e7d6      	b.n	8005414 <_malloc_r+0xa8>
 8005466:	bf00      	nop
 8005468:	200003d8 	.word	0x200003d8

0800546c <__malloc_lock>:
 800546c:	4801      	ldr	r0, [pc, #4]	@ (8005474 <__malloc_lock+0x8>)
 800546e:	f7ff b8aa 	b.w	80045c6 <__retarget_lock_acquire_recursive>
 8005472:	bf00      	nop
 8005474:	200003d0 	.word	0x200003d0

08005478 <__malloc_unlock>:
 8005478:	4801      	ldr	r0, [pc, #4]	@ (8005480 <__malloc_unlock+0x8>)
 800547a:	f7ff b8a5 	b.w	80045c8 <__retarget_lock_release_recursive>
 800547e:	bf00      	nop
 8005480:	200003d0 	.word	0x200003d0

08005484 <_Balloc>:
 8005484:	b570      	push	{r4, r5, r6, lr}
 8005486:	69c6      	ldr	r6, [r0, #28]
 8005488:	4604      	mov	r4, r0
 800548a:	460d      	mov	r5, r1
 800548c:	b976      	cbnz	r6, 80054ac <_Balloc+0x28>
 800548e:	2010      	movs	r0, #16
 8005490:	f7ff ff42 	bl	8005318 <malloc>
 8005494:	4602      	mov	r2, r0
 8005496:	61e0      	str	r0, [r4, #28]
 8005498:	b920      	cbnz	r0, 80054a4 <_Balloc+0x20>
 800549a:	216b      	movs	r1, #107	@ 0x6b
 800549c:	4b17      	ldr	r3, [pc, #92]	@ (80054fc <_Balloc+0x78>)
 800549e:	4818      	ldr	r0, [pc, #96]	@ (8005500 <_Balloc+0x7c>)
 80054a0:	f000 fda8 	bl	8005ff4 <__assert_func>
 80054a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054a8:	6006      	str	r6, [r0, #0]
 80054aa:	60c6      	str	r6, [r0, #12]
 80054ac:	69e6      	ldr	r6, [r4, #28]
 80054ae:	68f3      	ldr	r3, [r6, #12]
 80054b0:	b183      	cbz	r3, 80054d4 <_Balloc+0x50>
 80054b2:	69e3      	ldr	r3, [r4, #28]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80054ba:	b9b8      	cbnz	r0, 80054ec <_Balloc+0x68>
 80054bc:	2101      	movs	r1, #1
 80054be:	fa01 f605 	lsl.w	r6, r1, r5
 80054c2:	1d72      	adds	r2, r6, #5
 80054c4:	4620      	mov	r0, r4
 80054c6:	0092      	lsls	r2, r2, #2
 80054c8:	f000 fdb2 	bl	8006030 <_calloc_r>
 80054cc:	b160      	cbz	r0, 80054e8 <_Balloc+0x64>
 80054ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80054d2:	e00e      	b.n	80054f2 <_Balloc+0x6e>
 80054d4:	2221      	movs	r2, #33	@ 0x21
 80054d6:	2104      	movs	r1, #4
 80054d8:	4620      	mov	r0, r4
 80054da:	f000 fda9 	bl	8006030 <_calloc_r>
 80054de:	69e3      	ldr	r3, [r4, #28]
 80054e0:	60f0      	str	r0, [r6, #12]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1e4      	bne.n	80054b2 <_Balloc+0x2e>
 80054e8:	2000      	movs	r0, #0
 80054ea:	bd70      	pop	{r4, r5, r6, pc}
 80054ec:	6802      	ldr	r2, [r0, #0]
 80054ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80054f2:	2300      	movs	r3, #0
 80054f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80054f8:	e7f7      	b.n	80054ea <_Balloc+0x66>
 80054fa:	bf00      	nop
 80054fc:	08007533 	.word	0x08007533
 8005500:	080075b3 	.word	0x080075b3

08005504 <_Bfree>:
 8005504:	b570      	push	{r4, r5, r6, lr}
 8005506:	69c6      	ldr	r6, [r0, #28]
 8005508:	4605      	mov	r5, r0
 800550a:	460c      	mov	r4, r1
 800550c:	b976      	cbnz	r6, 800552c <_Bfree+0x28>
 800550e:	2010      	movs	r0, #16
 8005510:	f7ff ff02 	bl	8005318 <malloc>
 8005514:	4602      	mov	r2, r0
 8005516:	61e8      	str	r0, [r5, #28]
 8005518:	b920      	cbnz	r0, 8005524 <_Bfree+0x20>
 800551a:	218f      	movs	r1, #143	@ 0x8f
 800551c:	4b08      	ldr	r3, [pc, #32]	@ (8005540 <_Bfree+0x3c>)
 800551e:	4809      	ldr	r0, [pc, #36]	@ (8005544 <_Bfree+0x40>)
 8005520:	f000 fd68 	bl	8005ff4 <__assert_func>
 8005524:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005528:	6006      	str	r6, [r0, #0]
 800552a:	60c6      	str	r6, [r0, #12]
 800552c:	b13c      	cbz	r4, 800553e <_Bfree+0x3a>
 800552e:	69eb      	ldr	r3, [r5, #28]
 8005530:	6862      	ldr	r2, [r4, #4]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005538:	6021      	str	r1, [r4, #0]
 800553a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800553e:	bd70      	pop	{r4, r5, r6, pc}
 8005540:	08007533 	.word	0x08007533
 8005544:	080075b3 	.word	0x080075b3

08005548 <__multadd>:
 8005548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800554c:	4607      	mov	r7, r0
 800554e:	460c      	mov	r4, r1
 8005550:	461e      	mov	r6, r3
 8005552:	2000      	movs	r0, #0
 8005554:	690d      	ldr	r5, [r1, #16]
 8005556:	f101 0c14 	add.w	ip, r1, #20
 800555a:	f8dc 3000 	ldr.w	r3, [ip]
 800555e:	3001      	adds	r0, #1
 8005560:	b299      	uxth	r1, r3
 8005562:	fb02 6101 	mla	r1, r2, r1, r6
 8005566:	0c1e      	lsrs	r6, r3, #16
 8005568:	0c0b      	lsrs	r3, r1, #16
 800556a:	fb02 3306 	mla	r3, r2, r6, r3
 800556e:	b289      	uxth	r1, r1
 8005570:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005574:	4285      	cmp	r5, r0
 8005576:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800557a:	f84c 1b04 	str.w	r1, [ip], #4
 800557e:	dcec      	bgt.n	800555a <__multadd+0x12>
 8005580:	b30e      	cbz	r6, 80055c6 <__multadd+0x7e>
 8005582:	68a3      	ldr	r3, [r4, #8]
 8005584:	42ab      	cmp	r3, r5
 8005586:	dc19      	bgt.n	80055bc <__multadd+0x74>
 8005588:	6861      	ldr	r1, [r4, #4]
 800558a:	4638      	mov	r0, r7
 800558c:	3101      	adds	r1, #1
 800558e:	f7ff ff79 	bl	8005484 <_Balloc>
 8005592:	4680      	mov	r8, r0
 8005594:	b928      	cbnz	r0, 80055a2 <__multadd+0x5a>
 8005596:	4602      	mov	r2, r0
 8005598:	21ba      	movs	r1, #186	@ 0xba
 800559a:	4b0c      	ldr	r3, [pc, #48]	@ (80055cc <__multadd+0x84>)
 800559c:	480c      	ldr	r0, [pc, #48]	@ (80055d0 <__multadd+0x88>)
 800559e:	f000 fd29 	bl	8005ff4 <__assert_func>
 80055a2:	6922      	ldr	r2, [r4, #16]
 80055a4:	f104 010c 	add.w	r1, r4, #12
 80055a8:	3202      	adds	r2, #2
 80055aa:	0092      	lsls	r2, r2, #2
 80055ac:	300c      	adds	r0, #12
 80055ae:	f000 fd13 	bl	8005fd8 <memcpy>
 80055b2:	4621      	mov	r1, r4
 80055b4:	4638      	mov	r0, r7
 80055b6:	f7ff ffa5 	bl	8005504 <_Bfree>
 80055ba:	4644      	mov	r4, r8
 80055bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80055c0:	3501      	adds	r5, #1
 80055c2:	615e      	str	r6, [r3, #20]
 80055c4:	6125      	str	r5, [r4, #16]
 80055c6:	4620      	mov	r0, r4
 80055c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055cc:	080075a2 	.word	0x080075a2
 80055d0:	080075b3 	.word	0x080075b3

080055d4 <__hi0bits>:
 80055d4:	4603      	mov	r3, r0
 80055d6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80055da:	bf3a      	itte	cc
 80055dc:	0403      	lslcc	r3, r0, #16
 80055de:	2010      	movcc	r0, #16
 80055e0:	2000      	movcs	r0, #0
 80055e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055e6:	bf3c      	itt	cc
 80055e8:	021b      	lslcc	r3, r3, #8
 80055ea:	3008      	addcc	r0, #8
 80055ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055f0:	bf3c      	itt	cc
 80055f2:	011b      	lslcc	r3, r3, #4
 80055f4:	3004      	addcc	r0, #4
 80055f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055fa:	bf3c      	itt	cc
 80055fc:	009b      	lslcc	r3, r3, #2
 80055fe:	3002      	addcc	r0, #2
 8005600:	2b00      	cmp	r3, #0
 8005602:	db05      	blt.n	8005610 <__hi0bits+0x3c>
 8005604:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005608:	f100 0001 	add.w	r0, r0, #1
 800560c:	bf08      	it	eq
 800560e:	2020      	moveq	r0, #32
 8005610:	4770      	bx	lr

08005612 <__lo0bits>:
 8005612:	6803      	ldr	r3, [r0, #0]
 8005614:	4602      	mov	r2, r0
 8005616:	f013 0007 	ands.w	r0, r3, #7
 800561a:	d00b      	beq.n	8005634 <__lo0bits+0x22>
 800561c:	07d9      	lsls	r1, r3, #31
 800561e:	d421      	bmi.n	8005664 <__lo0bits+0x52>
 8005620:	0798      	lsls	r0, r3, #30
 8005622:	bf49      	itett	mi
 8005624:	085b      	lsrmi	r3, r3, #1
 8005626:	089b      	lsrpl	r3, r3, #2
 8005628:	2001      	movmi	r0, #1
 800562a:	6013      	strmi	r3, [r2, #0]
 800562c:	bf5c      	itt	pl
 800562e:	2002      	movpl	r0, #2
 8005630:	6013      	strpl	r3, [r2, #0]
 8005632:	4770      	bx	lr
 8005634:	b299      	uxth	r1, r3
 8005636:	b909      	cbnz	r1, 800563c <__lo0bits+0x2a>
 8005638:	2010      	movs	r0, #16
 800563a:	0c1b      	lsrs	r3, r3, #16
 800563c:	b2d9      	uxtb	r1, r3
 800563e:	b909      	cbnz	r1, 8005644 <__lo0bits+0x32>
 8005640:	3008      	adds	r0, #8
 8005642:	0a1b      	lsrs	r3, r3, #8
 8005644:	0719      	lsls	r1, r3, #28
 8005646:	bf04      	itt	eq
 8005648:	091b      	lsreq	r3, r3, #4
 800564a:	3004      	addeq	r0, #4
 800564c:	0799      	lsls	r1, r3, #30
 800564e:	bf04      	itt	eq
 8005650:	089b      	lsreq	r3, r3, #2
 8005652:	3002      	addeq	r0, #2
 8005654:	07d9      	lsls	r1, r3, #31
 8005656:	d403      	bmi.n	8005660 <__lo0bits+0x4e>
 8005658:	085b      	lsrs	r3, r3, #1
 800565a:	f100 0001 	add.w	r0, r0, #1
 800565e:	d003      	beq.n	8005668 <__lo0bits+0x56>
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	4770      	bx	lr
 8005664:	2000      	movs	r0, #0
 8005666:	4770      	bx	lr
 8005668:	2020      	movs	r0, #32
 800566a:	4770      	bx	lr

0800566c <__i2b>:
 800566c:	b510      	push	{r4, lr}
 800566e:	460c      	mov	r4, r1
 8005670:	2101      	movs	r1, #1
 8005672:	f7ff ff07 	bl	8005484 <_Balloc>
 8005676:	4602      	mov	r2, r0
 8005678:	b928      	cbnz	r0, 8005686 <__i2b+0x1a>
 800567a:	f240 1145 	movw	r1, #325	@ 0x145
 800567e:	4b04      	ldr	r3, [pc, #16]	@ (8005690 <__i2b+0x24>)
 8005680:	4804      	ldr	r0, [pc, #16]	@ (8005694 <__i2b+0x28>)
 8005682:	f000 fcb7 	bl	8005ff4 <__assert_func>
 8005686:	2301      	movs	r3, #1
 8005688:	6144      	str	r4, [r0, #20]
 800568a:	6103      	str	r3, [r0, #16]
 800568c:	bd10      	pop	{r4, pc}
 800568e:	bf00      	nop
 8005690:	080075a2 	.word	0x080075a2
 8005694:	080075b3 	.word	0x080075b3

08005698 <__multiply>:
 8005698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800569c:	4614      	mov	r4, r2
 800569e:	690a      	ldr	r2, [r1, #16]
 80056a0:	6923      	ldr	r3, [r4, #16]
 80056a2:	460f      	mov	r7, r1
 80056a4:	429a      	cmp	r2, r3
 80056a6:	bfa2      	ittt	ge
 80056a8:	4623      	movge	r3, r4
 80056aa:	460c      	movge	r4, r1
 80056ac:	461f      	movge	r7, r3
 80056ae:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80056b2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80056b6:	68a3      	ldr	r3, [r4, #8]
 80056b8:	6861      	ldr	r1, [r4, #4]
 80056ba:	eb0a 0609 	add.w	r6, sl, r9
 80056be:	42b3      	cmp	r3, r6
 80056c0:	b085      	sub	sp, #20
 80056c2:	bfb8      	it	lt
 80056c4:	3101      	addlt	r1, #1
 80056c6:	f7ff fedd 	bl	8005484 <_Balloc>
 80056ca:	b930      	cbnz	r0, 80056da <__multiply+0x42>
 80056cc:	4602      	mov	r2, r0
 80056ce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80056d2:	4b43      	ldr	r3, [pc, #268]	@ (80057e0 <__multiply+0x148>)
 80056d4:	4843      	ldr	r0, [pc, #268]	@ (80057e4 <__multiply+0x14c>)
 80056d6:	f000 fc8d 	bl	8005ff4 <__assert_func>
 80056da:	f100 0514 	add.w	r5, r0, #20
 80056de:	462b      	mov	r3, r5
 80056e0:	2200      	movs	r2, #0
 80056e2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80056e6:	4543      	cmp	r3, r8
 80056e8:	d321      	bcc.n	800572e <__multiply+0x96>
 80056ea:	f107 0114 	add.w	r1, r7, #20
 80056ee:	f104 0214 	add.w	r2, r4, #20
 80056f2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80056f6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80056fa:	9302      	str	r3, [sp, #8]
 80056fc:	1b13      	subs	r3, r2, r4
 80056fe:	3b15      	subs	r3, #21
 8005700:	f023 0303 	bic.w	r3, r3, #3
 8005704:	3304      	adds	r3, #4
 8005706:	f104 0715 	add.w	r7, r4, #21
 800570a:	42ba      	cmp	r2, r7
 800570c:	bf38      	it	cc
 800570e:	2304      	movcc	r3, #4
 8005710:	9301      	str	r3, [sp, #4]
 8005712:	9b02      	ldr	r3, [sp, #8]
 8005714:	9103      	str	r1, [sp, #12]
 8005716:	428b      	cmp	r3, r1
 8005718:	d80c      	bhi.n	8005734 <__multiply+0x9c>
 800571a:	2e00      	cmp	r6, #0
 800571c:	dd03      	ble.n	8005726 <__multiply+0x8e>
 800571e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005722:	2b00      	cmp	r3, #0
 8005724:	d05a      	beq.n	80057dc <__multiply+0x144>
 8005726:	6106      	str	r6, [r0, #16]
 8005728:	b005      	add	sp, #20
 800572a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800572e:	f843 2b04 	str.w	r2, [r3], #4
 8005732:	e7d8      	b.n	80056e6 <__multiply+0x4e>
 8005734:	f8b1 a000 	ldrh.w	sl, [r1]
 8005738:	f1ba 0f00 	cmp.w	sl, #0
 800573c:	d023      	beq.n	8005786 <__multiply+0xee>
 800573e:	46a9      	mov	r9, r5
 8005740:	f04f 0c00 	mov.w	ip, #0
 8005744:	f104 0e14 	add.w	lr, r4, #20
 8005748:	f85e 7b04 	ldr.w	r7, [lr], #4
 800574c:	f8d9 3000 	ldr.w	r3, [r9]
 8005750:	fa1f fb87 	uxth.w	fp, r7
 8005754:	b29b      	uxth	r3, r3
 8005756:	fb0a 330b 	mla	r3, sl, fp, r3
 800575a:	4463      	add	r3, ip
 800575c:	f8d9 c000 	ldr.w	ip, [r9]
 8005760:	0c3f      	lsrs	r7, r7, #16
 8005762:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005766:	fb0a c707 	mla	r7, sl, r7, ip
 800576a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800576e:	b29b      	uxth	r3, r3
 8005770:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005774:	4572      	cmp	r2, lr
 8005776:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800577a:	f849 3b04 	str.w	r3, [r9], #4
 800577e:	d8e3      	bhi.n	8005748 <__multiply+0xb0>
 8005780:	9b01      	ldr	r3, [sp, #4]
 8005782:	f845 c003 	str.w	ip, [r5, r3]
 8005786:	9b03      	ldr	r3, [sp, #12]
 8005788:	3104      	adds	r1, #4
 800578a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800578e:	f1b9 0f00 	cmp.w	r9, #0
 8005792:	d021      	beq.n	80057d8 <__multiply+0x140>
 8005794:	46ae      	mov	lr, r5
 8005796:	f04f 0a00 	mov.w	sl, #0
 800579a:	682b      	ldr	r3, [r5, #0]
 800579c:	f104 0c14 	add.w	ip, r4, #20
 80057a0:	f8bc b000 	ldrh.w	fp, [ip]
 80057a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	fb09 770b 	mla	r7, r9, fp, r7
 80057ae:	4457      	add	r7, sl
 80057b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80057b4:	f84e 3b04 	str.w	r3, [lr], #4
 80057b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80057bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80057c0:	f8be 3000 	ldrh.w	r3, [lr]
 80057c4:	4562      	cmp	r2, ip
 80057c6:	fb09 330a 	mla	r3, r9, sl, r3
 80057ca:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80057ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80057d2:	d8e5      	bhi.n	80057a0 <__multiply+0x108>
 80057d4:	9f01      	ldr	r7, [sp, #4]
 80057d6:	51eb      	str	r3, [r5, r7]
 80057d8:	3504      	adds	r5, #4
 80057da:	e79a      	b.n	8005712 <__multiply+0x7a>
 80057dc:	3e01      	subs	r6, #1
 80057de:	e79c      	b.n	800571a <__multiply+0x82>
 80057e0:	080075a2 	.word	0x080075a2
 80057e4:	080075b3 	.word	0x080075b3

080057e8 <__pow5mult>:
 80057e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057ec:	4615      	mov	r5, r2
 80057ee:	f012 0203 	ands.w	r2, r2, #3
 80057f2:	4607      	mov	r7, r0
 80057f4:	460e      	mov	r6, r1
 80057f6:	d007      	beq.n	8005808 <__pow5mult+0x20>
 80057f8:	4c25      	ldr	r4, [pc, #148]	@ (8005890 <__pow5mult+0xa8>)
 80057fa:	3a01      	subs	r2, #1
 80057fc:	2300      	movs	r3, #0
 80057fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005802:	f7ff fea1 	bl	8005548 <__multadd>
 8005806:	4606      	mov	r6, r0
 8005808:	10ad      	asrs	r5, r5, #2
 800580a:	d03d      	beq.n	8005888 <__pow5mult+0xa0>
 800580c:	69fc      	ldr	r4, [r7, #28]
 800580e:	b97c      	cbnz	r4, 8005830 <__pow5mult+0x48>
 8005810:	2010      	movs	r0, #16
 8005812:	f7ff fd81 	bl	8005318 <malloc>
 8005816:	4602      	mov	r2, r0
 8005818:	61f8      	str	r0, [r7, #28]
 800581a:	b928      	cbnz	r0, 8005828 <__pow5mult+0x40>
 800581c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005820:	4b1c      	ldr	r3, [pc, #112]	@ (8005894 <__pow5mult+0xac>)
 8005822:	481d      	ldr	r0, [pc, #116]	@ (8005898 <__pow5mult+0xb0>)
 8005824:	f000 fbe6 	bl	8005ff4 <__assert_func>
 8005828:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800582c:	6004      	str	r4, [r0, #0]
 800582e:	60c4      	str	r4, [r0, #12]
 8005830:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005834:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005838:	b94c      	cbnz	r4, 800584e <__pow5mult+0x66>
 800583a:	f240 2171 	movw	r1, #625	@ 0x271
 800583e:	4638      	mov	r0, r7
 8005840:	f7ff ff14 	bl	800566c <__i2b>
 8005844:	2300      	movs	r3, #0
 8005846:	4604      	mov	r4, r0
 8005848:	f8c8 0008 	str.w	r0, [r8, #8]
 800584c:	6003      	str	r3, [r0, #0]
 800584e:	f04f 0900 	mov.w	r9, #0
 8005852:	07eb      	lsls	r3, r5, #31
 8005854:	d50a      	bpl.n	800586c <__pow5mult+0x84>
 8005856:	4631      	mov	r1, r6
 8005858:	4622      	mov	r2, r4
 800585a:	4638      	mov	r0, r7
 800585c:	f7ff ff1c 	bl	8005698 <__multiply>
 8005860:	4680      	mov	r8, r0
 8005862:	4631      	mov	r1, r6
 8005864:	4638      	mov	r0, r7
 8005866:	f7ff fe4d 	bl	8005504 <_Bfree>
 800586a:	4646      	mov	r6, r8
 800586c:	106d      	asrs	r5, r5, #1
 800586e:	d00b      	beq.n	8005888 <__pow5mult+0xa0>
 8005870:	6820      	ldr	r0, [r4, #0]
 8005872:	b938      	cbnz	r0, 8005884 <__pow5mult+0x9c>
 8005874:	4622      	mov	r2, r4
 8005876:	4621      	mov	r1, r4
 8005878:	4638      	mov	r0, r7
 800587a:	f7ff ff0d 	bl	8005698 <__multiply>
 800587e:	6020      	str	r0, [r4, #0]
 8005880:	f8c0 9000 	str.w	r9, [r0]
 8005884:	4604      	mov	r4, r0
 8005886:	e7e4      	b.n	8005852 <__pow5mult+0x6a>
 8005888:	4630      	mov	r0, r6
 800588a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800588e:	bf00      	nop
 8005890:	0800760c 	.word	0x0800760c
 8005894:	08007533 	.word	0x08007533
 8005898:	080075b3 	.word	0x080075b3

0800589c <__lshift>:
 800589c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058a0:	460c      	mov	r4, r1
 80058a2:	4607      	mov	r7, r0
 80058a4:	4691      	mov	r9, r2
 80058a6:	6923      	ldr	r3, [r4, #16]
 80058a8:	6849      	ldr	r1, [r1, #4]
 80058aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80058ae:	68a3      	ldr	r3, [r4, #8]
 80058b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80058b4:	f108 0601 	add.w	r6, r8, #1
 80058b8:	42b3      	cmp	r3, r6
 80058ba:	db0b      	blt.n	80058d4 <__lshift+0x38>
 80058bc:	4638      	mov	r0, r7
 80058be:	f7ff fde1 	bl	8005484 <_Balloc>
 80058c2:	4605      	mov	r5, r0
 80058c4:	b948      	cbnz	r0, 80058da <__lshift+0x3e>
 80058c6:	4602      	mov	r2, r0
 80058c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80058cc:	4b27      	ldr	r3, [pc, #156]	@ (800596c <__lshift+0xd0>)
 80058ce:	4828      	ldr	r0, [pc, #160]	@ (8005970 <__lshift+0xd4>)
 80058d0:	f000 fb90 	bl	8005ff4 <__assert_func>
 80058d4:	3101      	adds	r1, #1
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	e7ee      	b.n	80058b8 <__lshift+0x1c>
 80058da:	2300      	movs	r3, #0
 80058dc:	f100 0114 	add.w	r1, r0, #20
 80058e0:	f100 0210 	add.w	r2, r0, #16
 80058e4:	4618      	mov	r0, r3
 80058e6:	4553      	cmp	r3, sl
 80058e8:	db33      	blt.n	8005952 <__lshift+0xb6>
 80058ea:	6920      	ldr	r0, [r4, #16]
 80058ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80058f0:	f104 0314 	add.w	r3, r4, #20
 80058f4:	f019 091f 	ands.w	r9, r9, #31
 80058f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80058fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005900:	d02b      	beq.n	800595a <__lshift+0xbe>
 8005902:	468a      	mov	sl, r1
 8005904:	2200      	movs	r2, #0
 8005906:	f1c9 0e20 	rsb	lr, r9, #32
 800590a:	6818      	ldr	r0, [r3, #0]
 800590c:	fa00 f009 	lsl.w	r0, r0, r9
 8005910:	4310      	orrs	r0, r2
 8005912:	f84a 0b04 	str.w	r0, [sl], #4
 8005916:	f853 2b04 	ldr.w	r2, [r3], #4
 800591a:	459c      	cmp	ip, r3
 800591c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005920:	d8f3      	bhi.n	800590a <__lshift+0x6e>
 8005922:	ebac 0304 	sub.w	r3, ip, r4
 8005926:	3b15      	subs	r3, #21
 8005928:	f023 0303 	bic.w	r3, r3, #3
 800592c:	3304      	adds	r3, #4
 800592e:	f104 0015 	add.w	r0, r4, #21
 8005932:	4584      	cmp	ip, r0
 8005934:	bf38      	it	cc
 8005936:	2304      	movcc	r3, #4
 8005938:	50ca      	str	r2, [r1, r3]
 800593a:	b10a      	cbz	r2, 8005940 <__lshift+0xa4>
 800593c:	f108 0602 	add.w	r6, r8, #2
 8005940:	3e01      	subs	r6, #1
 8005942:	4638      	mov	r0, r7
 8005944:	4621      	mov	r1, r4
 8005946:	612e      	str	r6, [r5, #16]
 8005948:	f7ff fddc 	bl	8005504 <_Bfree>
 800594c:	4628      	mov	r0, r5
 800594e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005952:	f842 0f04 	str.w	r0, [r2, #4]!
 8005956:	3301      	adds	r3, #1
 8005958:	e7c5      	b.n	80058e6 <__lshift+0x4a>
 800595a:	3904      	subs	r1, #4
 800595c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005960:	459c      	cmp	ip, r3
 8005962:	f841 2f04 	str.w	r2, [r1, #4]!
 8005966:	d8f9      	bhi.n	800595c <__lshift+0xc0>
 8005968:	e7ea      	b.n	8005940 <__lshift+0xa4>
 800596a:	bf00      	nop
 800596c:	080075a2 	.word	0x080075a2
 8005970:	080075b3 	.word	0x080075b3

08005974 <__mcmp>:
 8005974:	4603      	mov	r3, r0
 8005976:	690a      	ldr	r2, [r1, #16]
 8005978:	6900      	ldr	r0, [r0, #16]
 800597a:	b530      	push	{r4, r5, lr}
 800597c:	1a80      	subs	r0, r0, r2
 800597e:	d10e      	bne.n	800599e <__mcmp+0x2a>
 8005980:	3314      	adds	r3, #20
 8005982:	3114      	adds	r1, #20
 8005984:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005988:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800598c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005990:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005994:	4295      	cmp	r5, r2
 8005996:	d003      	beq.n	80059a0 <__mcmp+0x2c>
 8005998:	d205      	bcs.n	80059a6 <__mcmp+0x32>
 800599a:	f04f 30ff 	mov.w	r0, #4294967295
 800599e:	bd30      	pop	{r4, r5, pc}
 80059a0:	42a3      	cmp	r3, r4
 80059a2:	d3f3      	bcc.n	800598c <__mcmp+0x18>
 80059a4:	e7fb      	b.n	800599e <__mcmp+0x2a>
 80059a6:	2001      	movs	r0, #1
 80059a8:	e7f9      	b.n	800599e <__mcmp+0x2a>
	...

080059ac <__mdiff>:
 80059ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b0:	4689      	mov	r9, r1
 80059b2:	4606      	mov	r6, r0
 80059b4:	4611      	mov	r1, r2
 80059b6:	4648      	mov	r0, r9
 80059b8:	4614      	mov	r4, r2
 80059ba:	f7ff ffdb 	bl	8005974 <__mcmp>
 80059be:	1e05      	subs	r5, r0, #0
 80059c0:	d112      	bne.n	80059e8 <__mdiff+0x3c>
 80059c2:	4629      	mov	r1, r5
 80059c4:	4630      	mov	r0, r6
 80059c6:	f7ff fd5d 	bl	8005484 <_Balloc>
 80059ca:	4602      	mov	r2, r0
 80059cc:	b928      	cbnz	r0, 80059da <__mdiff+0x2e>
 80059ce:	f240 2137 	movw	r1, #567	@ 0x237
 80059d2:	4b3e      	ldr	r3, [pc, #248]	@ (8005acc <__mdiff+0x120>)
 80059d4:	483e      	ldr	r0, [pc, #248]	@ (8005ad0 <__mdiff+0x124>)
 80059d6:	f000 fb0d 	bl	8005ff4 <__assert_func>
 80059da:	2301      	movs	r3, #1
 80059dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80059e0:	4610      	mov	r0, r2
 80059e2:	b003      	add	sp, #12
 80059e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059e8:	bfbc      	itt	lt
 80059ea:	464b      	movlt	r3, r9
 80059ec:	46a1      	movlt	r9, r4
 80059ee:	4630      	mov	r0, r6
 80059f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80059f4:	bfba      	itte	lt
 80059f6:	461c      	movlt	r4, r3
 80059f8:	2501      	movlt	r5, #1
 80059fa:	2500      	movge	r5, #0
 80059fc:	f7ff fd42 	bl	8005484 <_Balloc>
 8005a00:	4602      	mov	r2, r0
 8005a02:	b918      	cbnz	r0, 8005a0c <__mdiff+0x60>
 8005a04:	f240 2145 	movw	r1, #581	@ 0x245
 8005a08:	4b30      	ldr	r3, [pc, #192]	@ (8005acc <__mdiff+0x120>)
 8005a0a:	e7e3      	b.n	80059d4 <__mdiff+0x28>
 8005a0c:	f100 0b14 	add.w	fp, r0, #20
 8005a10:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005a14:	f109 0310 	add.w	r3, r9, #16
 8005a18:	60c5      	str	r5, [r0, #12]
 8005a1a:	f04f 0c00 	mov.w	ip, #0
 8005a1e:	f109 0514 	add.w	r5, r9, #20
 8005a22:	46d9      	mov	r9, fp
 8005a24:	6926      	ldr	r6, [r4, #16]
 8005a26:	f104 0e14 	add.w	lr, r4, #20
 8005a2a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005a2e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005a32:	9301      	str	r3, [sp, #4]
 8005a34:	9b01      	ldr	r3, [sp, #4]
 8005a36:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005a3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005a3e:	b281      	uxth	r1, r0
 8005a40:	9301      	str	r3, [sp, #4]
 8005a42:	fa1f f38a 	uxth.w	r3, sl
 8005a46:	1a5b      	subs	r3, r3, r1
 8005a48:	0c00      	lsrs	r0, r0, #16
 8005a4a:	4463      	add	r3, ip
 8005a4c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005a50:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005a5a:	4576      	cmp	r6, lr
 8005a5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005a60:	f849 3b04 	str.w	r3, [r9], #4
 8005a64:	d8e6      	bhi.n	8005a34 <__mdiff+0x88>
 8005a66:	1b33      	subs	r3, r6, r4
 8005a68:	3b15      	subs	r3, #21
 8005a6a:	f023 0303 	bic.w	r3, r3, #3
 8005a6e:	3415      	adds	r4, #21
 8005a70:	3304      	adds	r3, #4
 8005a72:	42a6      	cmp	r6, r4
 8005a74:	bf38      	it	cc
 8005a76:	2304      	movcc	r3, #4
 8005a78:	441d      	add	r5, r3
 8005a7a:	445b      	add	r3, fp
 8005a7c:	461e      	mov	r6, r3
 8005a7e:	462c      	mov	r4, r5
 8005a80:	4544      	cmp	r4, r8
 8005a82:	d30e      	bcc.n	8005aa2 <__mdiff+0xf6>
 8005a84:	f108 0103 	add.w	r1, r8, #3
 8005a88:	1b49      	subs	r1, r1, r5
 8005a8a:	f021 0103 	bic.w	r1, r1, #3
 8005a8e:	3d03      	subs	r5, #3
 8005a90:	45a8      	cmp	r8, r5
 8005a92:	bf38      	it	cc
 8005a94:	2100      	movcc	r1, #0
 8005a96:	440b      	add	r3, r1
 8005a98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005a9c:	b199      	cbz	r1, 8005ac6 <__mdiff+0x11a>
 8005a9e:	6117      	str	r7, [r2, #16]
 8005aa0:	e79e      	b.n	80059e0 <__mdiff+0x34>
 8005aa2:	46e6      	mov	lr, ip
 8005aa4:	f854 1b04 	ldr.w	r1, [r4], #4
 8005aa8:	fa1f fc81 	uxth.w	ip, r1
 8005aac:	44f4      	add	ip, lr
 8005aae:	0c08      	lsrs	r0, r1, #16
 8005ab0:	4471      	add	r1, lr
 8005ab2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005ab6:	b289      	uxth	r1, r1
 8005ab8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005abc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005ac0:	f846 1b04 	str.w	r1, [r6], #4
 8005ac4:	e7dc      	b.n	8005a80 <__mdiff+0xd4>
 8005ac6:	3f01      	subs	r7, #1
 8005ac8:	e7e6      	b.n	8005a98 <__mdiff+0xec>
 8005aca:	bf00      	nop
 8005acc:	080075a2 	.word	0x080075a2
 8005ad0:	080075b3 	.word	0x080075b3

08005ad4 <__d2b>:
 8005ad4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005ad8:	2101      	movs	r1, #1
 8005ada:	4690      	mov	r8, r2
 8005adc:	4699      	mov	r9, r3
 8005ade:	9e08      	ldr	r6, [sp, #32]
 8005ae0:	f7ff fcd0 	bl	8005484 <_Balloc>
 8005ae4:	4604      	mov	r4, r0
 8005ae6:	b930      	cbnz	r0, 8005af6 <__d2b+0x22>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	f240 310f 	movw	r1, #783	@ 0x30f
 8005aee:	4b23      	ldr	r3, [pc, #140]	@ (8005b7c <__d2b+0xa8>)
 8005af0:	4823      	ldr	r0, [pc, #140]	@ (8005b80 <__d2b+0xac>)
 8005af2:	f000 fa7f 	bl	8005ff4 <__assert_func>
 8005af6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005afa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005afe:	b10d      	cbz	r5, 8005b04 <__d2b+0x30>
 8005b00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b04:	9301      	str	r3, [sp, #4]
 8005b06:	f1b8 0300 	subs.w	r3, r8, #0
 8005b0a:	d024      	beq.n	8005b56 <__d2b+0x82>
 8005b0c:	4668      	mov	r0, sp
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	f7ff fd7f 	bl	8005612 <__lo0bits>
 8005b14:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005b18:	b1d8      	cbz	r0, 8005b52 <__d2b+0x7e>
 8005b1a:	f1c0 0320 	rsb	r3, r0, #32
 8005b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b22:	430b      	orrs	r3, r1
 8005b24:	40c2      	lsrs	r2, r0
 8005b26:	6163      	str	r3, [r4, #20]
 8005b28:	9201      	str	r2, [sp, #4]
 8005b2a:	9b01      	ldr	r3, [sp, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	bf0c      	ite	eq
 8005b30:	2201      	moveq	r2, #1
 8005b32:	2202      	movne	r2, #2
 8005b34:	61a3      	str	r3, [r4, #24]
 8005b36:	6122      	str	r2, [r4, #16]
 8005b38:	b1ad      	cbz	r5, 8005b66 <__d2b+0x92>
 8005b3a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005b3e:	4405      	add	r5, r0
 8005b40:	6035      	str	r5, [r6, #0]
 8005b42:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b48:	6018      	str	r0, [r3, #0]
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	b002      	add	sp, #8
 8005b4e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005b52:	6161      	str	r1, [r4, #20]
 8005b54:	e7e9      	b.n	8005b2a <__d2b+0x56>
 8005b56:	a801      	add	r0, sp, #4
 8005b58:	f7ff fd5b 	bl	8005612 <__lo0bits>
 8005b5c:	9b01      	ldr	r3, [sp, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	6163      	str	r3, [r4, #20]
 8005b62:	3020      	adds	r0, #32
 8005b64:	e7e7      	b.n	8005b36 <__d2b+0x62>
 8005b66:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005b6a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005b6e:	6030      	str	r0, [r6, #0]
 8005b70:	6918      	ldr	r0, [r3, #16]
 8005b72:	f7ff fd2f 	bl	80055d4 <__hi0bits>
 8005b76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005b7a:	e7e4      	b.n	8005b46 <__d2b+0x72>
 8005b7c:	080075a2 	.word	0x080075a2
 8005b80:	080075b3 	.word	0x080075b3

08005b84 <__ssputs_r>:
 8005b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b88:	461f      	mov	r7, r3
 8005b8a:	688e      	ldr	r6, [r1, #8]
 8005b8c:	4682      	mov	sl, r0
 8005b8e:	42be      	cmp	r6, r7
 8005b90:	460c      	mov	r4, r1
 8005b92:	4690      	mov	r8, r2
 8005b94:	680b      	ldr	r3, [r1, #0]
 8005b96:	d82d      	bhi.n	8005bf4 <__ssputs_r+0x70>
 8005b98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005ba0:	d026      	beq.n	8005bf0 <__ssputs_r+0x6c>
 8005ba2:	6965      	ldr	r5, [r4, #20]
 8005ba4:	6909      	ldr	r1, [r1, #16]
 8005ba6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005baa:	eba3 0901 	sub.w	r9, r3, r1
 8005bae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005bb2:	1c7b      	adds	r3, r7, #1
 8005bb4:	444b      	add	r3, r9
 8005bb6:	106d      	asrs	r5, r5, #1
 8005bb8:	429d      	cmp	r5, r3
 8005bba:	bf38      	it	cc
 8005bbc:	461d      	movcc	r5, r3
 8005bbe:	0553      	lsls	r3, r2, #21
 8005bc0:	d527      	bpl.n	8005c12 <__ssputs_r+0x8e>
 8005bc2:	4629      	mov	r1, r5
 8005bc4:	f7ff fbd2 	bl	800536c <_malloc_r>
 8005bc8:	4606      	mov	r6, r0
 8005bca:	b360      	cbz	r0, 8005c26 <__ssputs_r+0xa2>
 8005bcc:	464a      	mov	r2, r9
 8005bce:	6921      	ldr	r1, [r4, #16]
 8005bd0:	f000 fa02 	bl	8005fd8 <memcpy>
 8005bd4:	89a3      	ldrh	r3, [r4, #12]
 8005bd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005bda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bde:	81a3      	strh	r3, [r4, #12]
 8005be0:	6126      	str	r6, [r4, #16]
 8005be2:	444e      	add	r6, r9
 8005be4:	6026      	str	r6, [r4, #0]
 8005be6:	463e      	mov	r6, r7
 8005be8:	6165      	str	r5, [r4, #20]
 8005bea:	eba5 0509 	sub.w	r5, r5, r9
 8005bee:	60a5      	str	r5, [r4, #8]
 8005bf0:	42be      	cmp	r6, r7
 8005bf2:	d900      	bls.n	8005bf6 <__ssputs_r+0x72>
 8005bf4:	463e      	mov	r6, r7
 8005bf6:	4632      	mov	r2, r6
 8005bf8:	4641      	mov	r1, r8
 8005bfa:	6820      	ldr	r0, [r4, #0]
 8005bfc:	f000 f9c2 	bl	8005f84 <memmove>
 8005c00:	2000      	movs	r0, #0
 8005c02:	68a3      	ldr	r3, [r4, #8]
 8005c04:	1b9b      	subs	r3, r3, r6
 8005c06:	60a3      	str	r3, [r4, #8]
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	4433      	add	r3, r6
 8005c0c:	6023      	str	r3, [r4, #0]
 8005c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c12:	462a      	mov	r2, r5
 8005c14:	f000 fa32 	bl	800607c <_realloc_r>
 8005c18:	4606      	mov	r6, r0
 8005c1a:	2800      	cmp	r0, #0
 8005c1c:	d1e0      	bne.n	8005be0 <__ssputs_r+0x5c>
 8005c1e:	4650      	mov	r0, sl
 8005c20:	6921      	ldr	r1, [r4, #16]
 8005c22:	f7ff fb31 	bl	8005288 <_free_r>
 8005c26:	230c      	movs	r3, #12
 8005c28:	f8ca 3000 	str.w	r3, [sl]
 8005c2c:	89a3      	ldrh	r3, [r4, #12]
 8005c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c36:	81a3      	strh	r3, [r4, #12]
 8005c38:	e7e9      	b.n	8005c0e <__ssputs_r+0x8a>
	...

08005c3c <_svfiprintf_r>:
 8005c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c40:	4698      	mov	r8, r3
 8005c42:	898b      	ldrh	r3, [r1, #12]
 8005c44:	4607      	mov	r7, r0
 8005c46:	061b      	lsls	r3, r3, #24
 8005c48:	460d      	mov	r5, r1
 8005c4a:	4614      	mov	r4, r2
 8005c4c:	b09d      	sub	sp, #116	@ 0x74
 8005c4e:	d510      	bpl.n	8005c72 <_svfiprintf_r+0x36>
 8005c50:	690b      	ldr	r3, [r1, #16]
 8005c52:	b973      	cbnz	r3, 8005c72 <_svfiprintf_r+0x36>
 8005c54:	2140      	movs	r1, #64	@ 0x40
 8005c56:	f7ff fb89 	bl	800536c <_malloc_r>
 8005c5a:	6028      	str	r0, [r5, #0]
 8005c5c:	6128      	str	r0, [r5, #16]
 8005c5e:	b930      	cbnz	r0, 8005c6e <_svfiprintf_r+0x32>
 8005c60:	230c      	movs	r3, #12
 8005c62:	603b      	str	r3, [r7, #0]
 8005c64:	f04f 30ff 	mov.w	r0, #4294967295
 8005c68:	b01d      	add	sp, #116	@ 0x74
 8005c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c6e:	2340      	movs	r3, #64	@ 0x40
 8005c70:	616b      	str	r3, [r5, #20]
 8005c72:	2300      	movs	r3, #0
 8005c74:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c76:	2320      	movs	r3, #32
 8005c78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c7c:	2330      	movs	r3, #48	@ 0x30
 8005c7e:	f04f 0901 	mov.w	r9, #1
 8005c82:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c86:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005e20 <_svfiprintf_r+0x1e4>
 8005c8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c8e:	4623      	mov	r3, r4
 8005c90:	469a      	mov	sl, r3
 8005c92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c96:	b10a      	cbz	r2, 8005c9c <_svfiprintf_r+0x60>
 8005c98:	2a25      	cmp	r2, #37	@ 0x25
 8005c9a:	d1f9      	bne.n	8005c90 <_svfiprintf_r+0x54>
 8005c9c:	ebba 0b04 	subs.w	fp, sl, r4
 8005ca0:	d00b      	beq.n	8005cba <_svfiprintf_r+0x7e>
 8005ca2:	465b      	mov	r3, fp
 8005ca4:	4622      	mov	r2, r4
 8005ca6:	4629      	mov	r1, r5
 8005ca8:	4638      	mov	r0, r7
 8005caa:	f7ff ff6b 	bl	8005b84 <__ssputs_r>
 8005cae:	3001      	adds	r0, #1
 8005cb0:	f000 80a7 	beq.w	8005e02 <_svfiprintf_r+0x1c6>
 8005cb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cb6:	445a      	add	r2, fp
 8005cb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8005cba:	f89a 3000 	ldrb.w	r3, [sl]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f000 809f 	beq.w	8005e02 <_svfiprintf_r+0x1c6>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8005cca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cce:	f10a 0a01 	add.w	sl, sl, #1
 8005cd2:	9304      	str	r3, [sp, #16]
 8005cd4:	9307      	str	r3, [sp, #28]
 8005cd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005cda:	931a      	str	r3, [sp, #104]	@ 0x68
 8005cdc:	4654      	mov	r4, sl
 8005cde:	2205      	movs	r2, #5
 8005ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ce4:	484e      	ldr	r0, [pc, #312]	@ (8005e20 <_svfiprintf_r+0x1e4>)
 8005ce6:	f7fe fc70 	bl	80045ca <memchr>
 8005cea:	9a04      	ldr	r2, [sp, #16]
 8005cec:	b9d8      	cbnz	r0, 8005d26 <_svfiprintf_r+0xea>
 8005cee:	06d0      	lsls	r0, r2, #27
 8005cf0:	bf44      	itt	mi
 8005cf2:	2320      	movmi	r3, #32
 8005cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cf8:	0711      	lsls	r1, r2, #28
 8005cfa:	bf44      	itt	mi
 8005cfc:	232b      	movmi	r3, #43	@ 0x2b
 8005cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d02:	f89a 3000 	ldrb.w	r3, [sl]
 8005d06:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d08:	d015      	beq.n	8005d36 <_svfiprintf_r+0xfa>
 8005d0a:	4654      	mov	r4, sl
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	f04f 0c0a 	mov.w	ip, #10
 8005d12:	9a07      	ldr	r2, [sp, #28]
 8005d14:	4621      	mov	r1, r4
 8005d16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d1a:	3b30      	subs	r3, #48	@ 0x30
 8005d1c:	2b09      	cmp	r3, #9
 8005d1e:	d94b      	bls.n	8005db8 <_svfiprintf_r+0x17c>
 8005d20:	b1b0      	cbz	r0, 8005d50 <_svfiprintf_r+0x114>
 8005d22:	9207      	str	r2, [sp, #28]
 8005d24:	e014      	b.n	8005d50 <_svfiprintf_r+0x114>
 8005d26:	eba0 0308 	sub.w	r3, r0, r8
 8005d2a:	fa09 f303 	lsl.w	r3, r9, r3
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	46a2      	mov	sl, r4
 8005d32:	9304      	str	r3, [sp, #16]
 8005d34:	e7d2      	b.n	8005cdc <_svfiprintf_r+0xa0>
 8005d36:	9b03      	ldr	r3, [sp, #12]
 8005d38:	1d19      	adds	r1, r3, #4
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	9103      	str	r1, [sp, #12]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	bfbb      	ittet	lt
 8005d42:	425b      	neglt	r3, r3
 8005d44:	f042 0202 	orrlt.w	r2, r2, #2
 8005d48:	9307      	strge	r3, [sp, #28]
 8005d4a:	9307      	strlt	r3, [sp, #28]
 8005d4c:	bfb8      	it	lt
 8005d4e:	9204      	strlt	r2, [sp, #16]
 8005d50:	7823      	ldrb	r3, [r4, #0]
 8005d52:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d54:	d10a      	bne.n	8005d6c <_svfiprintf_r+0x130>
 8005d56:	7863      	ldrb	r3, [r4, #1]
 8005d58:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d5a:	d132      	bne.n	8005dc2 <_svfiprintf_r+0x186>
 8005d5c:	9b03      	ldr	r3, [sp, #12]
 8005d5e:	3402      	adds	r4, #2
 8005d60:	1d1a      	adds	r2, r3, #4
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	9203      	str	r2, [sp, #12]
 8005d66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d6a:	9305      	str	r3, [sp, #20]
 8005d6c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005e24 <_svfiprintf_r+0x1e8>
 8005d70:	2203      	movs	r2, #3
 8005d72:	4650      	mov	r0, sl
 8005d74:	7821      	ldrb	r1, [r4, #0]
 8005d76:	f7fe fc28 	bl	80045ca <memchr>
 8005d7a:	b138      	cbz	r0, 8005d8c <_svfiprintf_r+0x150>
 8005d7c:	2240      	movs	r2, #64	@ 0x40
 8005d7e:	9b04      	ldr	r3, [sp, #16]
 8005d80:	eba0 000a 	sub.w	r0, r0, sl
 8005d84:	4082      	lsls	r2, r0
 8005d86:	4313      	orrs	r3, r2
 8005d88:	3401      	adds	r4, #1
 8005d8a:	9304      	str	r3, [sp, #16]
 8005d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d90:	2206      	movs	r2, #6
 8005d92:	4825      	ldr	r0, [pc, #148]	@ (8005e28 <_svfiprintf_r+0x1ec>)
 8005d94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d98:	f7fe fc17 	bl	80045ca <memchr>
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	d036      	beq.n	8005e0e <_svfiprintf_r+0x1d2>
 8005da0:	4b22      	ldr	r3, [pc, #136]	@ (8005e2c <_svfiprintf_r+0x1f0>)
 8005da2:	bb1b      	cbnz	r3, 8005dec <_svfiprintf_r+0x1b0>
 8005da4:	9b03      	ldr	r3, [sp, #12]
 8005da6:	3307      	adds	r3, #7
 8005da8:	f023 0307 	bic.w	r3, r3, #7
 8005dac:	3308      	adds	r3, #8
 8005dae:	9303      	str	r3, [sp, #12]
 8005db0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005db2:	4433      	add	r3, r6
 8005db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005db6:	e76a      	b.n	8005c8e <_svfiprintf_r+0x52>
 8005db8:	460c      	mov	r4, r1
 8005dba:	2001      	movs	r0, #1
 8005dbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dc0:	e7a8      	b.n	8005d14 <_svfiprintf_r+0xd8>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	f04f 0c0a 	mov.w	ip, #10
 8005dc8:	4619      	mov	r1, r3
 8005dca:	3401      	adds	r4, #1
 8005dcc:	9305      	str	r3, [sp, #20]
 8005dce:	4620      	mov	r0, r4
 8005dd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dd4:	3a30      	subs	r2, #48	@ 0x30
 8005dd6:	2a09      	cmp	r2, #9
 8005dd8:	d903      	bls.n	8005de2 <_svfiprintf_r+0x1a6>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d0c6      	beq.n	8005d6c <_svfiprintf_r+0x130>
 8005dde:	9105      	str	r1, [sp, #20]
 8005de0:	e7c4      	b.n	8005d6c <_svfiprintf_r+0x130>
 8005de2:	4604      	mov	r4, r0
 8005de4:	2301      	movs	r3, #1
 8005de6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dea:	e7f0      	b.n	8005dce <_svfiprintf_r+0x192>
 8005dec:	ab03      	add	r3, sp, #12
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	462a      	mov	r2, r5
 8005df2:	4638      	mov	r0, r7
 8005df4:	4b0e      	ldr	r3, [pc, #56]	@ (8005e30 <_svfiprintf_r+0x1f4>)
 8005df6:	a904      	add	r1, sp, #16
 8005df8:	f7fd fe70 	bl	8003adc <_printf_float>
 8005dfc:	1c42      	adds	r2, r0, #1
 8005dfe:	4606      	mov	r6, r0
 8005e00:	d1d6      	bne.n	8005db0 <_svfiprintf_r+0x174>
 8005e02:	89ab      	ldrh	r3, [r5, #12]
 8005e04:	065b      	lsls	r3, r3, #25
 8005e06:	f53f af2d 	bmi.w	8005c64 <_svfiprintf_r+0x28>
 8005e0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e0c:	e72c      	b.n	8005c68 <_svfiprintf_r+0x2c>
 8005e0e:	ab03      	add	r3, sp, #12
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	462a      	mov	r2, r5
 8005e14:	4638      	mov	r0, r7
 8005e16:	4b06      	ldr	r3, [pc, #24]	@ (8005e30 <_svfiprintf_r+0x1f4>)
 8005e18:	a904      	add	r1, sp, #16
 8005e1a:	f7fe f8fd 	bl	8004018 <_printf_i>
 8005e1e:	e7ed      	b.n	8005dfc <_svfiprintf_r+0x1c0>
 8005e20:	08007708 	.word	0x08007708
 8005e24:	0800770e 	.word	0x0800770e
 8005e28:	08007712 	.word	0x08007712
 8005e2c:	08003add 	.word	0x08003add
 8005e30:	08005b85 	.word	0x08005b85

08005e34 <__sflush_r>:
 8005e34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3a:	0716      	lsls	r6, r2, #28
 8005e3c:	4605      	mov	r5, r0
 8005e3e:	460c      	mov	r4, r1
 8005e40:	d454      	bmi.n	8005eec <__sflush_r+0xb8>
 8005e42:	684b      	ldr	r3, [r1, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	dc02      	bgt.n	8005e4e <__sflush_r+0x1a>
 8005e48:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	dd48      	ble.n	8005ee0 <__sflush_r+0xac>
 8005e4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e50:	2e00      	cmp	r6, #0
 8005e52:	d045      	beq.n	8005ee0 <__sflush_r+0xac>
 8005e54:	2300      	movs	r3, #0
 8005e56:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005e5a:	682f      	ldr	r7, [r5, #0]
 8005e5c:	6a21      	ldr	r1, [r4, #32]
 8005e5e:	602b      	str	r3, [r5, #0]
 8005e60:	d030      	beq.n	8005ec4 <__sflush_r+0x90>
 8005e62:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005e64:	89a3      	ldrh	r3, [r4, #12]
 8005e66:	0759      	lsls	r1, r3, #29
 8005e68:	d505      	bpl.n	8005e76 <__sflush_r+0x42>
 8005e6a:	6863      	ldr	r3, [r4, #4]
 8005e6c:	1ad2      	subs	r2, r2, r3
 8005e6e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005e70:	b10b      	cbz	r3, 8005e76 <__sflush_r+0x42>
 8005e72:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005e74:	1ad2      	subs	r2, r2, r3
 8005e76:	2300      	movs	r3, #0
 8005e78:	4628      	mov	r0, r5
 8005e7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e7c:	6a21      	ldr	r1, [r4, #32]
 8005e7e:	47b0      	blx	r6
 8005e80:	1c43      	adds	r3, r0, #1
 8005e82:	89a3      	ldrh	r3, [r4, #12]
 8005e84:	d106      	bne.n	8005e94 <__sflush_r+0x60>
 8005e86:	6829      	ldr	r1, [r5, #0]
 8005e88:	291d      	cmp	r1, #29
 8005e8a:	d82b      	bhi.n	8005ee4 <__sflush_r+0xb0>
 8005e8c:	4a28      	ldr	r2, [pc, #160]	@ (8005f30 <__sflush_r+0xfc>)
 8005e8e:	410a      	asrs	r2, r1
 8005e90:	07d6      	lsls	r6, r2, #31
 8005e92:	d427      	bmi.n	8005ee4 <__sflush_r+0xb0>
 8005e94:	2200      	movs	r2, #0
 8005e96:	6062      	str	r2, [r4, #4]
 8005e98:	6922      	ldr	r2, [r4, #16]
 8005e9a:	04d9      	lsls	r1, r3, #19
 8005e9c:	6022      	str	r2, [r4, #0]
 8005e9e:	d504      	bpl.n	8005eaa <__sflush_r+0x76>
 8005ea0:	1c42      	adds	r2, r0, #1
 8005ea2:	d101      	bne.n	8005ea8 <__sflush_r+0x74>
 8005ea4:	682b      	ldr	r3, [r5, #0]
 8005ea6:	b903      	cbnz	r3, 8005eaa <__sflush_r+0x76>
 8005ea8:	6560      	str	r0, [r4, #84]	@ 0x54
 8005eaa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005eac:	602f      	str	r7, [r5, #0]
 8005eae:	b1b9      	cbz	r1, 8005ee0 <__sflush_r+0xac>
 8005eb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005eb4:	4299      	cmp	r1, r3
 8005eb6:	d002      	beq.n	8005ebe <__sflush_r+0x8a>
 8005eb8:	4628      	mov	r0, r5
 8005eba:	f7ff f9e5 	bl	8005288 <_free_r>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ec2:	e00d      	b.n	8005ee0 <__sflush_r+0xac>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	47b0      	blx	r6
 8005eca:	4602      	mov	r2, r0
 8005ecc:	1c50      	adds	r0, r2, #1
 8005ece:	d1c9      	bne.n	8005e64 <__sflush_r+0x30>
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d0c6      	beq.n	8005e64 <__sflush_r+0x30>
 8005ed6:	2b1d      	cmp	r3, #29
 8005ed8:	d001      	beq.n	8005ede <__sflush_r+0xaa>
 8005eda:	2b16      	cmp	r3, #22
 8005edc:	d11d      	bne.n	8005f1a <__sflush_r+0xe6>
 8005ede:	602f      	str	r7, [r5, #0]
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	e021      	b.n	8005f28 <__sflush_r+0xf4>
 8005ee4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ee8:	b21b      	sxth	r3, r3
 8005eea:	e01a      	b.n	8005f22 <__sflush_r+0xee>
 8005eec:	690f      	ldr	r7, [r1, #16]
 8005eee:	2f00      	cmp	r7, #0
 8005ef0:	d0f6      	beq.n	8005ee0 <__sflush_r+0xac>
 8005ef2:	0793      	lsls	r3, r2, #30
 8005ef4:	bf18      	it	ne
 8005ef6:	2300      	movne	r3, #0
 8005ef8:	680e      	ldr	r6, [r1, #0]
 8005efa:	bf08      	it	eq
 8005efc:	694b      	ldreq	r3, [r1, #20]
 8005efe:	1bf6      	subs	r6, r6, r7
 8005f00:	600f      	str	r7, [r1, #0]
 8005f02:	608b      	str	r3, [r1, #8]
 8005f04:	2e00      	cmp	r6, #0
 8005f06:	ddeb      	ble.n	8005ee0 <__sflush_r+0xac>
 8005f08:	4633      	mov	r3, r6
 8005f0a:	463a      	mov	r2, r7
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	6a21      	ldr	r1, [r4, #32]
 8005f10:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005f14:	47e0      	blx	ip
 8005f16:	2800      	cmp	r0, #0
 8005f18:	dc07      	bgt.n	8005f2a <__sflush_r+0xf6>
 8005f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f22:	f04f 30ff 	mov.w	r0, #4294967295
 8005f26:	81a3      	strh	r3, [r4, #12]
 8005f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f2a:	4407      	add	r7, r0
 8005f2c:	1a36      	subs	r6, r6, r0
 8005f2e:	e7e9      	b.n	8005f04 <__sflush_r+0xd0>
 8005f30:	dfbffffe 	.word	0xdfbffffe

08005f34 <_fflush_r>:
 8005f34:	b538      	push	{r3, r4, r5, lr}
 8005f36:	690b      	ldr	r3, [r1, #16]
 8005f38:	4605      	mov	r5, r0
 8005f3a:	460c      	mov	r4, r1
 8005f3c:	b913      	cbnz	r3, 8005f44 <_fflush_r+0x10>
 8005f3e:	2500      	movs	r5, #0
 8005f40:	4628      	mov	r0, r5
 8005f42:	bd38      	pop	{r3, r4, r5, pc}
 8005f44:	b118      	cbz	r0, 8005f4e <_fflush_r+0x1a>
 8005f46:	6a03      	ldr	r3, [r0, #32]
 8005f48:	b90b      	cbnz	r3, 8005f4e <_fflush_r+0x1a>
 8005f4a:	f7fe fa11 	bl	8004370 <__sinit>
 8005f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d0f3      	beq.n	8005f3e <_fflush_r+0xa>
 8005f56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f58:	07d0      	lsls	r0, r2, #31
 8005f5a:	d404      	bmi.n	8005f66 <_fflush_r+0x32>
 8005f5c:	0599      	lsls	r1, r3, #22
 8005f5e:	d402      	bmi.n	8005f66 <_fflush_r+0x32>
 8005f60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f62:	f7fe fb30 	bl	80045c6 <__retarget_lock_acquire_recursive>
 8005f66:	4628      	mov	r0, r5
 8005f68:	4621      	mov	r1, r4
 8005f6a:	f7ff ff63 	bl	8005e34 <__sflush_r>
 8005f6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f70:	4605      	mov	r5, r0
 8005f72:	07da      	lsls	r2, r3, #31
 8005f74:	d4e4      	bmi.n	8005f40 <_fflush_r+0xc>
 8005f76:	89a3      	ldrh	r3, [r4, #12]
 8005f78:	059b      	lsls	r3, r3, #22
 8005f7a:	d4e1      	bmi.n	8005f40 <_fflush_r+0xc>
 8005f7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f7e:	f7fe fb23 	bl	80045c8 <__retarget_lock_release_recursive>
 8005f82:	e7dd      	b.n	8005f40 <_fflush_r+0xc>

08005f84 <memmove>:
 8005f84:	4288      	cmp	r0, r1
 8005f86:	b510      	push	{r4, lr}
 8005f88:	eb01 0402 	add.w	r4, r1, r2
 8005f8c:	d902      	bls.n	8005f94 <memmove+0x10>
 8005f8e:	4284      	cmp	r4, r0
 8005f90:	4623      	mov	r3, r4
 8005f92:	d807      	bhi.n	8005fa4 <memmove+0x20>
 8005f94:	1e43      	subs	r3, r0, #1
 8005f96:	42a1      	cmp	r1, r4
 8005f98:	d008      	beq.n	8005fac <memmove+0x28>
 8005f9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fa2:	e7f8      	b.n	8005f96 <memmove+0x12>
 8005fa4:	4601      	mov	r1, r0
 8005fa6:	4402      	add	r2, r0
 8005fa8:	428a      	cmp	r2, r1
 8005faa:	d100      	bne.n	8005fae <memmove+0x2a>
 8005fac:	bd10      	pop	{r4, pc}
 8005fae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fb6:	e7f7      	b.n	8005fa8 <memmove+0x24>

08005fb8 <_sbrk_r>:
 8005fb8:	b538      	push	{r3, r4, r5, lr}
 8005fba:	2300      	movs	r3, #0
 8005fbc:	4d05      	ldr	r5, [pc, #20]	@ (8005fd4 <_sbrk_r+0x1c>)
 8005fbe:	4604      	mov	r4, r0
 8005fc0:	4608      	mov	r0, r1
 8005fc2:	602b      	str	r3, [r5, #0]
 8005fc4:	f7fb fa66 	bl	8001494 <_sbrk>
 8005fc8:	1c43      	adds	r3, r0, #1
 8005fca:	d102      	bne.n	8005fd2 <_sbrk_r+0x1a>
 8005fcc:	682b      	ldr	r3, [r5, #0]
 8005fce:	b103      	cbz	r3, 8005fd2 <_sbrk_r+0x1a>
 8005fd0:	6023      	str	r3, [r4, #0]
 8005fd2:	bd38      	pop	{r3, r4, r5, pc}
 8005fd4:	200003cc 	.word	0x200003cc

08005fd8 <memcpy>:
 8005fd8:	440a      	add	r2, r1
 8005fda:	4291      	cmp	r1, r2
 8005fdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fe0:	d100      	bne.n	8005fe4 <memcpy+0xc>
 8005fe2:	4770      	bx	lr
 8005fe4:	b510      	push	{r4, lr}
 8005fe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fea:	4291      	cmp	r1, r2
 8005fec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ff0:	d1f9      	bne.n	8005fe6 <memcpy+0xe>
 8005ff2:	bd10      	pop	{r4, pc}

08005ff4 <__assert_func>:
 8005ff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ff6:	4614      	mov	r4, r2
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	4b09      	ldr	r3, [pc, #36]	@ (8006020 <__assert_func+0x2c>)
 8005ffc:	4605      	mov	r5, r0
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68d8      	ldr	r0, [r3, #12]
 8006002:	b954      	cbnz	r4, 800601a <__assert_func+0x26>
 8006004:	4b07      	ldr	r3, [pc, #28]	@ (8006024 <__assert_func+0x30>)
 8006006:	461c      	mov	r4, r3
 8006008:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800600c:	9100      	str	r1, [sp, #0]
 800600e:	462b      	mov	r3, r5
 8006010:	4905      	ldr	r1, [pc, #20]	@ (8006028 <__assert_func+0x34>)
 8006012:	f000 f86f 	bl	80060f4 <fiprintf>
 8006016:	f000 f87f 	bl	8006118 <abort>
 800601a:	4b04      	ldr	r3, [pc, #16]	@ (800602c <__assert_func+0x38>)
 800601c:	e7f4      	b.n	8006008 <__assert_func+0x14>
 800601e:	bf00      	nop
 8006020:	20000018 	.word	0x20000018
 8006024:	0800775e 	.word	0x0800775e
 8006028:	08007730 	.word	0x08007730
 800602c:	08007723 	.word	0x08007723

08006030 <_calloc_r>:
 8006030:	b570      	push	{r4, r5, r6, lr}
 8006032:	fba1 5402 	umull	r5, r4, r1, r2
 8006036:	b93c      	cbnz	r4, 8006048 <_calloc_r+0x18>
 8006038:	4629      	mov	r1, r5
 800603a:	f7ff f997 	bl	800536c <_malloc_r>
 800603e:	4606      	mov	r6, r0
 8006040:	b928      	cbnz	r0, 800604e <_calloc_r+0x1e>
 8006042:	2600      	movs	r6, #0
 8006044:	4630      	mov	r0, r6
 8006046:	bd70      	pop	{r4, r5, r6, pc}
 8006048:	220c      	movs	r2, #12
 800604a:	6002      	str	r2, [r0, #0]
 800604c:	e7f9      	b.n	8006042 <_calloc_r+0x12>
 800604e:	462a      	mov	r2, r5
 8006050:	4621      	mov	r1, r4
 8006052:	f7fe fa3a 	bl	80044ca <memset>
 8006056:	e7f5      	b.n	8006044 <_calloc_r+0x14>

08006058 <__ascii_mbtowc>:
 8006058:	b082      	sub	sp, #8
 800605a:	b901      	cbnz	r1, 800605e <__ascii_mbtowc+0x6>
 800605c:	a901      	add	r1, sp, #4
 800605e:	b142      	cbz	r2, 8006072 <__ascii_mbtowc+0x1a>
 8006060:	b14b      	cbz	r3, 8006076 <__ascii_mbtowc+0x1e>
 8006062:	7813      	ldrb	r3, [r2, #0]
 8006064:	600b      	str	r3, [r1, #0]
 8006066:	7812      	ldrb	r2, [r2, #0]
 8006068:	1e10      	subs	r0, r2, #0
 800606a:	bf18      	it	ne
 800606c:	2001      	movne	r0, #1
 800606e:	b002      	add	sp, #8
 8006070:	4770      	bx	lr
 8006072:	4610      	mov	r0, r2
 8006074:	e7fb      	b.n	800606e <__ascii_mbtowc+0x16>
 8006076:	f06f 0001 	mvn.w	r0, #1
 800607a:	e7f8      	b.n	800606e <__ascii_mbtowc+0x16>

0800607c <_realloc_r>:
 800607c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006080:	4680      	mov	r8, r0
 8006082:	4615      	mov	r5, r2
 8006084:	460c      	mov	r4, r1
 8006086:	b921      	cbnz	r1, 8006092 <_realloc_r+0x16>
 8006088:	4611      	mov	r1, r2
 800608a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800608e:	f7ff b96d 	b.w	800536c <_malloc_r>
 8006092:	b92a      	cbnz	r2, 80060a0 <_realloc_r+0x24>
 8006094:	f7ff f8f8 	bl	8005288 <_free_r>
 8006098:	2400      	movs	r4, #0
 800609a:	4620      	mov	r0, r4
 800609c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060a0:	f000 f841 	bl	8006126 <_malloc_usable_size_r>
 80060a4:	4285      	cmp	r5, r0
 80060a6:	4606      	mov	r6, r0
 80060a8:	d802      	bhi.n	80060b0 <_realloc_r+0x34>
 80060aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80060ae:	d8f4      	bhi.n	800609a <_realloc_r+0x1e>
 80060b0:	4629      	mov	r1, r5
 80060b2:	4640      	mov	r0, r8
 80060b4:	f7ff f95a 	bl	800536c <_malloc_r>
 80060b8:	4607      	mov	r7, r0
 80060ba:	2800      	cmp	r0, #0
 80060bc:	d0ec      	beq.n	8006098 <_realloc_r+0x1c>
 80060be:	42b5      	cmp	r5, r6
 80060c0:	462a      	mov	r2, r5
 80060c2:	4621      	mov	r1, r4
 80060c4:	bf28      	it	cs
 80060c6:	4632      	movcs	r2, r6
 80060c8:	f7ff ff86 	bl	8005fd8 <memcpy>
 80060cc:	4621      	mov	r1, r4
 80060ce:	4640      	mov	r0, r8
 80060d0:	f7ff f8da 	bl	8005288 <_free_r>
 80060d4:	463c      	mov	r4, r7
 80060d6:	e7e0      	b.n	800609a <_realloc_r+0x1e>

080060d8 <__ascii_wctomb>:
 80060d8:	4603      	mov	r3, r0
 80060da:	4608      	mov	r0, r1
 80060dc:	b141      	cbz	r1, 80060f0 <__ascii_wctomb+0x18>
 80060de:	2aff      	cmp	r2, #255	@ 0xff
 80060e0:	d904      	bls.n	80060ec <__ascii_wctomb+0x14>
 80060e2:	228a      	movs	r2, #138	@ 0x8a
 80060e4:	f04f 30ff 	mov.w	r0, #4294967295
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	4770      	bx	lr
 80060ec:	2001      	movs	r0, #1
 80060ee:	700a      	strb	r2, [r1, #0]
 80060f0:	4770      	bx	lr
	...

080060f4 <fiprintf>:
 80060f4:	b40e      	push	{r1, r2, r3}
 80060f6:	b503      	push	{r0, r1, lr}
 80060f8:	4601      	mov	r1, r0
 80060fa:	ab03      	add	r3, sp, #12
 80060fc:	4805      	ldr	r0, [pc, #20]	@ (8006114 <fiprintf+0x20>)
 80060fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006102:	6800      	ldr	r0, [r0, #0]
 8006104:	9301      	str	r3, [sp, #4]
 8006106:	f000 f83d 	bl	8006184 <_vfiprintf_r>
 800610a:	b002      	add	sp, #8
 800610c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006110:	b003      	add	sp, #12
 8006112:	4770      	bx	lr
 8006114:	20000018 	.word	0x20000018

08006118 <abort>:
 8006118:	2006      	movs	r0, #6
 800611a:	b508      	push	{r3, lr}
 800611c:	f000 fa06 	bl	800652c <raise>
 8006120:	2001      	movs	r0, #1
 8006122:	f7fb f942 	bl	80013aa <_exit>

08006126 <_malloc_usable_size_r>:
 8006126:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800612a:	1f18      	subs	r0, r3, #4
 800612c:	2b00      	cmp	r3, #0
 800612e:	bfbc      	itt	lt
 8006130:	580b      	ldrlt	r3, [r1, r0]
 8006132:	18c0      	addlt	r0, r0, r3
 8006134:	4770      	bx	lr

08006136 <__sfputc_r>:
 8006136:	6893      	ldr	r3, [r2, #8]
 8006138:	b410      	push	{r4}
 800613a:	3b01      	subs	r3, #1
 800613c:	2b00      	cmp	r3, #0
 800613e:	6093      	str	r3, [r2, #8]
 8006140:	da07      	bge.n	8006152 <__sfputc_r+0x1c>
 8006142:	6994      	ldr	r4, [r2, #24]
 8006144:	42a3      	cmp	r3, r4
 8006146:	db01      	blt.n	800614c <__sfputc_r+0x16>
 8006148:	290a      	cmp	r1, #10
 800614a:	d102      	bne.n	8006152 <__sfputc_r+0x1c>
 800614c:	bc10      	pop	{r4}
 800614e:	f000 b931 	b.w	80063b4 <__swbuf_r>
 8006152:	6813      	ldr	r3, [r2, #0]
 8006154:	1c58      	adds	r0, r3, #1
 8006156:	6010      	str	r0, [r2, #0]
 8006158:	7019      	strb	r1, [r3, #0]
 800615a:	4608      	mov	r0, r1
 800615c:	bc10      	pop	{r4}
 800615e:	4770      	bx	lr

08006160 <__sfputs_r>:
 8006160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006162:	4606      	mov	r6, r0
 8006164:	460f      	mov	r7, r1
 8006166:	4614      	mov	r4, r2
 8006168:	18d5      	adds	r5, r2, r3
 800616a:	42ac      	cmp	r4, r5
 800616c:	d101      	bne.n	8006172 <__sfputs_r+0x12>
 800616e:	2000      	movs	r0, #0
 8006170:	e007      	b.n	8006182 <__sfputs_r+0x22>
 8006172:	463a      	mov	r2, r7
 8006174:	4630      	mov	r0, r6
 8006176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800617a:	f7ff ffdc 	bl	8006136 <__sfputc_r>
 800617e:	1c43      	adds	r3, r0, #1
 8006180:	d1f3      	bne.n	800616a <__sfputs_r+0xa>
 8006182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006184 <_vfiprintf_r>:
 8006184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006188:	460d      	mov	r5, r1
 800618a:	4614      	mov	r4, r2
 800618c:	4698      	mov	r8, r3
 800618e:	4606      	mov	r6, r0
 8006190:	b09d      	sub	sp, #116	@ 0x74
 8006192:	b118      	cbz	r0, 800619c <_vfiprintf_r+0x18>
 8006194:	6a03      	ldr	r3, [r0, #32]
 8006196:	b90b      	cbnz	r3, 800619c <_vfiprintf_r+0x18>
 8006198:	f7fe f8ea 	bl	8004370 <__sinit>
 800619c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800619e:	07d9      	lsls	r1, r3, #31
 80061a0:	d405      	bmi.n	80061ae <_vfiprintf_r+0x2a>
 80061a2:	89ab      	ldrh	r3, [r5, #12]
 80061a4:	059a      	lsls	r2, r3, #22
 80061a6:	d402      	bmi.n	80061ae <_vfiprintf_r+0x2a>
 80061a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061aa:	f7fe fa0c 	bl	80045c6 <__retarget_lock_acquire_recursive>
 80061ae:	89ab      	ldrh	r3, [r5, #12]
 80061b0:	071b      	lsls	r3, r3, #28
 80061b2:	d501      	bpl.n	80061b8 <_vfiprintf_r+0x34>
 80061b4:	692b      	ldr	r3, [r5, #16]
 80061b6:	b99b      	cbnz	r3, 80061e0 <_vfiprintf_r+0x5c>
 80061b8:	4629      	mov	r1, r5
 80061ba:	4630      	mov	r0, r6
 80061bc:	f000 f938 	bl	8006430 <__swsetup_r>
 80061c0:	b170      	cbz	r0, 80061e0 <_vfiprintf_r+0x5c>
 80061c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061c4:	07dc      	lsls	r4, r3, #31
 80061c6:	d504      	bpl.n	80061d2 <_vfiprintf_r+0x4e>
 80061c8:	f04f 30ff 	mov.w	r0, #4294967295
 80061cc:	b01d      	add	sp, #116	@ 0x74
 80061ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d2:	89ab      	ldrh	r3, [r5, #12]
 80061d4:	0598      	lsls	r0, r3, #22
 80061d6:	d4f7      	bmi.n	80061c8 <_vfiprintf_r+0x44>
 80061d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061da:	f7fe f9f5 	bl	80045c8 <__retarget_lock_release_recursive>
 80061de:	e7f3      	b.n	80061c8 <_vfiprintf_r+0x44>
 80061e0:	2300      	movs	r3, #0
 80061e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80061e4:	2320      	movs	r3, #32
 80061e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80061ea:	2330      	movs	r3, #48	@ 0x30
 80061ec:	f04f 0901 	mov.w	r9, #1
 80061f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80061f4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80063a0 <_vfiprintf_r+0x21c>
 80061f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80061fc:	4623      	mov	r3, r4
 80061fe:	469a      	mov	sl, r3
 8006200:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006204:	b10a      	cbz	r2, 800620a <_vfiprintf_r+0x86>
 8006206:	2a25      	cmp	r2, #37	@ 0x25
 8006208:	d1f9      	bne.n	80061fe <_vfiprintf_r+0x7a>
 800620a:	ebba 0b04 	subs.w	fp, sl, r4
 800620e:	d00b      	beq.n	8006228 <_vfiprintf_r+0xa4>
 8006210:	465b      	mov	r3, fp
 8006212:	4622      	mov	r2, r4
 8006214:	4629      	mov	r1, r5
 8006216:	4630      	mov	r0, r6
 8006218:	f7ff ffa2 	bl	8006160 <__sfputs_r>
 800621c:	3001      	adds	r0, #1
 800621e:	f000 80a7 	beq.w	8006370 <_vfiprintf_r+0x1ec>
 8006222:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006224:	445a      	add	r2, fp
 8006226:	9209      	str	r2, [sp, #36]	@ 0x24
 8006228:	f89a 3000 	ldrb.w	r3, [sl]
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 809f 	beq.w	8006370 <_vfiprintf_r+0x1ec>
 8006232:	2300      	movs	r3, #0
 8006234:	f04f 32ff 	mov.w	r2, #4294967295
 8006238:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800623c:	f10a 0a01 	add.w	sl, sl, #1
 8006240:	9304      	str	r3, [sp, #16]
 8006242:	9307      	str	r3, [sp, #28]
 8006244:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006248:	931a      	str	r3, [sp, #104]	@ 0x68
 800624a:	4654      	mov	r4, sl
 800624c:	2205      	movs	r2, #5
 800624e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006252:	4853      	ldr	r0, [pc, #332]	@ (80063a0 <_vfiprintf_r+0x21c>)
 8006254:	f7fe f9b9 	bl	80045ca <memchr>
 8006258:	9a04      	ldr	r2, [sp, #16]
 800625a:	b9d8      	cbnz	r0, 8006294 <_vfiprintf_r+0x110>
 800625c:	06d1      	lsls	r1, r2, #27
 800625e:	bf44      	itt	mi
 8006260:	2320      	movmi	r3, #32
 8006262:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006266:	0713      	lsls	r3, r2, #28
 8006268:	bf44      	itt	mi
 800626a:	232b      	movmi	r3, #43	@ 0x2b
 800626c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006270:	f89a 3000 	ldrb.w	r3, [sl]
 8006274:	2b2a      	cmp	r3, #42	@ 0x2a
 8006276:	d015      	beq.n	80062a4 <_vfiprintf_r+0x120>
 8006278:	4654      	mov	r4, sl
 800627a:	2000      	movs	r0, #0
 800627c:	f04f 0c0a 	mov.w	ip, #10
 8006280:	9a07      	ldr	r2, [sp, #28]
 8006282:	4621      	mov	r1, r4
 8006284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006288:	3b30      	subs	r3, #48	@ 0x30
 800628a:	2b09      	cmp	r3, #9
 800628c:	d94b      	bls.n	8006326 <_vfiprintf_r+0x1a2>
 800628e:	b1b0      	cbz	r0, 80062be <_vfiprintf_r+0x13a>
 8006290:	9207      	str	r2, [sp, #28]
 8006292:	e014      	b.n	80062be <_vfiprintf_r+0x13a>
 8006294:	eba0 0308 	sub.w	r3, r0, r8
 8006298:	fa09 f303 	lsl.w	r3, r9, r3
 800629c:	4313      	orrs	r3, r2
 800629e:	46a2      	mov	sl, r4
 80062a0:	9304      	str	r3, [sp, #16]
 80062a2:	e7d2      	b.n	800624a <_vfiprintf_r+0xc6>
 80062a4:	9b03      	ldr	r3, [sp, #12]
 80062a6:	1d19      	adds	r1, r3, #4
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	9103      	str	r1, [sp, #12]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	bfbb      	ittet	lt
 80062b0:	425b      	neglt	r3, r3
 80062b2:	f042 0202 	orrlt.w	r2, r2, #2
 80062b6:	9307      	strge	r3, [sp, #28]
 80062b8:	9307      	strlt	r3, [sp, #28]
 80062ba:	bfb8      	it	lt
 80062bc:	9204      	strlt	r2, [sp, #16]
 80062be:	7823      	ldrb	r3, [r4, #0]
 80062c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80062c2:	d10a      	bne.n	80062da <_vfiprintf_r+0x156>
 80062c4:	7863      	ldrb	r3, [r4, #1]
 80062c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80062c8:	d132      	bne.n	8006330 <_vfiprintf_r+0x1ac>
 80062ca:	9b03      	ldr	r3, [sp, #12]
 80062cc:	3402      	adds	r4, #2
 80062ce:	1d1a      	adds	r2, r3, #4
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	9203      	str	r2, [sp, #12]
 80062d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80062d8:	9305      	str	r3, [sp, #20]
 80062da:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80063a4 <_vfiprintf_r+0x220>
 80062de:	2203      	movs	r2, #3
 80062e0:	4650      	mov	r0, sl
 80062e2:	7821      	ldrb	r1, [r4, #0]
 80062e4:	f7fe f971 	bl	80045ca <memchr>
 80062e8:	b138      	cbz	r0, 80062fa <_vfiprintf_r+0x176>
 80062ea:	2240      	movs	r2, #64	@ 0x40
 80062ec:	9b04      	ldr	r3, [sp, #16]
 80062ee:	eba0 000a 	sub.w	r0, r0, sl
 80062f2:	4082      	lsls	r2, r0
 80062f4:	4313      	orrs	r3, r2
 80062f6:	3401      	adds	r4, #1
 80062f8:	9304      	str	r3, [sp, #16]
 80062fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062fe:	2206      	movs	r2, #6
 8006300:	4829      	ldr	r0, [pc, #164]	@ (80063a8 <_vfiprintf_r+0x224>)
 8006302:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006306:	f7fe f960 	bl	80045ca <memchr>
 800630a:	2800      	cmp	r0, #0
 800630c:	d03f      	beq.n	800638e <_vfiprintf_r+0x20a>
 800630e:	4b27      	ldr	r3, [pc, #156]	@ (80063ac <_vfiprintf_r+0x228>)
 8006310:	bb1b      	cbnz	r3, 800635a <_vfiprintf_r+0x1d6>
 8006312:	9b03      	ldr	r3, [sp, #12]
 8006314:	3307      	adds	r3, #7
 8006316:	f023 0307 	bic.w	r3, r3, #7
 800631a:	3308      	adds	r3, #8
 800631c:	9303      	str	r3, [sp, #12]
 800631e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006320:	443b      	add	r3, r7
 8006322:	9309      	str	r3, [sp, #36]	@ 0x24
 8006324:	e76a      	b.n	80061fc <_vfiprintf_r+0x78>
 8006326:	460c      	mov	r4, r1
 8006328:	2001      	movs	r0, #1
 800632a:	fb0c 3202 	mla	r2, ip, r2, r3
 800632e:	e7a8      	b.n	8006282 <_vfiprintf_r+0xfe>
 8006330:	2300      	movs	r3, #0
 8006332:	f04f 0c0a 	mov.w	ip, #10
 8006336:	4619      	mov	r1, r3
 8006338:	3401      	adds	r4, #1
 800633a:	9305      	str	r3, [sp, #20]
 800633c:	4620      	mov	r0, r4
 800633e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006342:	3a30      	subs	r2, #48	@ 0x30
 8006344:	2a09      	cmp	r2, #9
 8006346:	d903      	bls.n	8006350 <_vfiprintf_r+0x1cc>
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0c6      	beq.n	80062da <_vfiprintf_r+0x156>
 800634c:	9105      	str	r1, [sp, #20]
 800634e:	e7c4      	b.n	80062da <_vfiprintf_r+0x156>
 8006350:	4604      	mov	r4, r0
 8006352:	2301      	movs	r3, #1
 8006354:	fb0c 2101 	mla	r1, ip, r1, r2
 8006358:	e7f0      	b.n	800633c <_vfiprintf_r+0x1b8>
 800635a:	ab03      	add	r3, sp, #12
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	462a      	mov	r2, r5
 8006360:	4630      	mov	r0, r6
 8006362:	4b13      	ldr	r3, [pc, #76]	@ (80063b0 <_vfiprintf_r+0x22c>)
 8006364:	a904      	add	r1, sp, #16
 8006366:	f7fd fbb9 	bl	8003adc <_printf_float>
 800636a:	4607      	mov	r7, r0
 800636c:	1c78      	adds	r0, r7, #1
 800636e:	d1d6      	bne.n	800631e <_vfiprintf_r+0x19a>
 8006370:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006372:	07d9      	lsls	r1, r3, #31
 8006374:	d405      	bmi.n	8006382 <_vfiprintf_r+0x1fe>
 8006376:	89ab      	ldrh	r3, [r5, #12]
 8006378:	059a      	lsls	r2, r3, #22
 800637a:	d402      	bmi.n	8006382 <_vfiprintf_r+0x1fe>
 800637c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800637e:	f7fe f923 	bl	80045c8 <__retarget_lock_release_recursive>
 8006382:	89ab      	ldrh	r3, [r5, #12]
 8006384:	065b      	lsls	r3, r3, #25
 8006386:	f53f af1f 	bmi.w	80061c8 <_vfiprintf_r+0x44>
 800638a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800638c:	e71e      	b.n	80061cc <_vfiprintf_r+0x48>
 800638e:	ab03      	add	r3, sp, #12
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	462a      	mov	r2, r5
 8006394:	4630      	mov	r0, r6
 8006396:	4b06      	ldr	r3, [pc, #24]	@ (80063b0 <_vfiprintf_r+0x22c>)
 8006398:	a904      	add	r1, sp, #16
 800639a:	f7fd fe3d 	bl	8004018 <_printf_i>
 800639e:	e7e4      	b.n	800636a <_vfiprintf_r+0x1e6>
 80063a0:	08007708 	.word	0x08007708
 80063a4:	0800770e 	.word	0x0800770e
 80063a8:	08007712 	.word	0x08007712
 80063ac:	08003add 	.word	0x08003add
 80063b0:	08006161 	.word	0x08006161

080063b4 <__swbuf_r>:
 80063b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b6:	460e      	mov	r6, r1
 80063b8:	4614      	mov	r4, r2
 80063ba:	4605      	mov	r5, r0
 80063bc:	b118      	cbz	r0, 80063c6 <__swbuf_r+0x12>
 80063be:	6a03      	ldr	r3, [r0, #32]
 80063c0:	b90b      	cbnz	r3, 80063c6 <__swbuf_r+0x12>
 80063c2:	f7fd ffd5 	bl	8004370 <__sinit>
 80063c6:	69a3      	ldr	r3, [r4, #24]
 80063c8:	60a3      	str	r3, [r4, #8]
 80063ca:	89a3      	ldrh	r3, [r4, #12]
 80063cc:	071a      	lsls	r2, r3, #28
 80063ce:	d501      	bpl.n	80063d4 <__swbuf_r+0x20>
 80063d0:	6923      	ldr	r3, [r4, #16]
 80063d2:	b943      	cbnz	r3, 80063e6 <__swbuf_r+0x32>
 80063d4:	4621      	mov	r1, r4
 80063d6:	4628      	mov	r0, r5
 80063d8:	f000 f82a 	bl	8006430 <__swsetup_r>
 80063dc:	b118      	cbz	r0, 80063e6 <__swbuf_r+0x32>
 80063de:	f04f 37ff 	mov.w	r7, #4294967295
 80063e2:	4638      	mov	r0, r7
 80063e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	6922      	ldr	r2, [r4, #16]
 80063ea:	b2f6      	uxtb	r6, r6
 80063ec:	1a98      	subs	r0, r3, r2
 80063ee:	6963      	ldr	r3, [r4, #20]
 80063f0:	4637      	mov	r7, r6
 80063f2:	4283      	cmp	r3, r0
 80063f4:	dc05      	bgt.n	8006402 <__swbuf_r+0x4e>
 80063f6:	4621      	mov	r1, r4
 80063f8:	4628      	mov	r0, r5
 80063fa:	f7ff fd9b 	bl	8005f34 <_fflush_r>
 80063fe:	2800      	cmp	r0, #0
 8006400:	d1ed      	bne.n	80063de <__swbuf_r+0x2a>
 8006402:	68a3      	ldr	r3, [r4, #8]
 8006404:	3b01      	subs	r3, #1
 8006406:	60a3      	str	r3, [r4, #8]
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	1c5a      	adds	r2, r3, #1
 800640c:	6022      	str	r2, [r4, #0]
 800640e:	701e      	strb	r6, [r3, #0]
 8006410:	6962      	ldr	r2, [r4, #20]
 8006412:	1c43      	adds	r3, r0, #1
 8006414:	429a      	cmp	r2, r3
 8006416:	d004      	beq.n	8006422 <__swbuf_r+0x6e>
 8006418:	89a3      	ldrh	r3, [r4, #12]
 800641a:	07db      	lsls	r3, r3, #31
 800641c:	d5e1      	bpl.n	80063e2 <__swbuf_r+0x2e>
 800641e:	2e0a      	cmp	r6, #10
 8006420:	d1df      	bne.n	80063e2 <__swbuf_r+0x2e>
 8006422:	4621      	mov	r1, r4
 8006424:	4628      	mov	r0, r5
 8006426:	f7ff fd85 	bl	8005f34 <_fflush_r>
 800642a:	2800      	cmp	r0, #0
 800642c:	d0d9      	beq.n	80063e2 <__swbuf_r+0x2e>
 800642e:	e7d6      	b.n	80063de <__swbuf_r+0x2a>

08006430 <__swsetup_r>:
 8006430:	b538      	push	{r3, r4, r5, lr}
 8006432:	4b29      	ldr	r3, [pc, #164]	@ (80064d8 <__swsetup_r+0xa8>)
 8006434:	4605      	mov	r5, r0
 8006436:	6818      	ldr	r0, [r3, #0]
 8006438:	460c      	mov	r4, r1
 800643a:	b118      	cbz	r0, 8006444 <__swsetup_r+0x14>
 800643c:	6a03      	ldr	r3, [r0, #32]
 800643e:	b90b      	cbnz	r3, 8006444 <__swsetup_r+0x14>
 8006440:	f7fd ff96 	bl	8004370 <__sinit>
 8006444:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006448:	0719      	lsls	r1, r3, #28
 800644a:	d422      	bmi.n	8006492 <__swsetup_r+0x62>
 800644c:	06da      	lsls	r2, r3, #27
 800644e:	d407      	bmi.n	8006460 <__swsetup_r+0x30>
 8006450:	2209      	movs	r2, #9
 8006452:	602a      	str	r2, [r5, #0]
 8006454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006458:	f04f 30ff 	mov.w	r0, #4294967295
 800645c:	81a3      	strh	r3, [r4, #12]
 800645e:	e033      	b.n	80064c8 <__swsetup_r+0x98>
 8006460:	0758      	lsls	r0, r3, #29
 8006462:	d512      	bpl.n	800648a <__swsetup_r+0x5a>
 8006464:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006466:	b141      	cbz	r1, 800647a <__swsetup_r+0x4a>
 8006468:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800646c:	4299      	cmp	r1, r3
 800646e:	d002      	beq.n	8006476 <__swsetup_r+0x46>
 8006470:	4628      	mov	r0, r5
 8006472:	f7fe ff09 	bl	8005288 <_free_r>
 8006476:	2300      	movs	r3, #0
 8006478:	6363      	str	r3, [r4, #52]	@ 0x34
 800647a:	89a3      	ldrh	r3, [r4, #12]
 800647c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006480:	81a3      	strh	r3, [r4, #12]
 8006482:	2300      	movs	r3, #0
 8006484:	6063      	str	r3, [r4, #4]
 8006486:	6923      	ldr	r3, [r4, #16]
 8006488:	6023      	str	r3, [r4, #0]
 800648a:	89a3      	ldrh	r3, [r4, #12]
 800648c:	f043 0308 	orr.w	r3, r3, #8
 8006490:	81a3      	strh	r3, [r4, #12]
 8006492:	6923      	ldr	r3, [r4, #16]
 8006494:	b94b      	cbnz	r3, 80064aa <__swsetup_r+0x7a>
 8006496:	89a3      	ldrh	r3, [r4, #12]
 8006498:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800649c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064a0:	d003      	beq.n	80064aa <__swsetup_r+0x7a>
 80064a2:	4621      	mov	r1, r4
 80064a4:	4628      	mov	r0, r5
 80064a6:	f000 f882 	bl	80065ae <__smakebuf_r>
 80064aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064ae:	f013 0201 	ands.w	r2, r3, #1
 80064b2:	d00a      	beq.n	80064ca <__swsetup_r+0x9a>
 80064b4:	2200      	movs	r2, #0
 80064b6:	60a2      	str	r2, [r4, #8]
 80064b8:	6962      	ldr	r2, [r4, #20]
 80064ba:	4252      	negs	r2, r2
 80064bc:	61a2      	str	r2, [r4, #24]
 80064be:	6922      	ldr	r2, [r4, #16]
 80064c0:	b942      	cbnz	r2, 80064d4 <__swsetup_r+0xa4>
 80064c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80064c6:	d1c5      	bne.n	8006454 <__swsetup_r+0x24>
 80064c8:	bd38      	pop	{r3, r4, r5, pc}
 80064ca:	0799      	lsls	r1, r3, #30
 80064cc:	bf58      	it	pl
 80064ce:	6962      	ldrpl	r2, [r4, #20]
 80064d0:	60a2      	str	r2, [r4, #8]
 80064d2:	e7f4      	b.n	80064be <__swsetup_r+0x8e>
 80064d4:	2000      	movs	r0, #0
 80064d6:	e7f7      	b.n	80064c8 <__swsetup_r+0x98>
 80064d8:	20000018 	.word	0x20000018

080064dc <_raise_r>:
 80064dc:	291f      	cmp	r1, #31
 80064de:	b538      	push	{r3, r4, r5, lr}
 80064e0:	4605      	mov	r5, r0
 80064e2:	460c      	mov	r4, r1
 80064e4:	d904      	bls.n	80064f0 <_raise_r+0x14>
 80064e6:	2316      	movs	r3, #22
 80064e8:	6003      	str	r3, [r0, #0]
 80064ea:	f04f 30ff 	mov.w	r0, #4294967295
 80064ee:	bd38      	pop	{r3, r4, r5, pc}
 80064f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80064f2:	b112      	cbz	r2, 80064fa <_raise_r+0x1e>
 80064f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80064f8:	b94b      	cbnz	r3, 800650e <_raise_r+0x32>
 80064fa:	4628      	mov	r0, r5
 80064fc:	f000 f830 	bl	8006560 <_getpid_r>
 8006500:	4622      	mov	r2, r4
 8006502:	4601      	mov	r1, r0
 8006504:	4628      	mov	r0, r5
 8006506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800650a:	f000 b817 	b.w	800653c <_kill_r>
 800650e:	2b01      	cmp	r3, #1
 8006510:	d00a      	beq.n	8006528 <_raise_r+0x4c>
 8006512:	1c59      	adds	r1, r3, #1
 8006514:	d103      	bne.n	800651e <_raise_r+0x42>
 8006516:	2316      	movs	r3, #22
 8006518:	6003      	str	r3, [r0, #0]
 800651a:	2001      	movs	r0, #1
 800651c:	e7e7      	b.n	80064ee <_raise_r+0x12>
 800651e:	2100      	movs	r1, #0
 8006520:	4620      	mov	r0, r4
 8006522:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006526:	4798      	blx	r3
 8006528:	2000      	movs	r0, #0
 800652a:	e7e0      	b.n	80064ee <_raise_r+0x12>

0800652c <raise>:
 800652c:	4b02      	ldr	r3, [pc, #8]	@ (8006538 <raise+0xc>)
 800652e:	4601      	mov	r1, r0
 8006530:	6818      	ldr	r0, [r3, #0]
 8006532:	f7ff bfd3 	b.w	80064dc <_raise_r>
 8006536:	bf00      	nop
 8006538:	20000018 	.word	0x20000018

0800653c <_kill_r>:
 800653c:	b538      	push	{r3, r4, r5, lr}
 800653e:	2300      	movs	r3, #0
 8006540:	4d06      	ldr	r5, [pc, #24]	@ (800655c <_kill_r+0x20>)
 8006542:	4604      	mov	r4, r0
 8006544:	4608      	mov	r0, r1
 8006546:	4611      	mov	r1, r2
 8006548:	602b      	str	r3, [r5, #0]
 800654a:	f7fa ff1e 	bl	800138a <_kill>
 800654e:	1c43      	adds	r3, r0, #1
 8006550:	d102      	bne.n	8006558 <_kill_r+0x1c>
 8006552:	682b      	ldr	r3, [r5, #0]
 8006554:	b103      	cbz	r3, 8006558 <_kill_r+0x1c>
 8006556:	6023      	str	r3, [r4, #0]
 8006558:	bd38      	pop	{r3, r4, r5, pc}
 800655a:	bf00      	nop
 800655c:	200003cc 	.word	0x200003cc

08006560 <_getpid_r>:
 8006560:	f7fa bf0c 	b.w	800137c <_getpid>

08006564 <__swhatbuf_r>:
 8006564:	b570      	push	{r4, r5, r6, lr}
 8006566:	460c      	mov	r4, r1
 8006568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800656c:	4615      	mov	r5, r2
 800656e:	2900      	cmp	r1, #0
 8006570:	461e      	mov	r6, r3
 8006572:	b096      	sub	sp, #88	@ 0x58
 8006574:	da0c      	bge.n	8006590 <__swhatbuf_r+0x2c>
 8006576:	89a3      	ldrh	r3, [r4, #12]
 8006578:	2100      	movs	r1, #0
 800657a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800657e:	bf14      	ite	ne
 8006580:	2340      	movne	r3, #64	@ 0x40
 8006582:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006586:	2000      	movs	r0, #0
 8006588:	6031      	str	r1, [r6, #0]
 800658a:	602b      	str	r3, [r5, #0]
 800658c:	b016      	add	sp, #88	@ 0x58
 800658e:	bd70      	pop	{r4, r5, r6, pc}
 8006590:	466a      	mov	r2, sp
 8006592:	f000 f849 	bl	8006628 <_fstat_r>
 8006596:	2800      	cmp	r0, #0
 8006598:	dbed      	blt.n	8006576 <__swhatbuf_r+0x12>
 800659a:	9901      	ldr	r1, [sp, #4]
 800659c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80065a0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80065a4:	4259      	negs	r1, r3
 80065a6:	4159      	adcs	r1, r3
 80065a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065ac:	e7eb      	b.n	8006586 <__swhatbuf_r+0x22>

080065ae <__smakebuf_r>:
 80065ae:	898b      	ldrh	r3, [r1, #12]
 80065b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065b2:	079d      	lsls	r5, r3, #30
 80065b4:	4606      	mov	r6, r0
 80065b6:	460c      	mov	r4, r1
 80065b8:	d507      	bpl.n	80065ca <__smakebuf_r+0x1c>
 80065ba:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80065be:	6023      	str	r3, [r4, #0]
 80065c0:	6123      	str	r3, [r4, #16]
 80065c2:	2301      	movs	r3, #1
 80065c4:	6163      	str	r3, [r4, #20]
 80065c6:	b003      	add	sp, #12
 80065c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ca:	466a      	mov	r2, sp
 80065cc:	ab01      	add	r3, sp, #4
 80065ce:	f7ff ffc9 	bl	8006564 <__swhatbuf_r>
 80065d2:	9f00      	ldr	r7, [sp, #0]
 80065d4:	4605      	mov	r5, r0
 80065d6:	4639      	mov	r1, r7
 80065d8:	4630      	mov	r0, r6
 80065da:	f7fe fec7 	bl	800536c <_malloc_r>
 80065de:	b948      	cbnz	r0, 80065f4 <__smakebuf_r+0x46>
 80065e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065e4:	059a      	lsls	r2, r3, #22
 80065e6:	d4ee      	bmi.n	80065c6 <__smakebuf_r+0x18>
 80065e8:	f023 0303 	bic.w	r3, r3, #3
 80065ec:	f043 0302 	orr.w	r3, r3, #2
 80065f0:	81a3      	strh	r3, [r4, #12]
 80065f2:	e7e2      	b.n	80065ba <__smakebuf_r+0xc>
 80065f4:	89a3      	ldrh	r3, [r4, #12]
 80065f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80065fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065fe:	81a3      	strh	r3, [r4, #12]
 8006600:	9b01      	ldr	r3, [sp, #4]
 8006602:	6020      	str	r0, [r4, #0]
 8006604:	b15b      	cbz	r3, 800661e <__smakebuf_r+0x70>
 8006606:	4630      	mov	r0, r6
 8006608:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800660c:	f000 f81e 	bl	800664c <_isatty_r>
 8006610:	b128      	cbz	r0, 800661e <__smakebuf_r+0x70>
 8006612:	89a3      	ldrh	r3, [r4, #12]
 8006614:	f023 0303 	bic.w	r3, r3, #3
 8006618:	f043 0301 	orr.w	r3, r3, #1
 800661c:	81a3      	strh	r3, [r4, #12]
 800661e:	89a3      	ldrh	r3, [r4, #12]
 8006620:	431d      	orrs	r5, r3
 8006622:	81a5      	strh	r5, [r4, #12]
 8006624:	e7cf      	b.n	80065c6 <__smakebuf_r+0x18>
	...

08006628 <_fstat_r>:
 8006628:	b538      	push	{r3, r4, r5, lr}
 800662a:	2300      	movs	r3, #0
 800662c:	4d06      	ldr	r5, [pc, #24]	@ (8006648 <_fstat_r+0x20>)
 800662e:	4604      	mov	r4, r0
 8006630:	4608      	mov	r0, r1
 8006632:	4611      	mov	r1, r2
 8006634:	602b      	str	r3, [r5, #0]
 8006636:	f7fa ff07 	bl	8001448 <_fstat>
 800663a:	1c43      	adds	r3, r0, #1
 800663c:	d102      	bne.n	8006644 <_fstat_r+0x1c>
 800663e:	682b      	ldr	r3, [r5, #0]
 8006640:	b103      	cbz	r3, 8006644 <_fstat_r+0x1c>
 8006642:	6023      	str	r3, [r4, #0]
 8006644:	bd38      	pop	{r3, r4, r5, pc}
 8006646:	bf00      	nop
 8006648:	200003cc 	.word	0x200003cc

0800664c <_isatty_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	2300      	movs	r3, #0
 8006650:	4d05      	ldr	r5, [pc, #20]	@ (8006668 <_isatty_r+0x1c>)
 8006652:	4604      	mov	r4, r0
 8006654:	4608      	mov	r0, r1
 8006656:	602b      	str	r3, [r5, #0]
 8006658:	f7fa ff05 	bl	8001466 <_isatty>
 800665c:	1c43      	adds	r3, r0, #1
 800665e:	d102      	bne.n	8006666 <_isatty_r+0x1a>
 8006660:	682b      	ldr	r3, [r5, #0]
 8006662:	b103      	cbz	r3, 8006666 <_isatty_r+0x1a>
 8006664:	6023      	str	r3, [r4, #0]
 8006666:	bd38      	pop	{r3, r4, r5, pc}
 8006668:	200003cc 	.word	0x200003cc

0800666c <pow>:
 800666c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006670:	4614      	mov	r4, r2
 8006672:	461d      	mov	r5, r3
 8006674:	4680      	mov	r8, r0
 8006676:	4689      	mov	r9, r1
 8006678:	f000 f866 	bl	8006748 <__ieee754_pow>
 800667c:	4622      	mov	r2, r4
 800667e:	4606      	mov	r6, r0
 8006680:	460f      	mov	r7, r1
 8006682:	462b      	mov	r3, r5
 8006684:	4620      	mov	r0, r4
 8006686:	4629      	mov	r1, r5
 8006688:	f7fa f9c0 	bl	8000a0c <__aeabi_dcmpun>
 800668c:	bbc8      	cbnz	r0, 8006702 <pow+0x96>
 800668e:	2200      	movs	r2, #0
 8006690:	2300      	movs	r3, #0
 8006692:	4640      	mov	r0, r8
 8006694:	4649      	mov	r1, r9
 8006696:	f7fa f987 	bl	80009a8 <__aeabi_dcmpeq>
 800669a:	b1b8      	cbz	r0, 80066cc <pow+0x60>
 800669c:	2200      	movs	r2, #0
 800669e:	2300      	movs	r3, #0
 80066a0:	4620      	mov	r0, r4
 80066a2:	4629      	mov	r1, r5
 80066a4:	f7fa f980 	bl	80009a8 <__aeabi_dcmpeq>
 80066a8:	2800      	cmp	r0, #0
 80066aa:	d141      	bne.n	8006730 <pow+0xc4>
 80066ac:	4620      	mov	r0, r4
 80066ae:	4629      	mov	r1, r5
 80066b0:	f000 f844 	bl	800673c <finite>
 80066b4:	b328      	cbz	r0, 8006702 <pow+0x96>
 80066b6:	2200      	movs	r2, #0
 80066b8:	2300      	movs	r3, #0
 80066ba:	4620      	mov	r0, r4
 80066bc:	4629      	mov	r1, r5
 80066be:	f7fa f97d 	bl	80009bc <__aeabi_dcmplt>
 80066c2:	b1f0      	cbz	r0, 8006702 <pow+0x96>
 80066c4:	f7fd ff54 	bl	8004570 <__errno>
 80066c8:	2322      	movs	r3, #34	@ 0x22
 80066ca:	e019      	b.n	8006700 <pow+0x94>
 80066cc:	4630      	mov	r0, r6
 80066ce:	4639      	mov	r1, r7
 80066d0:	f000 f834 	bl	800673c <finite>
 80066d4:	b9c8      	cbnz	r0, 800670a <pow+0x9e>
 80066d6:	4640      	mov	r0, r8
 80066d8:	4649      	mov	r1, r9
 80066da:	f000 f82f 	bl	800673c <finite>
 80066de:	b1a0      	cbz	r0, 800670a <pow+0x9e>
 80066e0:	4620      	mov	r0, r4
 80066e2:	4629      	mov	r1, r5
 80066e4:	f000 f82a 	bl	800673c <finite>
 80066e8:	b178      	cbz	r0, 800670a <pow+0x9e>
 80066ea:	4632      	mov	r2, r6
 80066ec:	463b      	mov	r3, r7
 80066ee:	4630      	mov	r0, r6
 80066f0:	4639      	mov	r1, r7
 80066f2:	f7fa f98b 	bl	8000a0c <__aeabi_dcmpun>
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d0e4      	beq.n	80066c4 <pow+0x58>
 80066fa:	f7fd ff39 	bl	8004570 <__errno>
 80066fe:	2321      	movs	r3, #33	@ 0x21
 8006700:	6003      	str	r3, [r0, #0]
 8006702:	4630      	mov	r0, r6
 8006704:	4639      	mov	r1, r7
 8006706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800670a:	2200      	movs	r2, #0
 800670c:	2300      	movs	r3, #0
 800670e:	4630      	mov	r0, r6
 8006710:	4639      	mov	r1, r7
 8006712:	f7fa f949 	bl	80009a8 <__aeabi_dcmpeq>
 8006716:	2800      	cmp	r0, #0
 8006718:	d0f3      	beq.n	8006702 <pow+0x96>
 800671a:	4640      	mov	r0, r8
 800671c:	4649      	mov	r1, r9
 800671e:	f000 f80d 	bl	800673c <finite>
 8006722:	2800      	cmp	r0, #0
 8006724:	d0ed      	beq.n	8006702 <pow+0x96>
 8006726:	4620      	mov	r0, r4
 8006728:	4629      	mov	r1, r5
 800672a:	f000 f807 	bl	800673c <finite>
 800672e:	e7c8      	b.n	80066c2 <pow+0x56>
 8006730:	2600      	movs	r6, #0
 8006732:	4f01      	ldr	r7, [pc, #4]	@ (8006738 <pow+0xcc>)
 8006734:	e7e5      	b.n	8006702 <pow+0x96>
 8006736:	bf00      	nop
 8006738:	3ff00000 	.word	0x3ff00000

0800673c <finite>:
 800673c:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8006740:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006744:	0fc0      	lsrs	r0, r0, #31
 8006746:	4770      	bx	lr

08006748 <__ieee754_pow>:
 8006748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800674c:	b091      	sub	sp, #68	@ 0x44
 800674e:	e9cd 2300 	strd	r2, r3, [sp]
 8006752:	468b      	mov	fp, r1
 8006754:	e9dd 1800 	ldrd	r1, r8, [sp]
 8006758:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800675c:	4682      	mov	sl, r0
 800675e:	ea57 0001 	orrs.w	r0, r7, r1
 8006762:	d112      	bne.n	800678a <__ieee754_pow+0x42>
 8006764:	4653      	mov	r3, sl
 8006766:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800676a:	18db      	adds	r3, r3, r3
 800676c:	4152      	adcs	r2, r2
 800676e:	4298      	cmp	r0, r3
 8006770:	4b91      	ldr	r3, [pc, #580]	@ (80069b8 <__ieee754_pow+0x270>)
 8006772:	4193      	sbcs	r3, r2
 8006774:	f080 84ce 	bcs.w	8007114 <__ieee754_pow+0x9cc>
 8006778:	e9dd 2300 	ldrd	r2, r3, [sp]
 800677c:	4650      	mov	r0, sl
 800677e:	4659      	mov	r1, fp
 8006780:	f7f9 fcf4 	bl	800016c <__adddf3>
 8006784:	b011      	add	sp, #68	@ 0x44
 8006786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800678a:	4b8c      	ldr	r3, [pc, #560]	@ (80069bc <__ieee754_pow+0x274>)
 800678c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8006790:	429e      	cmp	r6, r3
 8006792:	465d      	mov	r5, fp
 8006794:	46d1      	mov	r9, sl
 8006796:	d807      	bhi.n	80067a8 <__ieee754_pow+0x60>
 8006798:	d102      	bne.n	80067a0 <__ieee754_pow+0x58>
 800679a:	f1ba 0f00 	cmp.w	sl, #0
 800679e:	d1eb      	bne.n	8006778 <__ieee754_pow+0x30>
 80067a0:	429f      	cmp	r7, r3
 80067a2:	d801      	bhi.n	80067a8 <__ieee754_pow+0x60>
 80067a4:	d10f      	bne.n	80067c6 <__ieee754_pow+0x7e>
 80067a6:	b171      	cbz	r1, 80067c6 <__ieee754_pow+0x7e>
 80067a8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80067ac:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80067b0:	ea55 0509 	orrs.w	r5, r5, r9
 80067b4:	d1e0      	bne.n	8006778 <__ieee754_pow+0x30>
 80067b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80067ba:	18db      	adds	r3, r3, r3
 80067bc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80067c0:	4152      	adcs	r2, r2
 80067c2:	429d      	cmp	r5, r3
 80067c4:	e7d4      	b.n	8006770 <__ieee754_pow+0x28>
 80067c6:	2d00      	cmp	r5, #0
 80067c8:	4633      	mov	r3, r6
 80067ca:	da39      	bge.n	8006840 <__ieee754_pow+0xf8>
 80067cc:	4a7c      	ldr	r2, [pc, #496]	@ (80069c0 <__ieee754_pow+0x278>)
 80067ce:	4297      	cmp	r7, r2
 80067d0:	d84e      	bhi.n	8006870 <__ieee754_pow+0x128>
 80067d2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80067d6:	4297      	cmp	r7, r2
 80067d8:	f240 84ab 	bls.w	8007132 <__ieee754_pow+0x9ea>
 80067dc:	153a      	asrs	r2, r7, #20
 80067de:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80067e2:	2a14      	cmp	r2, #20
 80067e4:	dd0f      	ble.n	8006806 <__ieee754_pow+0xbe>
 80067e6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80067ea:	fa21 f402 	lsr.w	r4, r1, r2
 80067ee:	fa04 f202 	lsl.w	r2, r4, r2
 80067f2:	428a      	cmp	r2, r1
 80067f4:	f040 849d 	bne.w	8007132 <__ieee754_pow+0x9ea>
 80067f8:	f004 0401 	and.w	r4, r4, #1
 80067fc:	f1c4 0402 	rsb	r4, r4, #2
 8006800:	2900      	cmp	r1, #0
 8006802:	d15a      	bne.n	80068ba <__ieee754_pow+0x172>
 8006804:	e00e      	b.n	8006824 <__ieee754_pow+0xdc>
 8006806:	2900      	cmp	r1, #0
 8006808:	d156      	bne.n	80068b8 <__ieee754_pow+0x170>
 800680a:	f1c2 0214 	rsb	r2, r2, #20
 800680e:	fa47 f402 	asr.w	r4, r7, r2
 8006812:	fa04 f202 	lsl.w	r2, r4, r2
 8006816:	42ba      	cmp	r2, r7
 8006818:	f040 8488 	bne.w	800712c <__ieee754_pow+0x9e4>
 800681c:	f004 0401 	and.w	r4, r4, #1
 8006820:	f1c4 0402 	rsb	r4, r4, #2
 8006824:	4a67      	ldr	r2, [pc, #412]	@ (80069c4 <__ieee754_pow+0x27c>)
 8006826:	4297      	cmp	r7, r2
 8006828:	d130      	bne.n	800688c <__ieee754_pow+0x144>
 800682a:	f1b8 0f00 	cmp.w	r8, #0
 800682e:	f280 8479 	bge.w	8007124 <__ieee754_pow+0x9dc>
 8006832:	4652      	mov	r2, sl
 8006834:	465b      	mov	r3, fp
 8006836:	2000      	movs	r0, #0
 8006838:	4962      	ldr	r1, [pc, #392]	@ (80069c4 <__ieee754_pow+0x27c>)
 800683a:	f7f9 ff77 	bl	800072c <__aeabi_ddiv>
 800683e:	e7a1      	b.n	8006784 <__ieee754_pow+0x3c>
 8006840:	2400      	movs	r4, #0
 8006842:	2900      	cmp	r1, #0
 8006844:	d139      	bne.n	80068ba <__ieee754_pow+0x172>
 8006846:	4a5d      	ldr	r2, [pc, #372]	@ (80069bc <__ieee754_pow+0x274>)
 8006848:	4297      	cmp	r7, r2
 800684a:	d1eb      	bne.n	8006824 <__ieee754_pow+0xdc>
 800684c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8006850:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8006854:	ea53 0309 	orrs.w	r3, r3, r9
 8006858:	f000 845c 	beq.w	8007114 <__ieee754_pow+0x9cc>
 800685c:	4b5a      	ldr	r3, [pc, #360]	@ (80069c8 <__ieee754_pow+0x280>)
 800685e:	429e      	cmp	r6, r3
 8006860:	d908      	bls.n	8006874 <__ieee754_pow+0x12c>
 8006862:	f1b8 0f00 	cmp.w	r8, #0
 8006866:	f2c0 8459 	blt.w	800711c <__ieee754_pow+0x9d4>
 800686a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800686e:	e789      	b.n	8006784 <__ieee754_pow+0x3c>
 8006870:	2402      	movs	r4, #2
 8006872:	e7e6      	b.n	8006842 <__ieee754_pow+0xfa>
 8006874:	f1b8 0f00 	cmp.w	r8, #0
 8006878:	f04f 0000 	mov.w	r0, #0
 800687c:	f04f 0100 	mov.w	r1, #0
 8006880:	da80      	bge.n	8006784 <__ieee754_pow+0x3c>
 8006882:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006886:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800688a:	e77b      	b.n	8006784 <__ieee754_pow+0x3c>
 800688c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8006890:	d106      	bne.n	80068a0 <__ieee754_pow+0x158>
 8006892:	4652      	mov	r2, sl
 8006894:	465b      	mov	r3, fp
 8006896:	4650      	mov	r0, sl
 8006898:	4659      	mov	r1, fp
 800689a:	f7f9 fe1d 	bl	80004d8 <__aeabi_dmul>
 800689e:	e771      	b.n	8006784 <__ieee754_pow+0x3c>
 80068a0:	4a4a      	ldr	r2, [pc, #296]	@ (80069cc <__ieee754_pow+0x284>)
 80068a2:	4590      	cmp	r8, r2
 80068a4:	d109      	bne.n	80068ba <__ieee754_pow+0x172>
 80068a6:	2d00      	cmp	r5, #0
 80068a8:	db07      	blt.n	80068ba <__ieee754_pow+0x172>
 80068aa:	4650      	mov	r0, sl
 80068ac:	4659      	mov	r1, fp
 80068ae:	b011      	add	sp, #68	@ 0x44
 80068b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b4:	f000 bd12 	b.w	80072dc <__ieee754_sqrt>
 80068b8:	2400      	movs	r4, #0
 80068ba:	4650      	mov	r0, sl
 80068bc:	4659      	mov	r1, fp
 80068be:	9302      	str	r3, [sp, #8]
 80068c0:	f000 fc6a 	bl	8007198 <fabs>
 80068c4:	9b02      	ldr	r3, [sp, #8]
 80068c6:	f1b9 0f00 	cmp.w	r9, #0
 80068ca:	d127      	bne.n	800691c <__ieee754_pow+0x1d4>
 80068cc:	4a3d      	ldr	r2, [pc, #244]	@ (80069c4 <__ieee754_pow+0x27c>)
 80068ce:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 80068d2:	4594      	cmp	ip, r2
 80068d4:	d000      	beq.n	80068d8 <__ieee754_pow+0x190>
 80068d6:	bb0e      	cbnz	r6, 800691c <__ieee754_pow+0x1d4>
 80068d8:	f1b8 0f00 	cmp.w	r8, #0
 80068dc:	da05      	bge.n	80068ea <__ieee754_pow+0x1a2>
 80068de:	4602      	mov	r2, r0
 80068e0:	460b      	mov	r3, r1
 80068e2:	2000      	movs	r0, #0
 80068e4:	4937      	ldr	r1, [pc, #220]	@ (80069c4 <__ieee754_pow+0x27c>)
 80068e6:	f7f9 ff21 	bl	800072c <__aeabi_ddiv>
 80068ea:	2d00      	cmp	r5, #0
 80068ec:	f6bf af4a 	bge.w	8006784 <__ieee754_pow+0x3c>
 80068f0:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 80068f4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80068f8:	4326      	orrs	r6, r4
 80068fa:	d108      	bne.n	800690e <__ieee754_pow+0x1c6>
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	4610      	mov	r0, r2
 8006902:	4619      	mov	r1, r3
 8006904:	f7f9 fc30 	bl	8000168 <__aeabi_dsub>
 8006908:	4602      	mov	r2, r0
 800690a:	460b      	mov	r3, r1
 800690c:	e795      	b.n	800683a <__ieee754_pow+0xf2>
 800690e:	2c01      	cmp	r4, #1
 8006910:	f47f af38 	bne.w	8006784 <__ieee754_pow+0x3c>
 8006914:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006918:	4619      	mov	r1, r3
 800691a:	e733      	b.n	8006784 <__ieee754_pow+0x3c>
 800691c:	0fea      	lsrs	r2, r5, #31
 800691e:	3a01      	subs	r2, #1
 8006920:	ea52 0c04 	orrs.w	ip, r2, r4
 8006924:	d102      	bne.n	800692c <__ieee754_pow+0x1e4>
 8006926:	4652      	mov	r2, sl
 8006928:	465b      	mov	r3, fp
 800692a:	e7e9      	b.n	8006900 <__ieee754_pow+0x1b8>
 800692c:	f04f 0900 	mov.w	r9, #0
 8006930:	3c01      	subs	r4, #1
 8006932:	4314      	orrs	r4, r2
 8006934:	bf14      	ite	ne
 8006936:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 80069c4 <__ieee754_pow+0x27c>
 800693a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 80069d0 <__ieee754_pow+0x288>
 800693e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8006942:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8006946:	f240 8107 	bls.w	8006b58 <__ieee754_pow+0x410>
 800694a:	4b22      	ldr	r3, [pc, #136]	@ (80069d4 <__ieee754_pow+0x28c>)
 800694c:	429f      	cmp	r7, r3
 800694e:	4b1e      	ldr	r3, [pc, #120]	@ (80069c8 <__ieee754_pow+0x280>)
 8006950:	d913      	bls.n	800697a <__ieee754_pow+0x232>
 8006952:	429e      	cmp	r6, r3
 8006954:	d808      	bhi.n	8006968 <__ieee754_pow+0x220>
 8006956:	f1b8 0f00 	cmp.w	r8, #0
 800695a:	da08      	bge.n	800696e <__ieee754_pow+0x226>
 800695c:	2000      	movs	r0, #0
 800695e:	b011      	add	sp, #68	@ 0x44
 8006960:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006964:	f000 bcb4 	b.w	80072d0 <__math_oflow>
 8006968:	f1b8 0f00 	cmp.w	r8, #0
 800696c:	dcf6      	bgt.n	800695c <__ieee754_pow+0x214>
 800696e:	2000      	movs	r0, #0
 8006970:	b011      	add	sp, #68	@ 0x44
 8006972:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006976:	f000 bca6 	b.w	80072c6 <__math_uflow>
 800697a:	429e      	cmp	r6, r3
 800697c:	d20c      	bcs.n	8006998 <__ieee754_pow+0x250>
 800697e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006982:	2200      	movs	r2, #0
 8006984:	2300      	movs	r3, #0
 8006986:	f7fa f819 	bl	80009bc <__aeabi_dcmplt>
 800698a:	3800      	subs	r0, #0
 800698c:	bf18      	it	ne
 800698e:	2001      	movne	r0, #1
 8006990:	f1b8 0f00 	cmp.w	r8, #0
 8006994:	daec      	bge.n	8006970 <__ieee754_pow+0x228>
 8006996:	e7e2      	b.n	800695e <__ieee754_pow+0x216>
 8006998:	4b0a      	ldr	r3, [pc, #40]	@ (80069c4 <__ieee754_pow+0x27c>)
 800699a:	2200      	movs	r2, #0
 800699c:	429e      	cmp	r6, r3
 800699e:	d91b      	bls.n	80069d8 <__ieee754_pow+0x290>
 80069a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069a4:	2300      	movs	r3, #0
 80069a6:	f7fa f809 	bl	80009bc <__aeabi_dcmplt>
 80069aa:	3800      	subs	r0, #0
 80069ac:	bf18      	it	ne
 80069ae:	2001      	movne	r0, #1
 80069b0:	f1b8 0f00 	cmp.w	r8, #0
 80069b4:	dcd3      	bgt.n	800695e <__ieee754_pow+0x216>
 80069b6:	e7db      	b.n	8006970 <__ieee754_pow+0x228>
 80069b8:	fff00000 	.word	0xfff00000
 80069bc:	7ff00000 	.word	0x7ff00000
 80069c0:	433fffff 	.word	0x433fffff
 80069c4:	3ff00000 	.word	0x3ff00000
 80069c8:	3fefffff 	.word	0x3fefffff
 80069cc:	3fe00000 	.word	0x3fe00000
 80069d0:	bff00000 	.word	0xbff00000
 80069d4:	43f00000 	.word	0x43f00000
 80069d8:	4b5b      	ldr	r3, [pc, #364]	@ (8006b48 <__ieee754_pow+0x400>)
 80069da:	f7f9 fbc5 	bl	8000168 <__aeabi_dsub>
 80069de:	a352      	add	r3, pc, #328	@ (adr r3, 8006b28 <__ieee754_pow+0x3e0>)
 80069e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e4:	4604      	mov	r4, r0
 80069e6:	460d      	mov	r5, r1
 80069e8:	f7f9 fd76 	bl	80004d8 <__aeabi_dmul>
 80069ec:	a350      	add	r3, pc, #320	@ (adr r3, 8006b30 <__ieee754_pow+0x3e8>)
 80069ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f2:	4606      	mov	r6, r0
 80069f4:	460f      	mov	r7, r1
 80069f6:	4620      	mov	r0, r4
 80069f8:	4629      	mov	r1, r5
 80069fa:	f7f9 fd6d 	bl	80004d8 <__aeabi_dmul>
 80069fe:	2200      	movs	r2, #0
 8006a00:	4682      	mov	sl, r0
 8006a02:	468b      	mov	fp, r1
 8006a04:	4620      	mov	r0, r4
 8006a06:	4629      	mov	r1, r5
 8006a08:	4b50      	ldr	r3, [pc, #320]	@ (8006b4c <__ieee754_pow+0x404>)
 8006a0a:	f7f9 fd65 	bl	80004d8 <__aeabi_dmul>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	460b      	mov	r3, r1
 8006a12:	a149      	add	r1, pc, #292	@ (adr r1, 8006b38 <__ieee754_pow+0x3f0>)
 8006a14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a18:	f7f9 fba6 	bl	8000168 <__aeabi_dsub>
 8006a1c:	4622      	mov	r2, r4
 8006a1e:	462b      	mov	r3, r5
 8006a20:	f7f9 fd5a 	bl	80004d8 <__aeabi_dmul>
 8006a24:	4602      	mov	r2, r0
 8006a26:	460b      	mov	r3, r1
 8006a28:	2000      	movs	r0, #0
 8006a2a:	4949      	ldr	r1, [pc, #292]	@ (8006b50 <__ieee754_pow+0x408>)
 8006a2c:	f7f9 fb9c 	bl	8000168 <__aeabi_dsub>
 8006a30:	4622      	mov	r2, r4
 8006a32:	4680      	mov	r8, r0
 8006a34:	4689      	mov	r9, r1
 8006a36:	462b      	mov	r3, r5
 8006a38:	4620      	mov	r0, r4
 8006a3a:	4629      	mov	r1, r5
 8006a3c:	f7f9 fd4c 	bl	80004d8 <__aeabi_dmul>
 8006a40:	4602      	mov	r2, r0
 8006a42:	460b      	mov	r3, r1
 8006a44:	4640      	mov	r0, r8
 8006a46:	4649      	mov	r1, r9
 8006a48:	f7f9 fd46 	bl	80004d8 <__aeabi_dmul>
 8006a4c:	a33c      	add	r3, pc, #240	@ (adr r3, 8006b40 <__ieee754_pow+0x3f8>)
 8006a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a52:	f7f9 fd41 	bl	80004d8 <__aeabi_dmul>
 8006a56:	4602      	mov	r2, r0
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4650      	mov	r0, sl
 8006a5c:	4659      	mov	r1, fp
 8006a5e:	f7f9 fb83 	bl	8000168 <__aeabi_dsub>
 8006a62:	2400      	movs	r4, #0
 8006a64:	4602      	mov	r2, r0
 8006a66:	460b      	mov	r3, r1
 8006a68:	4680      	mov	r8, r0
 8006a6a:	4689      	mov	r9, r1
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	4639      	mov	r1, r7
 8006a70:	f7f9 fb7c 	bl	800016c <__adddf3>
 8006a74:	4632      	mov	r2, r6
 8006a76:	463b      	mov	r3, r7
 8006a78:	4620      	mov	r0, r4
 8006a7a:	460d      	mov	r5, r1
 8006a7c:	f7f9 fb74 	bl	8000168 <__aeabi_dsub>
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	4640      	mov	r0, r8
 8006a86:	4649      	mov	r1, r9
 8006a88:	f7f9 fb6e 	bl	8000168 <__aeabi_dsub>
 8006a8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a94:	2300      	movs	r3, #0
 8006a96:	9304      	str	r3, [sp, #16]
 8006a98:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006a9c:	4606      	mov	r6, r0
 8006a9e:	460f      	mov	r7, r1
 8006aa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006aa4:	4652      	mov	r2, sl
 8006aa6:	465b      	mov	r3, fp
 8006aa8:	f7f9 fb5e 	bl	8000168 <__aeabi_dsub>
 8006aac:	4622      	mov	r2, r4
 8006aae:	462b      	mov	r3, r5
 8006ab0:	f7f9 fd12 	bl	80004d8 <__aeabi_dmul>
 8006ab4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ab8:	4680      	mov	r8, r0
 8006aba:	4689      	mov	r9, r1
 8006abc:	4630      	mov	r0, r6
 8006abe:	4639      	mov	r1, r7
 8006ac0:	f7f9 fd0a 	bl	80004d8 <__aeabi_dmul>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	4640      	mov	r0, r8
 8006aca:	4649      	mov	r1, r9
 8006acc:	f7f9 fb4e 	bl	800016c <__adddf3>
 8006ad0:	4652      	mov	r2, sl
 8006ad2:	465b      	mov	r3, fp
 8006ad4:	4606      	mov	r6, r0
 8006ad6:	460f      	mov	r7, r1
 8006ad8:	4620      	mov	r0, r4
 8006ada:	4629      	mov	r1, r5
 8006adc:	f7f9 fcfc 	bl	80004d8 <__aeabi_dmul>
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	4680      	mov	r8, r0
 8006ae6:	4689      	mov	r9, r1
 8006ae8:	4630      	mov	r0, r6
 8006aea:	4639      	mov	r1, r7
 8006aec:	f7f9 fb3e 	bl	800016c <__adddf3>
 8006af0:	4b18      	ldr	r3, [pc, #96]	@ (8006b54 <__ieee754_pow+0x40c>)
 8006af2:	4604      	mov	r4, r0
 8006af4:	4299      	cmp	r1, r3
 8006af6:	460d      	mov	r5, r1
 8006af8:	468a      	mov	sl, r1
 8006afa:	468b      	mov	fp, r1
 8006afc:	f340 82e0 	ble.w	80070c0 <__ieee754_pow+0x978>
 8006b00:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8006b04:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8006b08:	4303      	orrs	r3, r0
 8006b0a:	f000 81df 	beq.w	8006ecc <__ieee754_pow+0x784>
 8006b0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b12:	2200      	movs	r2, #0
 8006b14:	2300      	movs	r3, #0
 8006b16:	f7f9 ff51 	bl	80009bc <__aeabi_dcmplt>
 8006b1a:	3800      	subs	r0, #0
 8006b1c:	bf18      	it	ne
 8006b1e:	2001      	movne	r0, #1
 8006b20:	e71d      	b.n	800695e <__ieee754_pow+0x216>
 8006b22:	bf00      	nop
 8006b24:	f3af 8000 	nop.w
 8006b28:	60000000 	.word	0x60000000
 8006b2c:	3ff71547 	.word	0x3ff71547
 8006b30:	f85ddf44 	.word	0xf85ddf44
 8006b34:	3e54ae0b 	.word	0x3e54ae0b
 8006b38:	55555555 	.word	0x55555555
 8006b3c:	3fd55555 	.word	0x3fd55555
 8006b40:	652b82fe 	.word	0x652b82fe
 8006b44:	3ff71547 	.word	0x3ff71547
 8006b48:	3ff00000 	.word	0x3ff00000
 8006b4c:	3fd00000 	.word	0x3fd00000
 8006b50:	3fe00000 	.word	0x3fe00000
 8006b54:	408fffff 	.word	0x408fffff
 8006b58:	4ad3      	ldr	r2, [pc, #844]	@ (8006ea8 <__ieee754_pow+0x760>)
 8006b5a:	402a      	ands	r2, r5
 8006b5c:	2a00      	cmp	r2, #0
 8006b5e:	f040 817a 	bne.w	8006e56 <__ieee754_pow+0x70e>
 8006b62:	4bd2      	ldr	r3, [pc, #840]	@ (8006eac <__ieee754_pow+0x764>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	f7f9 fcb7 	bl	80004d8 <__aeabi_dmul>
 8006b6a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8006b6e:	460b      	mov	r3, r1
 8006b70:	151a      	asrs	r2, r3, #20
 8006b72:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8006b76:	4422      	add	r2, r4
 8006b78:	920a      	str	r2, [sp, #40]	@ 0x28
 8006b7a:	4acd      	ldr	r2, [pc, #820]	@ (8006eb0 <__ieee754_pow+0x768>)
 8006b7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b80:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8006b84:	4293      	cmp	r3, r2
 8006b86:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006b8a:	dd08      	ble.n	8006b9e <__ieee754_pow+0x456>
 8006b8c:	4ac9      	ldr	r2, [pc, #804]	@ (8006eb4 <__ieee754_pow+0x76c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	f340 8163 	ble.w	8006e5a <__ieee754_pow+0x712>
 8006b94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b96:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b9e:	2600      	movs	r6, #0
 8006ba0:	00f3      	lsls	r3, r6, #3
 8006ba2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ba4:	4bc4      	ldr	r3, [pc, #784]	@ (8006eb8 <__ieee754_pow+0x770>)
 8006ba6:	4629      	mov	r1, r5
 8006ba8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006bac:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8006bb6:	4623      	mov	r3, r4
 8006bb8:	4682      	mov	sl, r0
 8006bba:	f7f9 fad5 	bl	8000168 <__aeabi_dsub>
 8006bbe:	4652      	mov	r2, sl
 8006bc0:	462b      	mov	r3, r5
 8006bc2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8006bc6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006bca:	f7f9 facf 	bl	800016c <__adddf3>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	2000      	movs	r0, #0
 8006bd4:	49b9      	ldr	r1, [pc, #740]	@ (8006ebc <__ieee754_pow+0x774>)
 8006bd6:	f7f9 fda9 	bl	800072c <__aeabi_ddiv>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006be2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006be6:	f7f9 fc77 	bl	80004d8 <__aeabi_dmul>
 8006bea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006bee:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8006bf2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	46ab      	mov	fp, r5
 8006bfc:	106d      	asrs	r5, r5, #1
 8006bfe:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8006c02:	9304      	str	r3, [sp, #16]
 8006c04:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8006c08:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006c0c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8006c10:	4640      	mov	r0, r8
 8006c12:	4649      	mov	r1, r9
 8006c14:	4614      	mov	r4, r2
 8006c16:	461d      	mov	r5, r3
 8006c18:	f7f9 fc5e 	bl	80004d8 <__aeabi_dmul>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c24:	f7f9 faa0 	bl	8000168 <__aeabi_dsub>
 8006c28:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c2c:	4606      	mov	r6, r0
 8006c2e:	460f      	mov	r7, r1
 8006c30:	4620      	mov	r0, r4
 8006c32:	4629      	mov	r1, r5
 8006c34:	f7f9 fa98 	bl	8000168 <__aeabi_dsub>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	4650      	mov	r0, sl
 8006c3e:	4659      	mov	r1, fp
 8006c40:	f7f9 fa92 	bl	8000168 <__aeabi_dsub>
 8006c44:	4642      	mov	r2, r8
 8006c46:	464b      	mov	r3, r9
 8006c48:	f7f9 fc46 	bl	80004d8 <__aeabi_dmul>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	460b      	mov	r3, r1
 8006c50:	4630      	mov	r0, r6
 8006c52:	4639      	mov	r1, r7
 8006c54:	f7f9 fa88 	bl	8000168 <__aeabi_dsub>
 8006c58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006c5c:	f7f9 fc3c 	bl	80004d8 <__aeabi_dmul>
 8006c60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c64:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006c68:	4610      	mov	r0, r2
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	f7f9 fc34 	bl	80004d8 <__aeabi_dmul>
 8006c70:	a37b      	add	r3, pc, #492	@ (adr r3, 8006e60 <__ieee754_pow+0x718>)
 8006c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c76:	4604      	mov	r4, r0
 8006c78:	460d      	mov	r5, r1
 8006c7a:	f7f9 fc2d 	bl	80004d8 <__aeabi_dmul>
 8006c7e:	a37a      	add	r3, pc, #488	@ (adr r3, 8006e68 <__ieee754_pow+0x720>)
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	f7f9 fa72 	bl	800016c <__adddf3>
 8006c88:	4622      	mov	r2, r4
 8006c8a:	462b      	mov	r3, r5
 8006c8c:	f7f9 fc24 	bl	80004d8 <__aeabi_dmul>
 8006c90:	a377      	add	r3, pc, #476	@ (adr r3, 8006e70 <__ieee754_pow+0x728>)
 8006c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c96:	f7f9 fa69 	bl	800016c <__adddf3>
 8006c9a:	4622      	mov	r2, r4
 8006c9c:	462b      	mov	r3, r5
 8006c9e:	f7f9 fc1b 	bl	80004d8 <__aeabi_dmul>
 8006ca2:	a375      	add	r3, pc, #468	@ (adr r3, 8006e78 <__ieee754_pow+0x730>)
 8006ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca8:	f7f9 fa60 	bl	800016c <__adddf3>
 8006cac:	4622      	mov	r2, r4
 8006cae:	462b      	mov	r3, r5
 8006cb0:	f7f9 fc12 	bl	80004d8 <__aeabi_dmul>
 8006cb4:	a372      	add	r3, pc, #456	@ (adr r3, 8006e80 <__ieee754_pow+0x738>)
 8006cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cba:	f7f9 fa57 	bl	800016c <__adddf3>
 8006cbe:	4622      	mov	r2, r4
 8006cc0:	462b      	mov	r3, r5
 8006cc2:	f7f9 fc09 	bl	80004d8 <__aeabi_dmul>
 8006cc6:	a370      	add	r3, pc, #448	@ (adr r3, 8006e88 <__ieee754_pow+0x740>)
 8006cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ccc:	f7f9 fa4e 	bl	800016c <__adddf3>
 8006cd0:	4622      	mov	r2, r4
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	460f      	mov	r7, r1
 8006cd6:	462b      	mov	r3, r5
 8006cd8:	4620      	mov	r0, r4
 8006cda:	4629      	mov	r1, r5
 8006cdc:	f7f9 fbfc 	bl	80004d8 <__aeabi_dmul>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	4639      	mov	r1, r7
 8006ce8:	f7f9 fbf6 	bl	80004d8 <__aeabi_dmul>
 8006cec:	4604      	mov	r4, r0
 8006cee:	460d      	mov	r5, r1
 8006cf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cf4:	4642      	mov	r2, r8
 8006cf6:	464b      	mov	r3, r9
 8006cf8:	f7f9 fa38 	bl	800016c <__adddf3>
 8006cfc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d00:	f7f9 fbea 	bl	80004d8 <__aeabi_dmul>
 8006d04:	4622      	mov	r2, r4
 8006d06:	462b      	mov	r3, r5
 8006d08:	f7f9 fa30 	bl	800016c <__adddf3>
 8006d0c:	4642      	mov	r2, r8
 8006d0e:	4682      	mov	sl, r0
 8006d10:	468b      	mov	fp, r1
 8006d12:	464b      	mov	r3, r9
 8006d14:	4640      	mov	r0, r8
 8006d16:	4649      	mov	r1, r9
 8006d18:	f7f9 fbde 	bl	80004d8 <__aeabi_dmul>
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	4b68      	ldr	r3, [pc, #416]	@ (8006ec0 <__ieee754_pow+0x778>)
 8006d20:	4606      	mov	r6, r0
 8006d22:	460f      	mov	r7, r1
 8006d24:	f7f9 fa22 	bl	800016c <__adddf3>
 8006d28:	4652      	mov	r2, sl
 8006d2a:	465b      	mov	r3, fp
 8006d2c:	f7f9 fa1e 	bl	800016c <__adddf3>
 8006d30:	2400      	movs	r4, #0
 8006d32:	460d      	mov	r5, r1
 8006d34:	4622      	mov	r2, r4
 8006d36:	460b      	mov	r3, r1
 8006d38:	4640      	mov	r0, r8
 8006d3a:	4649      	mov	r1, r9
 8006d3c:	f7f9 fbcc 	bl	80004d8 <__aeabi_dmul>
 8006d40:	2200      	movs	r2, #0
 8006d42:	4680      	mov	r8, r0
 8006d44:	4689      	mov	r9, r1
 8006d46:	4620      	mov	r0, r4
 8006d48:	4629      	mov	r1, r5
 8006d4a:	4b5d      	ldr	r3, [pc, #372]	@ (8006ec0 <__ieee754_pow+0x778>)
 8006d4c:	f7f9 fa0c 	bl	8000168 <__aeabi_dsub>
 8006d50:	4632      	mov	r2, r6
 8006d52:	463b      	mov	r3, r7
 8006d54:	f7f9 fa08 	bl	8000168 <__aeabi_dsub>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	4650      	mov	r0, sl
 8006d5e:	4659      	mov	r1, fp
 8006d60:	f7f9 fa02 	bl	8000168 <__aeabi_dsub>
 8006d64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d68:	f7f9 fbb6 	bl	80004d8 <__aeabi_dmul>
 8006d6c:	4622      	mov	r2, r4
 8006d6e:	4606      	mov	r6, r0
 8006d70:	460f      	mov	r7, r1
 8006d72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006d76:	462b      	mov	r3, r5
 8006d78:	f7f9 fbae 	bl	80004d8 <__aeabi_dmul>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4630      	mov	r0, r6
 8006d82:	4639      	mov	r1, r7
 8006d84:	f7f9 f9f2 	bl	800016c <__adddf3>
 8006d88:	2400      	movs	r4, #0
 8006d8a:	4606      	mov	r6, r0
 8006d8c:	460f      	mov	r7, r1
 8006d8e:	4602      	mov	r2, r0
 8006d90:	460b      	mov	r3, r1
 8006d92:	4640      	mov	r0, r8
 8006d94:	4649      	mov	r1, r9
 8006d96:	f7f9 f9e9 	bl	800016c <__adddf3>
 8006d9a:	a33d      	add	r3, pc, #244	@ (adr r3, 8006e90 <__ieee754_pow+0x748>)
 8006d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da0:	4620      	mov	r0, r4
 8006da2:	460d      	mov	r5, r1
 8006da4:	f7f9 fb98 	bl	80004d8 <__aeabi_dmul>
 8006da8:	4642      	mov	r2, r8
 8006daa:	464b      	mov	r3, r9
 8006dac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006db0:	4620      	mov	r0, r4
 8006db2:	4629      	mov	r1, r5
 8006db4:	f7f9 f9d8 	bl	8000168 <__aeabi_dsub>
 8006db8:	4602      	mov	r2, r0
 8006dba:	460b      	mov	r3, r1
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	4639      	mov	r1, r7
 8006dc0:	f7f9 f9d2 	bl	8000168 <__aeabi_dsub>
 8006dc4:	a334      	add	r3, pc, #208	@ (adr r3, 8006e98 <__ieee754_pow+0x750>)
 8006dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dca:	f7f9 fb85 	bl	80004d8 <__aeabi_dmul>
 8006dce:	a334      	add	r3, pc, #208	@ (adr r3, 8006ea0 <__ieee754_pow+0x758>)
 8006dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd4:	4606      	mov	r6, r0
 8006dd6:	460f      	mov	r7, r1
 8006dd8:	4620      	mov	r0, r4
 8006dda:	4629      	mov	r1, r5
 8006ddc:	f7f9 fb7c 	bl	80004d8 <__aeabi_dmul>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	4630      	mov	r0, r6
 8006de6:	4639      	mov	r1, r7
 8006de8:	f7f9 f9c0 	bl	800016c <__adddf3>
 8006dec:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006dee:	4b35      	ldr	r3, [pc, #212]	@ (8006ec4 <__ieee754_pow+0x77c>)
 8006df0:	2400      	movs	r4, #0
 8006df2:	4413      	add	r3, r2
 8006df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df8:	f7f9 f9b8 	bl	800016c <__adddf3>
 8006dfc:	4682      	mov	sl, r0
 8006dfe:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006e00:	468b      	mov	fp, r1
 8006e02:	f7f9 faff 	bl	8000404 <__aeabi_i2d>
 8006e06:	4606      	mov	r6, r0
 8006e08:	460f      	mov	r7, r1
 8006e0a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006e0c:	4b2e      	ldr	r3, [pc, #184]	@ (8006ec8 <__ieee754_pow+0x780>)
 8006e0e:	4413      	add	r3, r2
 8006e10:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e14:	4652      	mov	r2, sl
 8006e16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e1a:	465b      	mov	r3, fp
 8006e1c:	f7f9 f9a6 	bl	800016c <__adddf3>
 8006e20:	4642      	mov	r2, r8
 8006e22:	464b      	mov	r3, r9
 8006e24:	f7f9 f9a2 	bl	800016c <__adddf3>
 8006e28:	4632      	mov	r2, r6
 8006e2a:	463b      	mov	r3, r7
 8006e2c:	f7f9 f99e 	bl	800016c <__adddf3>
 8006e30:	4632      	mov	r2, r6
 8006e32:	463b      	mov	r3, r7
 8006e34:	4620      	mov	r0, r4
 8006e36:	460d      	mov	r5, r1
 8006e38:	f7f9 f996 	bl	8000168 <__aeabi_dsub>
 8006e3c:	4642      	mov	r2, r8
 8006e3e:	464b      	mov	r3, r9
 8006e40:	f7f9 f992 	bl	8000168 <__aeabi_dsub>
 8006e44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e48:	f7f9 f98e 	bl	8000168 <__aeabi_dsub>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4650      	mov	r0, sl
 8006e52:	4659      	mov	r1, fp
 8006e54:	e618      	b.n	8006a88 <__ieee754_pow+0x340>
 8006e56:	2400      	movs	r4, #0
 8006e58:	e68a      	b.n	8006b70 <__ieee754_pow+0x428>
 8006e5a:	2601      	movs	r6, #1
 8006e5c:	e6a0      	b.n	8006ba0 <__ieee754_pow+0x458>
 8006e5e:	bf00      	nop
 8006e60:	4a454eef 	.word	0x4a454eef
 8006e64:	3fca7e28 	.word	0x3fca7e28
 8006e68:	93c9db65 	.word	0x93c9db65
 8006e6c:	3fcd864a 	.word	0x3fcd864a
 8006e70:	a91d4101 	.word	0xa91d4101
 8006e74:	3fd17460 	.word	0x3fd17460
 8006e78:	518f264d 	.word	0x518f264d
 8006e7c:	3fd55555 	.word	0x3fd55555
 8006e80:	db6fabff 	.word	0xdb6fabff
 8006e84:	3fdb6db6 	.word	0x3fdb6db6
 8006e88:	33333303 	.word	0x33333303
 8006e8c:	3fe33333 	.word	0x3fe33333
 8006e90:	e0000000 	.word	0xe0000000
 8006e94:	3feec709 	.word	0x3feec709
 8006e98:	dc3a03fd 	.word	0xdc3a03fd
 8006e9c:	3feec709 	.word	0x3feec709
 8006ea0:	145b01f5 	.word	0x145b01f5
 8006ea4:	be3e2fe0 	.word	0xbe3e2fe0
 8006ea8:	7ff00000 	.word	0x7ff00000
 8006eac:	43400000 	.word	0x43400000
 8006eb0:	0003988e 	.word	0x0003988e
 8006eb4:	000bb679 	.word	0x000bb679
 8006eb8:	08007880 	.word	0x08007880
 8006ebc:	3ff00000 	.word	0x3ff00000
 8006ec0:	40080000 	.word	0x40080000
 8006ec4:	08007860 	.word	0x08007860
 8006ec8:	08007870 	.word	0x08007870
 8006ecc:	a39a      	add	r3, pc, #616	@ (adr r3, 8007138 <__ieee754_pow+0x9f0>)
 8006ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed2:	4630      	mov	r0, r6
 8006ed4:	4639      	mov	r1, r7
 8006ed6:	f7f9 f949 	bl	800016c <__adddf3>
 8006eda:	4642      	mov	r2, r8
 8006edc:	e9cd 0100 	strd	r0, r1, [sp]
 8006ee0:	464b      	mov	r3, r9
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	f7f9 f93f 	bl	8000168 <__aeabi_dsub>
 8006eea:	4602      	mov	r2, r0
 8006eec:	460b      	mov	r3, r1
 8006eee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ef2:	f7f9 fd81 	bl	80009f8 <__aeabi_dcmpgt>
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	f47f ae09 	bne.w	8006b0e <__ieee754_pow+0x3c6>
 8006efc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006f00:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8006f04:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8006f08:	fa43 fa0a 	asr.w	sl, r3, sl
 8006f0c:	44da      	add	sl, fp
 8006f0e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006f12:	489b      	ldr	r0, [pc, #620]	@ (8007180 <__ieee754_pow+0xa38>)
 8006f14:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8006f18:	4108      	asrs	r0, r1
 8006f1a:	ea00 030a 	and.w	r3, r0, sl
 8006f1e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006f22:	f1c1 0114 	rsb	r1, r1, #20
 8006f26:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8006f2a:	4640      	mov	r0, r8
 8006f2c:	fa4a fa01 	asr.w	sl, sl, r1
 8006f30:	f1bb 0f00 	cmp.w	fp, #0
 8006f34:	4649      	mov	r1, r9
 8006f36:	f04f 0200 	mov.w	r2, #0
 8006f3a:	bfb8      	it	lt
 8006f3c:	f1ca 0a00 	rsblt	sl, sl, #0
 8006f40:	f7f9 f912 	bl	8000168 <__aeabi_dsub>
 8006f44:	4680      	mov	r8, r0
 8006f46:	4689      	mov	r9, r1
 8006f48:	2400      	movs	r4, #0
 8006f4a:	4632      	mov	r2, r6
 8006f4c:	463b      	mov	r3, r7
 8006f4e:	4640      	mov	r0, r8
 8006f50:	4649      	mov	r1, r9
 8006f52:	f7f9 f90b 	bl	800016c <__adddf3>
 8006f56:	a37a      	add	r3, pc, #488	@ (adr r3, 8007140 <__ieee754_pow+0x9f8>)
 8006f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	460d      	mov	r5, r1
 8006f60:	f7f9 faba 	bl	80004d8 <__aeabi_dmul>
 8006f64:	4642      	mov	r2, r8
 8006f66:	464b      	mov	r3, r9
 8006f68:	e9cd 0100 	strd	r0, r1, [sp]
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	4629      	mov	r1, r5
 8006f70:	f7f9 f8fa 	bl	8000168 <__aeabi_dsub>
 8006f74:	4602      	mov	r2, r0
 8006f76:	460b      	mov	r3, r1
 8006f78:	4630      	mov	r0, r6
 8006f7a:	4639      	mov	r1, r7
 8006f7c:	f7f9 f8f4 	bl	8000168 <__aeabi_dsub>
 8006f80:	a371      	add	r3, pc, #452	@ (adr r3, 8007148 <__ieee754_pow+0xa00>)
 8006f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f86:	f7f9 faa7 	bl	80004d8 <__aeabi_dmul>
 8006f8a:	a371      	add	r3, pc, #452	@ (adr r3, 8007150 <__ieee754_pow+0xa08>)
 8006f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f90:	4680      	mov	r8, r0
 8006f92:	4689      	mov	r9, r1
 8006f94:	4620      	mov	r0, r4
 8006f96:	4629      	mov	r1, r5
 8006f98:	f7f9 fa9e 	bl	80004d8 <__aeabi_dmul>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	4640      	mov	r0, r8
 8006fa2:	4649      	mov	r1, r9
 8006fa4:	f7f9 f8e2 	bl	800016c <__adddf3>
 8006fa8:	4604      	mov	r4, r0
 8006faa:	460d      	mov	r5, r1
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fb4:	f7f9 f8da 	bl	800016c <__adddf3>
 8006fb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fbc:	4680      	mov	r8, r0
 8006fbe:	4689      	mov	r9, r1
 8006fc0:	f7f9 f8d2 	bl	8000168 <__aeabi_dsub>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4620      	mov	r0, r4
 8006fca:	4629      	mov	r1, r5
 8006fcc:	f7f9 f8cc 	bl	8000168 <__aeabi_dsub>
 8006fd0:	4642      	mov	r2, r8
 8006fd2:	4606      	mov	r6, r0
 8006fd4:	460f      	mov	r7, r1
 8006fd6:	464b      	mov	r3, r9
 8006fd8:	4640      	mov	r0, r8
 8006fda:	4649      	mov	r1, r9
 8006fdc:	f7f9 fa7c 	bl	80004d8 <__aeabi_dmul>
 8006fe0:	a35d      	add	r3, pc, #372	@ (adr r3, 8007158 <__ieee754_pow+0xa10>)
 8006fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe6:	4604      	mov	r4, r0
 8006fe8:	460d      	mov	r5, r1
 8006fea:	f7f9 fa75 	bl	80004d8 <__aeabi_dmul>
 8006fee:	a35c      	add	r3, pc, #368	@ (adr r3, 8007160 <__ieee754_pow+0xa18>)
 8006ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff4:	f7f9 f8b8 	bl	8000168 <__aeabi_dsub>
 8006ff8:	4622      	mov	r2, r4
 8006ffa:	462b      	mov	r3, r5
 8006ffc:	f7f9 fa6c 	bl	80004d8 <__aeabi_dmul>
 8007000:	a359      	add	r3, pc, #356	@ (adr r3, 8007168 <__ieee754_pow+0xa20>)
 8007002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007006:	f7f9 f8b1 	bl	800016c <__adddf3>
 800700a:	4622      	mov	r2, r4
 800700c:	462b      	mov	r3, r5
 800700e:	f7f9 fa63 	bl	80004d8 <__aeabi_dmul>
 8007012:	a357      	add	r3, pc, #348	@ (adr r3, 8007170 <__ieee754_pow+0xa28>)
 8007014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007018:	f7f9 f8a6 	bl	8000168 <__aeabi_dsub>
 800701c:	4622      	mov	r2, r4
 800701e:	462b      	mov	r3, r5
 8007020:	f7f9 fa5a 	bl	80004d8 <__aeabi_dmul>
 8007024:	a354      	add	r3, pc, #336	@ (adr r3, 8007178 <__ieee754_pow+0xa30>)
 8007026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702a:	f7f9 f89f 	bl	800016c <__adddf3>
 800702e:	4622      	mov	r2, r4
 8007030:	462b      	mov	r3, r5
 8007032:	f7f9 fa51 	bl	80004d8 <__aeabi_dmul>
 8007036:	4602      	mov	r2, r0
 8007038:	460b      	mov	r3, r1
 800703a:	4640      	mov	r0, r8
 800703c:	4649      	mov	r1, r9
 800703e:	f7f9 f893 	bl	8000168 <__aeabi_dsub>
 8007042:	4604      	mov	r4, r0
 8007044:	460d      	mov	r5, r1
 8007046:	4602      	mov	r2, r0
 8007048:	460b      	mov	r3, r1
 800704a:	4640      	mov	r0, r8
 800704c:	4649      	mov	r1, r9
 800704e:	f7f9 fa43 	bl	80004d8 <__aeabi_dmul>
 8007052:	2200      	movs	r2, #0
 8007054:	e9cd 0100 	strd	r0, r1, [sp]
 8007058:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800705c:	4620      	mov	r0, r4
 800705e:	4629      	mov	r1, r5
 8007060:	f7f9 f882 	bl	8000168 <__aeabi_dsub>
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	e9dd 0100 	ldrd	r0, r1, [sp]
 800706c:	f7f9 fb5e 	bl	800072c <__aeabi_ddiv>
 8007070:	4632      	mov	r2, r6
 8007072:	4604      	mov	r4, r0
 8007074:	460d      	mov	r5, r1
 8007076:	463b      	mov	r3, r7
 8007078:	4640      	mov	r0, r8
 800707a:	4649      	mov	r1, r9
 800707c:	f7f9 fa2c 	bl	80004d8 <__aeabi_dmul>
 8007080:	4632      	mov	r2, r6
 8007082:	463b      	mov	r3, r7
 8007084:	f7f9 f872 	bl	800016c <__adddf3>
 8007088:	4602      	mov	r2, r0
 800708a:	460b      	mov	r3, r1
 800708c:	4620      	mov	r0, r4
 800708e:	4629      	mov	r1, r5
 8007090:	f7f9 f86a 	bl	8000168 <__aeabi_dsub>
 8007094:	4642      	mov	r2, r8
 8007096:	464b      	mov	r3, r9
 8007098:	f7f9 f866 	bl	8000168 <__aeabi_dsub>
 800709c:	4602      	mov	r2, r0
 800709e:	460b      	mov	r3, r1
 80070a0:	2000      	movs	r0, #0
 80070a2:	4938      	ldr	r1, [pc, #224]	@ (8007184 <__ieee754_pow+0xa3c>)
 80070a4:	f7f9 f860 	bl	8000168 <__aeabi_dsub>
 80070a8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80070ac:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 80070b0:	da2e      	bge.n	8007110 <__ieee754_pow+0x9c8>
 80070b2:	4652      	mov	r2, sl
 80070b4:	f000 f874 	bl	80071a0 <scalbn>
 80070b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070bc:	f7ff bbed 	b.w	800689a <__ieee754_pow+0x152>
 80070c0:	4c31      	ldr	r4, [pc, #196]	@ (8007188 <__ieee754_pow+0xa40>)
 80070c2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80070c6:	42a3      	cmp	r3, r4
 80070c8:	d91a      	bls.n	8007100 <__ieee754_pow+0x9b8>
 80070ca:	4b30      	ldr	r3, [pc, #192]	@ (800718c <__ieee754_pow+0xa44>)
 80070cc:	440b      	add	r3, r1
 80070ce:	4303      	orrs	r3, r0
 80070d0:	d009      	beq.n	80070e6 <__ieee754_pow+0x99e>
 80070d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070d6:	2200      	movs	r2, #0
 80070d8:	2300      	movs	r3, #0
 80070da:	f7f9 fc6f 	bl	80009bc <__aeabi_dcmplt>
 80070de:	3800      	subs	r0, #0
 80070e0:	bf18      	it	ne
 80070e2:	2001      	movne	r0, #1
 80070e4:	e444      	b.n	8006970 <__ieee754_pow+0x228>
 80070e6:	4642      	mov	r2, r8
 80070e8:	464b      	mov	r3, r9
 80070ea:	f7f9 f83d 	bl	8000168 <__aeabi_dsub>
 80070ee:	4632      	mov	r2, r6
 80070f0:	463b      	mov	r3, r7
 80070f2:	f7f9 fc77 	bl	80009e4 <__aeabi_dcmpge>
 80070f6:	2800      	cmp	r0, #0
 80070f8:	d1eb      	bne.n	80070d2 <__ieee754_pow+0x98a>
 80070fa:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8007190 <__ieee754_pow+0xa48>
 80070fe:	e6fd      	b.n	8006efc <__ieee754_pow+0x7b4>
 8007100:	469a      	mov	sl, r3
 8007102:	4b24      	ldr	r3, [pc, #144]	@ (8007194 <__ieee754_pow+0xa4c>)
 8007104:	459a      	cmp	sl, r3
 8007106:	f63f aef9 	bhi.w	8006efc <__ieee754_pow+0x7b4>
 800710a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800710e:	e71b      	b.n	8006f48 <__ieee754_pow+0x800>
 8007110:	4621      	mov	r1, r4
 8007112:	e7d1      	b.n	80070b8 <__ieee754_pow+0x970>
 8007114:	2000      	movs	r0, #0
 8007116:	491b      	ldr	r1, [pc, #108]	@ (8007184 <__ieee754_pow+0xa3c>)
 8007118:	f7ff bb34 	b.w	8006784 <__ieee754_pow+0x3c>
 800711c:	2000      	movs	r0, #0
 800711e:	2100      	movs	r1, #0
 8007120:	f7ff bb30 	b.w	8006784 <__ieee754_pow+0x3c>
 8007124:	4650      	mov	r0, sl
 8007126:	4659      	mov	r1, fp
 8007128:	f7ff bb2c 	b.w	8006784 <__ieee754_pow+0x3c>
 800712c:	460c      	mov	r4, r1
 800712e:	f7ff bb79 	b.w	8006824 <__ieee754_pow+0xdc>
 8007132:	2400      	movs	r4, #0
 8007134:	f7ff bb64 	b.w	8006800 <__ieee754_pow+0xb8>
 8007138:	652b82fe 	.word	0x652b82fe
 800713c:	3c971547 	.word	0x3c971547
 8007140:	00000000 	.word	0x00000000
 8007144:	3fe62e43 	.word	0x3fe62e43
 8007148:	fefa39ef 	.word	0xfefa39ef
 800714c:	3fe62e42 	.word	0x3fe62e42
 8007150:	0ca86c39 	.word	0x0ca86c39
 8007154:	be205c61 	.word	0xbe205c61
 8007158:	72bea4d0 	.word	0x72bea4d0
 800715c:	3e663769 	.word	0x3e663769
 8007160:	c5d26bf1 	.word	0xc5d26bf1
 8007164:	3ebbbd41 	.word	0x3ebbbd41
 8007168:	af25de2c 	.word	0xaf25de2c
 800716c:	3f11566a 	.word	0x3f11566a
 8007170:	16bebd93 	.word	0x16bebd93
 8007174:	3f66c16c 	.word	0x3f66c16c
 8007178:	5555553e 	.word	0x5555553e
 800717c:	3fc55555 	.word	0x3fc55555
 8007180:	fff00000 	.word	0xfff00000
 8007184:	3ff00000 	.word	0x3ff00000
 8007188:	4090cbff 	.word	0x4090cbff
 800718c:	3f6f3400 	.word	0x3f6f3400
 8007190:	4090cc00 	.word	0x4090cc00
 8007194:	3fe00000 	.word	0x3fe00000

08007198 <fabs>:
 8007198:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800719c:	4619      	mov	r1, r3
 800719e:	4770      	bx	lr

080071a0 <scalbn>:
 80071a0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80071a4:	4616      	mov	r6, r2
 80071a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80071aa:	4683      	mov	fp, r0
 80071ac:	468c      	mov	ip, r1
 80071ae:	460b      	mov	r3, r1
 80071b0:	b982      	cbnz	r2, 80071d4 <scalbn+0x34>
 80071b2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80071b6:	4303      	orrs	r3, r0
 80071b8:	d039      	beq.n	800722e <scalbn+0x8e>
 80071ba:	4b2f      	ldr	r3, [pc, #188]	@ (8007278 <scalbn+0xd8>)
 80071bc:	2200      	movs	r2, #0
 80071be:	f7f9 f98b 	bl	80004d8 <__aeabi_dmul>
 80071c2:	4b2e      	ldr	r3, [pc, #184]	@ (800727c <scalbn+0xdc>)
 80071c4:	4683      	mov	fp, r0
 80071c6:	429e      	cmp	r6, r3
 80071c8:	468c      	mov	ip, r1
 80071ca:	da0d      	bge.n	80071e8 <scalbn+0x48>
 80071cc:	a326      	add	r3, pc, #152	@ (adr r3, 8007268 <scalbn+0xc8>)
 80071ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d2:	e01b      	b.n	800720c <scalbn+0x6c>
 80071d4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 80071d8:	42ba      	cmp	r2, r7
 80071da:	d109      	bne.n	80071f0 <scalbn+0x50>
 80071dc:	4602      	mov	r2, r0
 80071de:	f7f8 ffc5 	bl	800016c <__adddf3>
 80071e2:	4683      	mov	fp, r0
 80071e4:	468c      	mov	ip, r1
 80071e6:	e022      	b.n	800722e <scalbn+0x8e>
 80071e8:	460b      	mov	r3, r1
 80071ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80071ee:	3a36      	subs	r2, #54	@ 0x36
 80071f0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80071f4:	428e      	cmp	r6, r1
 80071f6:	dd0c      	ble.n	8007212 <scalbn+0x72>
 80071f8:	a31d      	add	r3, pc, #116	@ (adr r3, 8007270 <scalbn+0xd0>)
 80071fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fe:	461c      	mov	r4, r3
 8007200:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8007204:	f361 74df 	bfi	r4, r1, #31, #1
 8007208:	4621      	mov	r1, r4
 800720a:	481d      	ldr	r0, [pc, #116]	@ (8007280 <scalbn+0xe0>)
 800720c:	f7f9 f964 	bl	80004d8 <__aeabi_dmul>
 8007210:	e7e7      	b.n	80071e2 <scalbn+0x42>
 8007212:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007216:	4432      	add	r2, r6
 8007218:	428a      	cmp	r2, r1
 800721a:	dced      	bgt.n	80071f8 <scalbn+0x58>
 800721c:	2a00      	cmp	r2, #0
 800721e:	dd0a      	ble.n	8007236 <scalbn+0x96>
 8007220:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007224:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007228:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800722c:	46ac      	mov	ip, r5
 800722e:	4658      	mov	r0, fp
 8007230:	4661      	mov	r1, ip
 8007232:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8007236:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800723a:	da09      	bge.n	8007250 <scalbn+0xb0>
 800723c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8007240:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8007244:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8007248:	480e      	ldr	r0, [pc, #56]	@ (8007284 <scalbn+0xe4>)
 800724a:	f041 011f 	orr.w	r1, r1, #31
 800724e:	e7bd      	b.n	80071cc <scalbn+0x2c>
 8007250:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007254:	3236      	adds	r2, #54	@ 0x36
 8007256:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800725a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800725e:	4658      	mov	r0, fp
 8007260:	4629      	mov	r1, r5
 8007262:	2200      	movs	r2, #0
 8007264:	4b08      	ldr	r3, [pc, #32]	@ (8007288 <scalbn+0xe8>)
 8007266:	e7d1      	b.n	800720c <scalbn+0x6c>
 8007268:	c2f8f359 	.word	0xc2f8f359
 800726c:	01a56e1f 	.word	0x01a56e1f
 8007270:	8800759c 	.word	0x8800759c
 8007274:	7e37e43c 	.word	0x7e37e43c
 8007278:	43500000 	.word	0x43500000
 800727c:	ffff3cb0 	.word	0xffff3cb0
 8007280:	8800759c 	.word	0x8800759c
 8007284:	c2f8f359 	.word	0xc2f8f359
 8007288:	3c900000 	.word	0x3c900000

0800728c <with_errno>:
 800728c:	b570      	push	{r4, r5, r6, lr}
 800728e:	4604      	mov	r4, r0
 8007290:	460d      	mov	r5, r1
 8007292:	4616      	mov	r6, r2
 8007294:	f7fd f96c 	bl	8004570 <__errno>
 8007298:	4629      	mov	r1, r5
 800729a:	6006      	str	r6, [r0, #0]
 800729c:	4620      	mov	r0, r4
 800729e:	bd70      	pop	{r4, r5, r6, pc}

080072a0 <xflow>:
 80072a0:	b513      	push	{r0, r1, r4, lr}
 80072a2:	4604      	mov	r4, r0
 80072a4:	4619      	mov	r1, r3
 80072a6:	4610      	mov	r0, r2
 80072a8:	b10c      	cbz	r4, 80072ae <xflow+0xe>
 80072aa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80072ae:	e9cd 2300 	strd	r2, r3, [sp]
 80072b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072b6:	f7f9 f90f 	bl	80004d8 <__aeabi_dmul>
 80072ba:	2222      	movs	r2, #34	@ 0x22
 80072bc:	b002      	add	sp, #8
 80072be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072c2:	f7ff bfe3 	b.w	800728c <with_errno>

080072c6 <__math_uflow>:
 80072c6:	2200      	movs	r2, #0
 80072c8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80072cc:	f7ff bfe8 	b.w	80072a0 <xflow>

080072d0 <__math_oflow>:
 80072d0:	2200      	movs	r2, #0
 80072d2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 80072d6:	f7ff bfe3 	b.w	80072a0 <xflow>
	...

080072dc <__ieee754_sqrt>:
 80072dc:	4a67      	ldr	r2, [pc, #412]	@ (800747c <__ieee754_sqrt+0x1a0>)
 80072de:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e2:	438a      	bics	r2, r1
 80072e4:	4606      	mov	r6, r0
 80072e6:	460f      	mov	r7, r1
 80072e8:	460b      	mov	r3, r1
 80072ea:	4604      	mov	r4, r0
 80072ec:	d10e      	bne.n	800730c <__ieee754_sqrt+0x30>
 80072ee:	4602      	mov	r2, r0
 80072f0:	f7f9 f8f2 	bl	80004d8 <__aeabi_dmul>
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	4630      	mov	r0, r6
 80072fa:	4639      	mov	r1, r7
 80072fc:	f7f8 ff36 	bl	800016c <__adddf3>
 8007300:	4606      	mov	r6, r0
 8007302:	460f      	mov	r7, r1
 8007304:	4630      	mov	r0, r6
 8007306:	4639      	mov	r1, r7
 8007308:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800730c:	2900      	cmp	r1, #0
 800730e:	dc0c      	bgt.n	800732a <__ieee754_sqrt+0x4e>
 8007310:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8007314:	4302      	orrs	r2, r0
 8007316:	d0f5      	beq.n	8007304 <__ieee754_sqrt+0x28>
 8007318:	b189      	cbz	r1, 800733e <__ieee754_sqrt+0x62>
 800731a:	4602      	mov	r2, r0
 800731c:	f7f8 ff24 	bl	8000168 <__aeabi_dsub>
 8007320:	4602      	mov	r2, r0
 8007322:	460b      	mov	r3, r1
 8007324:	f7f9 fa02 	bl	800072c <__aeabi_ddiv>
 8007328:	e7ea      	b.n	8007300 <__ieee754_sqrt+0x24>
 800732a:	150a      	asrs	r2, r1, #20
 800732c:	d115      	bne.n	800735a <__ieee754_sqrt+0x7e>
 800732e:	2100      	movs	r1, #0
 8007330:	e009      	b.n	8007346 <__ieee754_sqrt+0x6a>
 8007332:	0ae3      	lsrs	r3, r4, #11
 8007334:	3a15      	subs	r2, #21
 8007336:	0564      	lsls	r4, r4, #21
 8007338:	2b00      	cmp	r3, #0
 800733a:	d0fa      	beq.n	8007332 <__ieee754_sqrt+0x56>
 800733c:	e7f7      	b.n	800732e <__ieee754_sqrt+0x52>
 800733e:	460a      	mov	r2, r1
 8007340:	e7fa      	b.n	8007338 <__ieee754_sqrt+0x5c>
 8007342:	005b      	lsls	r3, r3, #1
 8007344:	3101      	adds	r1, #1
 8007346:	02d8      	lsls	r0, r3, #11
 8007348:	d5fb      	bpl.n	8007342 <__ieee754_sqrt+0x66>
 800734a:	1e48      	subs	r0, r1, #1
 800734c:	1a12      	subs	r2, r2, r0
 800734e:	f1c1 0020 	rsb	r0, r1, #32
 8007352:	fa24 f000 	lsr.w	r0, r4, r0
 8007356:	4303      	orrs	r3, r0
 8007358:	408c      	lsls	r4, r1
 800735a:	2600      	movs	r6, #0
 800735c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8007360:	2116      	movs	r1, #22
 8007362:	07d2      	lsls	r2, r2, #31
 8007364:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8007368:	4632      	mov	r2, r6
 800736a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800736e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007372:	bf5c      	itt	pl
 8007374:	005b      	lslpl	r3, r3, #1
 8007376:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800737a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800737e:	bf58      	it	pl
 8007380:	0064      	lslpl	r4, r4, #1
 8007382:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007386:	107f      	asrs	r7, r7, #1
 8007388:	0064      	lsls	r4, r4, #1
 800738a:	1815      	adds	r5, r2, r0
 800738c:	429d      	cmp	r5, r3
 800738e:	bfde      	ittt	le
 8007390:	182a      	addle	r2, r5, r0
 8007392:	1b5b      	suble	r3, r3, r5
 8007394:	1836      	addle	r6, r6, r0
 8007396:	0fe5      	lsrs	r5, r4, #31
 8007398:	3901      	subs	r1, #1
 800739a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800739e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80073a2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80073a6:	d1f0      	bne.n	800738a <__ieee754_sqrt+0xae>
 80073a8:	460d      	mov	r5, r1
 80073aa:	f04f 0a20 	mov.w	sl, #32
 80073ae:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80073b2:	429a      	cmp	r2, r3
 80073b4:	eb01 0c00 	add.w	ip, r1, r0
 80073b8:	db02      	blt.n	80073c0 <__ieee754_sqrt+0xe4>
 80073ba:	d113      	bne.n	80073e4 <__ieee754_sqrt+0x108>
 80073bc:	45a4      	cmp	ip, r4
 80073be:	d811      	bhi.n	80073e4 <__ieee754_sqrt+0x108>
 80073c0:	f1bc 0f00 	cmp.w	ip, #0
 80073c4:	eb0c 0100 	add.w	r1, ip, r0
 80073c8:	da42      	bge.n	8007450 <__ieee754_sqrt+0x174>
 80073ca:	2900      	cmp	r1, #0
 80073cc:	db40      	blt.n	8007450 <__ieee754_sqrt+0x174>
 80073ce:	f102 0e01 	add.w	lr, r2, #1
 80073d2:	1a9b      	subs	r3, r3, r2
 80073d4:	4672      	mov	r2, lr
 80073d6:	45a4      	cmp	ip, r4
 80073d8:	bf88      	it	hi
 80073da:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80073de:	eba4 040c 	sub.w	r4, r4, ip
 80073e2:	4405      	add	r5, r0
 80073e4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80073e8:	f1ba 0a01 	subs.w	sl, sl, #1
 80073ec:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80073f0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80073f4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80073f8:	d1db      	bne.n	80073b2 <__ieee754_sqrt+0xd6>
 80073fa:	431c      	orrs	r4, r3
 80073fc:	d01a      	beq.n	8007434 <__ieee754_sqrt+0x158>
 80073fe:	4c20      	ldr	r4, [pc, #128]	@ (8007480 <__ieee754_sqrt+0x1a4>)
 8007400:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8007484 <__ieee754_sqrt+0x1a8>
 8007404:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007408:	e9db 2300 	ldrd	r2, r3, [fp]
 800740c:	f7f8 feac 	bl	8000168 <__aeabi_dsub>
 8007410:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	4640      	mov	r0, r8
 800741a:	4649      	mov	r1, r9
 800741c:	f7f9 fad8 	bl	80009d0 <__aeabi_dcmple>
 8007420:	b140      	cbz	r0, 8007434 <__ieee754_sqrt+0x158>
 8007422:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007426:	e9db 2300 	ldrd	r2, r3, [fp]
 800742a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800742e:	d111      	bne.n	8007454 <__ieee754_sqrt+0x178>
 8007430:	4655      	mov	r5, sl
 8007432:	3601      	adds	r6, #1
 8007434:	1072      	asrs	r2, r6, #1
 8007436:	086b      	lsrs	r3, r5, #1
 8007438:	07f1      	lsls	r1, r6, #31
 800743a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800743e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8007442:	bf48      	it	mi
 8007444:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8007448:	4618      	mov	r0, r3
 800744a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800744e:	e757      	b.n	8007300 <__ieee754_sqrt+0x24>
 8007450:	4696      	mov	lr, r2
 8007452:	e7be      	b.n	80073d2 <__ieee754_sqrt+0xf6>
 8007454:	f7f8 fe8a 	bl	800016c <__adddf3>
 8007458:	e9d4 8900 	ldrd	r8, r9, [r4]
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	4640      	mov	r0, r8
 8007462:	4649      	mov	r1, r9
 8007464:	f7f9 faaa 	bl	80009bc <__aeabi_dcmplt>
 8007468:	b120      	cbz	r0, 8007474 <__ieee754_sqrt+0x198>
 800746a:	1ca8      	adds	r0, r5, #2
 800746c:	bf08      	it	eq
 800746e:	3601      	addeq	r6, #1
 8007470:	3502      	adds	r5, #2
 8007472:	e7df      	b.n	8007434 <__ieee754_sqrt+0x158>
 8007474:	1c6b      	adds	r3, r5, #1
 8007476:	f023 0501 	bic.w	r5, r3, #1
 800747a:	e7db      	b.n	8007434 <__ieee754_sqrt+0x158>
 800747c:	7ff00000 	.word	0x7ff00000
 8007480:	200001e0 	.word	0x200001e0
 8007484:	200001d8 	.word	0x200001d8

08007488 <_init>:
 8007488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748a:	bf00      	nop
 800748c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748e:	bc08      	pop	{r3}
 8007490:	469e      	mov	lr, r3
 8007492:	4770      	bx	lr

08007494 <_fini>:
 8007494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007496:	bf00      	nop
 8007498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800749a:	bc08      	pop	{r3}
 800749c:	469e      	mov	lr, r3
 800749e:	4770      	bx	lr
